#define rand	pan_rand
#define pthread_equal(a,b)	((a)==(b))
#if defined(HAS_CODE) && defined(VERBOSE)
	#ifdef BFS_PAR
		bfs_printf("Pr: %d Tr: %d\n", II, t->forw);
	#else
		cpu_printf("Pr: %d Tr: %d\n", II, t->forw);
	#endif
#endif
	switch (t->forw) {
	default: Uerror("bad forward move");
	case 0:	/* if without executable clauses */
		continue;
	case 1: /* generic 'goto' or 'skip' */
		IfNotBlocked
		_m = 3; goto P999;
	case 2: /* generic 'else' */
		IfNotBlocked
		if (trpt->o_pm&1) continue;
		_m = 3; goto P999;

		 /* CLAIM fairness */
	case 3: // STATE 1 - _spin_nvr.tmp:1516 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][1] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==3)&&(now.commands[2]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4: // STATE 3 - _spin_nvr.tmp:1517 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][3] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5: // STATE 7 - _spin_nvr.tmp:1519 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][7] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==3)&&(now.commands[1]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6: // STATE 9 - _spin_nvr.tmp:1520 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][9] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 7: // STATE 13 - _spin_nvr.tmp:1522 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][13] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==3)&&(now.commands[0]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 8: // STATE 15 - _spin_nvr.tmp:1523 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][15] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 9: // STATE 22 - _spin_nvr.tmp:1528 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][22] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==3)&&(now.commands[2]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 10: // STATE 24 - _spin_nvr.tmp:1529 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][24] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 11: // STATE 29 - _spin_nvr.tmp:1533 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][29] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 12: // STATE 34 - _spin_nvr.tmp:1537 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][34] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==3)&&(now.commands[1]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 13: // STATE 36 - _spin_nvr.tmp:1538 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][36] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 14: // STATE 41 - _spin_nvr.tmp:1542 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported41 = 0;
			if (verbose && !reported41)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported41 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported41 = 0;
			if (verbose && !reported41)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported41 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][41] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 15: // STATE 46 - _spin_nvr.tmp:1546 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported46 = 0;
			if (verbose && !reported46)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported46 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported46 = 0;
			if (verbose && !reported46)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported46 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][46] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==3)&&(now.commands[0]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 16: // STATE 48 - _spin_nvr.tmp:1547 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported48 = 0;
			if (verbose && !reported48)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported48 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported48 = 0;
			if (verbose && !reported48)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported48 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][48] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 17: // STATE 53 - _spin_nvr.tmp:1551 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][53] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 18: // STATE 58 - _spin_nvr.tmp:1555 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][58] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==3)&&(now.commands[2]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 19: // STATE 60 - _spin_nvr.tmp:1556 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported60 = 0;
			if (verbose && !reported60)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported60 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported60 = 0;
			if (verbose && !reported60)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported60 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][60] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 20: // STATE 65 - _spin_nvr.tmp:1560 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][65] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 21: // STATE 67 - _spin_nvr.tmp:1561 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][67] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==3)&&(now.commands[2]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 22: // STATE 72 - _spin_nvr.tmp:1565 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][72] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 23: // STATE 76 - _spin_nvr.tmp:1567 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][76] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==3)&&(now.commands[2]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 24: // STATE 81 - _spin_nvr.tmp:1571 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][81] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==3)&&(now.commands[1]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 25: // STATE 83 - _spin_nvr.tmp:1572 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][83] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 26: // STATE 88 - _spin_nvr.tmp:1576 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][88] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 27: // STATE 90 - _spin_nvr.tmp:1577 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][90] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==3)&&(now.commands[1]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 28: // STATE 95 - _spin_nvr.tmp:1581 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][95] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 29: // STATE 99 - _spin_nvr.tmp:1583 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported99 = 0;
			if (verbose && !reported99)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported99 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported99 = 0;
			if (verbose && !reported99)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported99 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][99] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==3)&&(now.commands[1]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 30: // STATE 104 - _spin_nvr.tmp:1587 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][104] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==3)&&(now.commands[0]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 31: // STATE 106 - _spin_nvr.tmp:1588 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported106 = 0;
			if (verbose && !reported106)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported106 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported106 = 0;
			if (verbose && !reported106)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported106 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][106] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 32: // STATE 111 - _spin_nvr.tmp:1592 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][111] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 33: // STATE 113 - _spin_nvr.tmp:1593 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][113] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==3)&&(now.commands[0]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 34: // STATE 118 - _spin_nvr.tmp:1597 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][118] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 35: // STATE 122 - _spin_nvr.tmp:1599 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][122] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==3)&&(now.commands[0]==6)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 36: // STATE 127 - _spin_nvr.tmp:1601 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][127] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM liveness */
	case 37: // STATE 1 - _spin_nvr.tmp:1391 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][1] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 38: // STATE 3 - _spin_nvr.tmp:1392 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][3] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 39: // STATE 5 - _spin_nvr.tmp:1393 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][5] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 40: // STATE 7 - _spin_nvr.tmp:1394 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][7] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 41: // STATE 9 - _spin_nvr.tmp:1395 - [(!(((states[0]==STOPPING)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][9] = 1;
		if (!( !(((now.states[0]==7)||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 42: // STATE 11 - _spin_nvr.tmp:1396 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported11 = 0;
			if (verbose && !reported11)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported11 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported11 = 0;
			if (verbose && !reported11)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported11 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][11] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 43: // STATE 13 - _spin_nvr.tmp:1397 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][13] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 44: // STATE 15 - _spin_nvr.tmp:1398 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][15] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 45: // STATE 17 - _spin_nvr.tmp:1399 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][17] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 46: // STATE 19 - _spin_nvr.tmp:1400 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported19 = 0;
			if (verbose && !reported19)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported19 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported19 = 0;
			if (verbose && !reported19)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported19 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][19] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 47: // STATE 21 - _spin_nvr.tmp:1401 - [(!(((states[0]==STOPPING)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported21 = 0;
			if (verbose && !reported21)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported21 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported21 = 0;
			if (verbose && !reported21)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported21 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][21] = 1;
		if (!( !(((now.states[0]==7)||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 48: // STATE 26 - _spin_nvr.tmp:1405 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][26] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 49: // STATE 28 - _spin_nvr.tmp:1406 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][28] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 50: // STATE 30 - _spin_nvr.tmp:1407 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][30] = 1;
		if (!((( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 51: // STATE 32 - _spin_nvr.tmp:1408 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][32] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 52: // STATE 34 - _spin_nvr.tmp:1409 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][34] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 53: // STATE 39 - _spin_nvr.tmp:1413 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][39] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 54: // STATE 44 - _spin_nvr.tmp:1417 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][44] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 55: // STATE 49 - _spin_nvr.tmp:1421 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][49] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 56: // STATE 54 - _spin_nvr.tmp:1425 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported54 = 0;
			if (verbose && !reported54)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported54 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported54 = 0;
			if (verbose && !reported54)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported54 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][54] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 57: // STATE 59 - _spin_nvr.tmp:1429 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][59] = 1;
		if (!((( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 58: // STATE 61 - _spin_nvr.tmp:1430 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][61] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 59: // STATE 63 - _spin_nvr.tmp:1431 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][63] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 60: // STATE 65 - _spin_nvr.tmp:1432 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][65] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 61: // STATE 67 - _spin_nvr.tmp:1433 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][67] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 62: // STATE 72 - _spin_nvr.tmp:1437 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][72] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 63: // STATE 77 - _spin_nvr.tmp:1441 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][77] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 64: // STATE 82 - _spin_nvr.tmp:1445 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][82] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 65: // STATE 84 - _spin_nvr.tmp:1446 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][84] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 66: // STATE 86 - _spin_nvr.tmp:1447 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported86 = 0;
			if (verbose && !reported86)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported86 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported86 = 0;
			if (verbose && !reported86)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported86 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][86] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 67: // STATE 88 - _spin_nvr.tmp:1448 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][88] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 68: // STATE 90 - _spin_nvr.tmp:1449 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][90] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 69: // STATE 95 - _spin_nvr.tmp:1453 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][95] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 70: // STATE 97 - _spin_nvr.tmp:1454 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][97] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 71: // STATE 102 - _spin_nvr.tmp:1458 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][102] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 72: // STATE 104 - _spin_nvr.tmp:1459 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][104] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 73: // STATE 109 - _spin_nvr.tmp:1463 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported109 = 0;
			if (verbose && !reported109)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported109 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported109 = 0;
			if (verbose && !reported109)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported109 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][109] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 74: // STATE 111 - _spin_nvr.tmp:1464 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][111] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 75: // STATE 116 - _spin_nvr.tmp:1468 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported116 = 0;
			if (verbose && !reported116)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported116 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported116 = 0;
			if (verbose && !reported116)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported116 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][116] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 76: // STATE 118 - _spin_nvr.tmp:1469 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][118] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 77: // STATE 120 - _spin_nvr.tmp:1470 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][120] = 1;
		if (!((( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 78: // STATE 122 - _spin_nvr.tmp:1471 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][122] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 79: // STATE 124 - _spin_nvr.tmp:1472 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][124] = 1;
		if (!(( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 80: // STATE 129 - _spin_nvr.tmp:1476 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported129 = 0;
			if (verbose && !reported129)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported129 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported129 = 0;
			if (verbose && !reported129)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported129 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][129] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 81: // STATE 131 - _spin_nvr.tmp:1477 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][131] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 82: // STATE 133 - _spin_nvr.tmp:1478 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][133] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 83: // STATE 140 - _spin_nvr.tmp:1483 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported140 = 0;
			if (verbose && !reported140)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported140 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported140 = 0;
			if (verbose && !reported140)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported140 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][140] = 1;
		if (!((( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 84: // STATE 142 - _spin_nvr.tmp:1484 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported142 = 0;
			if (verbose && !reported142)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported142 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported142 = 0;
			if (verbose && !reported142)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported142 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][142] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 85: // STATE 144 - _spin_nvr.tmp:1485 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][144] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 86: // STATE 146 - _spin_nvr.tmp:1486 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported146 = 0;
			if (verbose && !reported146)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported146 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported146 = 0;
			if (verbose && !reported146)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported146 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][146] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 87: // STATE 148 - _spin_nvr.tmp:1487 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported148 = 0;
			if (verbose && !reported148)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported148 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported148 = 0;
			if (verbose && !reported148)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported148 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][148] = 1;
		if (!(( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 88: // STATE 153 - _spin_nvr.tmp:1491 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported153 = 0;
			if (verbose && !reported153)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported153 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported153 = 0;
			if (verbose && !reported153)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported153 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][153] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 89: // STATE 155 - _spin_nvr.tmp:1492 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported155 = 0;
			if (verbose && !reported155)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported155 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported155 = 0;
			if (verbose && !reported155)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported155 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][155] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 90: // STATE 157 - _spin_nvr.tmp:1493 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][157] = 1;
		if (!((( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 91: // STATE 159 - _spin_nvr.tmp:1494 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][159] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 92: // STATE 161 - _spin_nvr.tmp:1495 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported161 = 0;
			if (verbose && !reported161)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported161 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported161 = 0;
			if (verbose && !reported161)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported161 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][161] = 1;
		if (!(( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 93: // STATE 166 - _spin_nvr.tmp:1499 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported166 = 0;
			if (verbose && !reported166)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported166 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported166 = 0;
			if (verbose && !reported166)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported166 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][166] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 94: // STATE 168 - _spin_nvr.tmp:1500 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported168 = 0;
			if (verbose && !reported168)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported168 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported168 = 0;
			if (verbose && !reported168)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported168 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][168] = 1;
		if (!( !(( !(((now.states[2]==3)&&(now.commands[2]==6)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 95: // STATE 173 - _spin_nvr.tmp:1504 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][173] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 96: // STATE 175 - _spin_nvr.tmp:1505 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][175] = 1;
		if (!( !(( !(((now.states[1]==3)&&(now.commands[1]==6)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 97: // STATE 180 - _spin_nvr.tmp:1509 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][180] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 98: // STATE 182 - _spin_nvr.tmp:1510 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported182 = 0;
			if (verbose && !reported182)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported182 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported182 = 0;
			if (verbose && !reported182)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported182 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][182] = 1;
		if (!( !(( !(((now.states[0]==3)&&(now.commands[0]==6)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 99: // STATE 187 - _spin_nvr.tmp:1512 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][187] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_halts_last */
	case 100: // STATE 1 - _spin_nvr.tmp:1380 - [((!(!(((states[0]==STOPPING)||(states[0]==ABORTING))))&&!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0))))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][1] = 1;
		if (!(( !( !(((now.states[0]==7)||(now.states[0]==10))))&& !(((((now.states[1]==9)||(now.states[1]==11))||(now.states[1]==0))&&(((now.states[2]==9)||(now.states[2]==11))||(now.states[2]==0)))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 101: // STATE 8 - _spin_nvr.tmp:1385 - [(!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][8] = 1;
		if (!( !(((((now.states[1]==9)||(now.states[1]==11))||(now.states[1]==0))&&(((now.states[2]==9)||(now.states[2]==11))||(now.states[2]==0))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 102: // STATE 13 - _spin_nvr.tmp:1387 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][13] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_never_aborts */
	case 103: // STATE 1 - _spin_nvr.tmp:1371 - [(((states[0]==ABORTED)||(commands[0]==ABORT)))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[16][1] = 1;
		if (!(((now.states[0]==11)||(now.commands[0]==13))))
			continue;
		/* merge: assert(!(((states[0]==ABORTED)||(commands[0]==ABORT))))(0, 2, 6) */
		reached[16][2] = 1;
		spin_assert( !(((now.states[0]==11)||(now.commands[0]==13))), " !(((states[0]==11)||(commands[0]==13)))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[16][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 104: // STATE 10 - _spin_nvr.tmp:1376 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[16][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_stops_after_some_workers_abort */
	case 105: // STATE 1 - _spin_nvr.tmp:1354 - [(((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][1] = 1;
		if (!((( !( !(((now.states[1]==11)||(now.states[2]==11))))&& !((now.states[0]==4)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 106: // STATE 3 - _spin_nvr.tmp:1355 - [((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][3] = 1;
		if (!(( !( !(((now.states[1]==11)||(now.states[2]==11))))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 107: // STATE 10 - _spin_nvr.tmp:1360 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][10] = 1;
		if (!(( !((now.states[0]==4))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 108: // STATE 15 - _spin_nvr.tmp:1364 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][15] = 1;
		if (!(( !((now.states[0]==4))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 109: // STATE 17 - _spin_nvr.tmp:1365 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][17] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 110: // STATE 22 - _spin_nvr.tmp:1367 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][22] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_stops_after_all_workers_stop */
	case 111: // STATE 1 - _spin_nvr.tmp:1337 - [(((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][1] = 1;
		if (!((( !( !(((now.states[1]==9)&&(now.states[2]==9))))&& !((now.states[0]==4)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 112: // STATE 3 - _spin_nvr.tmp:1338 - [((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][3] = 1;
		if (!(( !( !(((now.states[1]==9)&&(now.states[2]==9))))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 113: // STATE 10 - _spin_nvr.tmp:1343 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][10] = 1;
		if (!(( !((now.states[0]==4))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 114: // STATE 15 - _spin_nvr.tmp:1347 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][15] = 1;
		if (!(( !((now.states[0]==4))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 115: // STATE 17 - _spin_nvr.tmp:1348 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][17] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 116: // STATE 22 - _spin_nvr.tmp:1350 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][22] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_constructs_workers */
	case 117: // STATE 1 - _spin_nvr.tmp:1328 - [(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0)))))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[13][1] = 1;
		if (!( !(( !(((now.states[1]==1)||(now.states[2]==1)))|| !((now.states[0]==0))))))
			continue;
		/* merge: assert(!(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0))))))(0, 2, 6) */
		reached[13][2] = 1;
		spin_assert( !( !(( !(((now.states[1]==1)||(now.states[2]==1)))|| !((now.states[0]==0))))), " !( !(( !(((states[1]==1)||(states[2]==1)))|| !((states[0]==0)))))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[13][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 118: // STATE 10 - _spin_nvr.tmp:1333 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[13][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_is_the_first_thread */
	case 119: // STATE 1 - _spin_nvr.tmp:1319 - [(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0)))))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[12][1] = 1;
		if (!( !(( !((now.states[0]==0))||((now.states[1]==0)&&(now.states[2]==0))))))
			continue;
		/* merge: assert(!(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0))))))(0, 2, 6) */
		reached[12][2] = 1;
		spin_assert( !( !(( !((now.states[0]==0))||((now.states[1]==0)&&(now.states[2]==0))))), " !( !(( !((states[0]==0))||((states[1]==0)&&(states[2]==0)))))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[12][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 120: // STATE 10 - _spin_nvr.tmp:1324 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[12][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM abort_is_undoable */
	case 121: // STATE 1 - _spin_nvr.tmp:1028 - [(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][1] = 1;
		if (!((( !( !((now.commands[2]==13)))&& !((now.commands[2]==0)))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 122: // STATE 3 - _spin_nvr.tmp:1029 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][3] = 1;
		if (!(( !( !((now.commands[2]==13)))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 123: // STATE 5 - _spin_nvr.tmp:1030 - [(((!(!((commands[0]==ABORT)))&&(!((commands[0]==0))&&!((commands[0]==ABORT))))||((!(!((commands[1]==ABORT)))&&(!((commands[1]==0))&&!((commands[1]==ABORT))))||(!(!((commands[2]==ABORT)))&&(!((commands[2]==0))&&!((commands[2]==ABORT)))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][5] = 1;
		if (!((( !( !((now.commands[0]==13)))&&( !((now.commands[0]==0))&& !((now.commands[0]==13))))||(( !( !((now.commands[1]==13)))&&( !((now.commands[1]==0))&& !((now.commands[1]==13))))||( !( !((now.commands[2]==13)))&&( !((now.commands[2]==0))&& !((now.commands[2]==13))))))))
			continue;
		/* merge: assert(!(((!(!((commands[0]==ABORT)))&&(!((commands[0]==0))&&!((commands[0]==ABORT))))||((!(!((commands[1]==ABORT)))&&(!((commands[1]==0))&&!((commands[1]==ABORT))))||(!(!((commands[2]==ABORT)))&&(!((commands[2]==0))&&!((commands[2]==ABORT))))))))(0, 6, 48) */
		reached[11][6] = 1;
		spin_assert( !((( !( !((now.commands[0]==13)))&&( !((now.commands[0]==0))&& !((now.commands[0]==13))))||(( !( !((now.commands[1]==13)))&&( !((now.commands[1]==0))&& !((now.commands[1]==13))))||( !( !((now.commands[2]==13)))&&( !((now.commands[2]==0))&& !((now.commands[2]==13))))))), " !((( !( !((commands[0]==13)))&&( !((commands[0]==0))&& !((commands[0]==13))))||(( !( !((commands[1]==13)))&&( !((commands[1]==0))&& !((commands[1]==13))))||( !( !((commands[2]==13)))&&( !((commands[2]==0))&& !((commands[2]==13)))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[11][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 124: // STATE 8 - _spin_nvr.tmp:1031 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][8] = 1;
		if (!(( !( !((now.commands[2]==13)))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 125: // STATE 10 - _spin_nvr.tmp:1032 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][10] = 1;
		if (!(( !( !((now.commands[2]==13)))&& !((now.commands[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 126: // STATE 12 - _spin_nvr.tmp:1033 - [(!(!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][12] = 1;
		if (!( !( !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 127: // STATE 14 - _spin_nvr.tmp:1034 - [(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][14] = 1;
		if (!((( !( !((now.commands[2]==13)))&& !((now.commands[2]==0)))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 128: // STATE 16 - _spin_nvr.tmp:1035 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][16] = 1;
		if (!(( !( !((now.commands[2]==13)))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 129: // STATE 18 - _spin_nvr.tmp:1036 - [(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][18] = 1;
		if (!((( !( !((now.commands[1]==13)))&& !((now.commands[1]==0)))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 130: // STATE 20 - _spin_nvr.tmp:1037 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][20] = 1;
		if (!(( !( !((now.commands[1]==13)))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 131: // STATE 22 - _spin_nvr.tmp:1038 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][22] = 1;
		if (!(( !( !((now.commands[1]==13)))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 132: // STATE 24 - _spin_nvr.tmp:1039 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][24] = 1;
		if (!(( !( !((now.commands[1]==13)))&& !((now.commands[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 133: // STATE 26 - _spin_nvr.tmp:1040 - [(!(!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][26] = 1;
		if (!( !( !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 134: // STATE 28 - _spin_nvr.tmp:1041 - [(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][28] = 1;
		if (!((( !( !((now.commands[1]==13)))&& !((now.commands[1]==0)))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 135: // STATE 30 - _spin_nvr.tmp:1042 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][30] = 1;
		if (!(( !( !((now.commands[1]==13)))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 136: // STATE 32 - _spin_nvr.tmp:1043 - [(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][32] = 1;
		if (!((( !( !((now.commands[0]==13)))&& !((now.commands[0]==0)))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 137: // STATE 34 - _spin_nvr.tmp:1044 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][34] = 1;
		if (!(( !( !((now.commands[0]==13)))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 138: // STATE 36 - _spin_nvr.tmp:1045 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][36] = 1;
		if (!(( !( !((now.commands[0]==13)))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 139: // STATE 38 - _spin_nvr.tmp:1046 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][38] = 1;
		if (!(( !( !((now.commands[0]==13)))&& !((now.commands[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 140: // STATE 40 - _spin_nvr.tmp:1047 - [(!(!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][40] = 1;
		if (!( !( !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 141: // STATE 42 - _spin_nvr.tmp:1048 - [(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][42] = 1;
		if (!((( !( !((now.commands[0]==13)))&& !((now.commands[0]==0)))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 142: // STATE 44 - _spin_nvr.tmp:1049 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][44] = 1;
		if (!(( !( !((now.commands[0]==13)))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 143: // STATE 51 - _spin_nvr.tmp:1054 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][51] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 144: // STATE 55 - _spin_nvr.tmp:1056 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][55] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 56, 60) */
		reached[11][56] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[11][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 145: // STATE 58 - _spin_nvr.tmp:1057 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][58] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 146: // STATE 63 - _spin_nvr.tmp:1061 - [(!((commands[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][63] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		/* merge: assert(!(!((commands[2]==0))))(0, 64, 68) */
		reached[11][64] = 1;
		spin_assert( !( !((now.commands[2]==0))), " !( !((commands[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[11][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 147: // STATE 71 - _spin_nvr.tmp:1066 - [(!((commands[2]==ABORT)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][71] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		/* merge: assert(!(!((commands[2]==ABORT))))(0, 72, 76) */
		reached[11][72] = 1;
		spin_assert( !( !((now.commands[2]==13))), " !( !((commands[2]==13)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[11][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 148: // STATE 79 - _spin_nvr.tmp:1071 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][79] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 80, 88) */
		reached[11][80] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[11][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 149: // STATE 82 - _spin_nvr.tmp:1072 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][82] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 150: // STATE 84 - _spin_nvr.tmp:1073 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][84] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 151: // STATE 91 - _spin_nvr.tmp:1078 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][91] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 152: // STATE 95 - _spin_nvr.tmp:1080 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][95] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 96, 100) */
		reached[11][96] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[11][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 153: // STATE 98 - _spin_nvr.tmp:1081 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][98] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 154: // STATE 103 - _spin_nvr.tmp:1085 - [(!((commands[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][103] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		/* merge: assert(!(!((commands[1]==0))))(0, 104, 108) */
		reached[11][104] = 1;
		spin_assert( !( !((now.commands[1]==0))), " !( !((commands[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[11][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 155: // STATE 111 - _spin_nvr.tmp:1090 - [(!((commands[1]==ABORT)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][111] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		/* merge: assert(!(!((commands[1]==ABORT))))(0, 112, 116) */
		reached[11][112] = 1;
		spin_assert( !( !((now.commands[1]==13))), " !( !((commands[1]==13)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[11][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 156: // STATE 119 - _spin_nvr.tmp:1095 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][119] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 120, 128) */
		reached[11][120] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[11][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 157: // STATE 122 - _spin_nvr.tmp:1096 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][122] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 158: // STATE 124 - _spin_nvr.tmp:1097 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][124] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 159: // STATE 131 - _spin_nvr.tmp:1102 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][131] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 160: // STATE 135 - _spin_nvr.tmp:1104 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][135] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 136, 140) */
		reached[11][136] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[11][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 161: // STATE 138 - _spin_nvr.tmp:1105 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][138] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 162: // STATE 143 - _spin_nvr.tmp:1109 - [(!((commands[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][143] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		/* merge: assert(!(!((commands[0]==0))))(0, 144, 148) */
		reached[11][144] = 1;
		spin_assert( !( !((now.commands[0]==0))), " !( !((commands[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[11][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 163: // STATE 151 - _spin_nvr.tmp:1114 - [(!((commands[0]==ABORT)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][151] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		/* merge: assert(!(!((commands[0]==ABORT))))(0, 152, 156) */
		reached[11][152] = 1;
		spin_assert( !( !((now.commands[0]==13))), " !( !((commands[0]==13)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[11][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 164: // STATE 159 - _spin_nvr.tmp:1119 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][159] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 160, 168) */
		reached[11][160] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[11][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 165: // STATE 162 - _spin_nvr.tmp:1120 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][162] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 166: // STATE 164 - _spin_nvr.tmp:1121 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][164] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 167: // STATE 171 - _spin_nvr.tmp:1126 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][171] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 172, 180) */
		reached[11][172] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[11][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 168: // STATE 174 - _spin_nvr.tmp:1127 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][174] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 169: // STATE 176 - _spin_nvr.tmp:1128 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][176] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 170: // STATE 183 - _spin_nvr.tmp:1133 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][183] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 184, 192) */
		reached[11][184] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[11][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 171: // STATE 186 - _spin_nvr.tmp:1134 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][186] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 172: // STATE 188 - _spin_nvr.tmp:1135 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][188] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 173: // STATE 195 - _spin_nvr.tmp:1140 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][195] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 196, 204) */
		reached[11][196] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[11][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 174: // STATE 198 - _spin_nvr.tmp:1141 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][198] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 175: // STATE 200 - _spin_nvr.tmp:1142 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][200] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 176: // STATE 207 - _spin_nvr.tmp:1147 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][207] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 177: // STATE 211 - _spin_nvr.tmp:1149 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][211] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 212, 216) */
		reached[11][212] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[11][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 178: // STATE 214 - _spin_nvr.tmp:1150 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][214] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 179: // STATE 219 - _spin_nvr.tmp:1154 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][219] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 180: // STATE 221 - _spin_nvr.tmp:1155 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][221] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 181: // STATE 223 - _spin_nvr.tmp:1156 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][223] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 224, 236) */
		reached[11][224] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[11][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 182: // STATE 226 - _spin_nvr.tmp:1157 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][226] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 183: // STATE 228 - _spin_nvr.tmp:1158 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][228] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 184: // STATE 232 - _spin_nvr.tmp:1160 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][232] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 185: // STATE 234 - _spin_nvr.tmp:1161 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][234] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 186: // STATE 239 - _spin_nvr.tmp:1165 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][239] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 187: // STATE 243 - _spin_nvr.tmp:1167 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][243] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 244, 250) */
		reached[11][244] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[11][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 188: // STATE 246 - _spin_nvr.tmp:1168 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][246] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 189: // STATE 248 - _spin_nvr.tmp:1169 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][248] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 190: // STATE 253 - _spin_nvr.tmp:1173 - [(!((commands[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][253] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		/* merge: assert(!(!((commands[2]==0))))(0, 254, 258) */
		reached[11][254] = 1;
		spin_assert( !( !((now.commands[2]==0))), " !( !((commands[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[11][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 191: // STATE 261 - _spin_nvr.tmp:1178 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][261] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 192: // STATE 263 - _spin_nvr.tmp:1179 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][263] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 193: // STATE 265 - _spin_nvr.tmp:1180 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][265] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 266, 282) */
		reached[11][266] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[11][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 194: // STATE 268 - _spin_nvr.tmp:1181 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][268] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 195: // STATE 270 - _spin_nvr.tmp:1182 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][270] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 196: // STATE 274 - _spin_nvr.tmp:1184 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][274] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 197: // STATE 276 - _spin_nvr.tmp:1185 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][276] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 198: // STATE 278 - _spin_nvr.tmp:1186 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][278] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 199: // STATE 280 - _spin_nvr.tmp:1187 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][280] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 200: // STATE 285 - _spin_nvr.tmp:1191 - [(!((commands[2]==ABORT)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][285] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		/* merge: assert(!(!((commands[2]==ABORT))))(0, 286, 290) */
		reached[11][286] = 1;
		spin_assert( !( !((now.commands[2]==13))), " !( !((commands[2]==13)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[11][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 201: // STATE 293 - _spin_nvr.tmp:1196 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][293] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==13)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 294, 302) */
		reached[11][294] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==13)))), " !(( !((commands[2]==0))&& !((commands[2]==13))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[11][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 202: // STATE 296 - _spin_nvr.tmp:1197 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][296] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 203: // STATE 298 - _spin_nvr.tmp:1198 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][298] = 1;
		if (!( !((now.commands[2]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 204: // STATE 305 - _spin_nvr.tmp:1203 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][305] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 205: // STATE 309 - _spin_nvr.tmp:1205 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][309] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 310, 314) */
		reached[11][310] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[11][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 206: // STATE 312 - _spin_nvr.tmp:1206 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][312] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 207: // STATE 317 - _spin_nvr.tmp:1210 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][317] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 208: // STATE 319 - _spin_nvr.tmp:1211 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][319] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 209: // STATE 321 - _spin_nvr.tmp:1212 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][321] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 322, 334) */
		reached[11][322] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[11][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 210: // STATE 324 - _spin_nvr.tmp:1213 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][324] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 211: // STATE 326 - _spin_nvr.tmp:1214 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][326] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 212: // STATE 330 - _spin_nvr.tmp:1216 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][330] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 213: // STATE 332 - _spin_nvr.tmp:1217 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][332] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 214: // STATE 337 - _spin_nvr.tmp:1221 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][337] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 215: // STATE 341 - _spin_nvr.tmp:1223 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][341] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 342, 348) */
		reached[11][342] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[11][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 216: // STATE 344 - _spin_nvr.tmp:1224 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][344] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 217: // STATE 346 - _spin_nvr.tmp:1225 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][346] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 218: // STATE 351 - _spin_nvr.tmp:1229 - [(!((commands[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][351] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		/* merge: assert(!(!((commands[1]==0))))(0, 352, 356) */
		reached[11][352] = 1;
		spin_assert( !( !((now.commands[1]==0))), " !( !((commands[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[11][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 219: // STATE 359 - _spin_nvr.tmp:1234 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][359] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 220: // STATE 361 - _spin_nvr.tmp:1235 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][361] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 221: // STATE 363 - _spin_nvr.tmp:1236 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][363] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 364, 380) */
		reached[11][364] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[11][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 222: // STATE 366 - _spin_nvr.tmp:1237 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][366] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 223: // STATE 368 - _spin_nvr.tmp:1238 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][368] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 224: // STATE 372 - _spin_nvr.tmp:1240 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][372] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 225: // STATE 374 - _spin_nvr.tmp:1241 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][374] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 226: // STATE 376 - _spin_nvr.tmp:1242 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][376] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 227: // STATE 378 - _spin_nvr.tmp:1243 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][378] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 228: // STATE 383 - _spin_nvr.tmp:1247 - [(!((commands[1]==ABORT)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][383] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		/* merge: assert(!(!((commands[1]==ABORT))))(0, 384, 388) */
		reached[11][384] = 1;
		spin_assert( !( !((now.commands[1]==13))), " !( !((commands[1]==13)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[11][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 229: // STATE 391 - _spin_nvr.tmp:1252 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][391] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==13)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 392, 400) */
		reached[11][392] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==13)))), " !(( !((commands[1]==0))&& !((commands[1]==13))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[11][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 230: // STATE 394 - _spin_nvr.tmp:1253 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][394] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 231: // STATE 396 - _spin_nvr.tmp:1254 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][396] = 1;
		if (!( !((now.commands[1]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 232: // STATE 403 - _spin_nvr.tmp:1259 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][403] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 233: // STATE 407 - _spin_nvr.tmp:1261 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][407] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 408, 412) */
		reached[11][408] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[11][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 234: // STATE 410 - _spin_nvr.tmp:1262 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][410] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 235: // STATE 415 - _spin_nvr.tmp:1266 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][415] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 236: // STATE 417 - _spin_nvr.tmp:1267 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][417] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 237: // STATE 419 - _spin_nvr.tmp:1268 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][419] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 420, 432) */
		reached[11][420] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[11][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 238: // STATE 422 - _spin_nvr.tmp:1269 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][422] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 239: // STATE 424 - _spin_nvr.tmp:1270 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][424] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 240: // STATE 428 - _spin_nvr.tmp:1272 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][428] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 241: // STATE 430 - _spin_nvr.tmp:1273 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][430] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 242: // STATE 435 - _spin_nvr.tmp:1277 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][435] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 243: // STATE 439 - _spin_nvr.tmp:1279 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][439] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 440, 446) */
		reached[11][440] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[11][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 244: // STATE 442 - _spin_nvr.tmp:1280 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][442] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 245: // STATE 444 - _spin_nvr.tmp:1281 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][444] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 246: // STATE 449 - _spin_nvr.tmp:1285 - [(!((commands[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][449] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		/* merge: assert(!(!((commands[0]==0))))(0, 450, 454) */
		reached[11][450] = 1;
		spin_assert( !( !((now.commands[0]==0))), " !( !((commands[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[11][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 247: // STATE 457 - _spin_nvr.tmp:1290 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][457] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 248: // STATE 459 - _spin_nvr.tmp:1291 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][459] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 249: // STATE 461 - _spin_nvr.tmp:1292 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][461] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 462, 478) */
		reached[11][462] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[11][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 250: // STATE 464 - _spin_nvr.tmp:1293 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][464] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 251: // STATE 466 - _spin_nvr.tmp:1294 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][466] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 252: // STATE 470 - _spin_nvr.tmp:1296 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][470] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 253: // STATE 472 - _spin_nvr.tmp:1297 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][472] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 254: // STATE 474 - _spin_nvr.tmp:1298 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][474] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 255: // STATE 476 - _spin_nvr.tmp:1299 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][476] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 256: // STATE 481 - _spin_nvr.tmp:1303 - [(!((commands[0]==ABORT)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][481] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		/* merge: assert(!(!((commands[0]==ABORT))))(0, 482, 486) */
		reached[11][482] = 1;
		spin_assert( !( !((now.commands[0]==13))), " !( !((commands[0]==13)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[11][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 257: // STATE 489 - _spin_nvr.tmp:1308 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][489] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==13)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 490, 498) */
		reached[11][490] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==13)))), " !(( !((commands[0]==0))&& !((commands[0]==13))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[11][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 258: // STATE 492 - _spin_nvr.tmp:1309 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][492] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 259: // STATE 494 - _spin_nvr.tmp:1310 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][494] = 1;
		if (!( !((now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 260: // STATE 502 - _spin_nvr.tmp:1315 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_aborted */
	case 261: // STATE 1 - _spin_nvr.tmp:737 - [(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][1] = 1;
		if (!((( !( !((now.states[2]==11)))&& !((now.states[2]==0)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 262: // STATE 3 - _spin_nvr.tmp:738 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][3] = 1;
		if (!(( !( !((now.states[2]==11)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 263: // STATE 5 - _spin_nvr.tmp:739 - [(((!(!((states[0]==ABORTED)))&&(!((states[0]==0))&&!((states[0]==ABORTED))))||((!(!((states[1]==ABORTED)))&&(!((states[1]==0))&&!((states[1]==ABORTED))))||(!(!((states[2]==ABORTED)))&&(!((states[2]==0))&&!((states[2]==ABORTED)))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][5] = 1;
		if (!((( !( !((now.states[0]==11)))&&( !((now.states[0]==0))&& !((now.states[0]==11))))||(( !( !((now.states[1]==11)))&&( !((now.states[1]==0))&& !((now.states[1]==11))))||( !( !((now.states[2]==11)))&&( !((now.states[2]==0))&& !((now.states[2]==11))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==ABORTED)))&&(!((states[0]==0))&&!((states[0]==ABORTED))))||((!(!((states[1]==ABORTED)))&&(!((states[1]==0))&&!((states[1]==ABORTED))))||(!(!((states[2]==ABORTED)))&&(!((states[2]==0))&&!((states[2]==ABORTED))))))))(0, 6, 48) */
		reached[10][6] = 1;
		spin_assert( !((( !( !((now.states[0]==11)))&&( !((now.states[0]==0))&& !((now.states[0]==11))))||(( !( !((now.states[1]==11)))&&( !((now.states[1]==0))&& !((now.states[1]==11))))||( !( !((now.states[2]==11)))&&( !((now.states[2]==0))&& !((now.states[2]==11))))))), " !((( !( !((states[0]==11)))&&( !((states[0]==0))&& !((states[0]==11))))||(( !( !((states[1]==11)))&&( !((states[1]==0))&& !((states[1]==11))))||( !( !((states[2]==11)))&&( !((states[2]==0))&& !((states[2]==11)))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[10][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 264: // STATE 8 - _spin_nvr.tmp:740 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][8] = 1;
		if (!(( !( !((now.states[2]==11)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 265: // STATE 10 - _spin_nvr.tmp:741 - [((!(!((states[2]==ABORTED)))&&!((states[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][10] = 1;
		if (!(( !( !((now.states[2]==11)))&& !((now.states[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 266: // STATE 12 - _spin_nvr.tmp:742 - [(!(!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][12] = 1;
		if (!( !( !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 267: // STATE 14 - _spin_nvr.tmp:743 - [(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][14] = 1;
		if (!((( !( !((now.states[2]==11)))&& !((now.states[2]==0)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 268: // STATE 16 - _spin_nvr.tmp:744 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][16] = 1;
		if (!(( !( !((now.states[2]==11)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 269: // STATE 18 - _spin_nvr.tmp:745 - [(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][18] = 1;
		if (!((( !( !((now.states[1]==11)))&& !((now.states[1]==0)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 270: // STATE 20 - _spin_nvr.tmp:746 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][20] = 1;
		if (!(( !( !((now.states[1]==11)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 271: // STATE 22 - _spin_nvr.tmp:747 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][22] = 1;
		if (!(( !( !((now.states[1]==11)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 272: // STATE 24 - _spin_nvr.tmp:748 - [((!(!((states[1]==ABORTED)))&&!((states[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][24] = 1;
		if (!(( !( !((now.states[1]==11)))&& !((now.states[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 273: // STATE 26 - _spin_nvr.tmp:749 - [(!(!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][26] = 1;
		if (!( !( !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 274: // STATE 28 - _spin_nvr.tmp:750 - [(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][28] = 1;
		if (!((( !( !((now.states[1]==11)))&& !((now.states[1]==0)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 275: // STATE 30 - _spin_nvr.tmp:751 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][30] = 1;
		if (!(( !( !((now.states[1]==11)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 276: // STATE 32 - _spin_nvr.tmp:752 - [(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][32] = 1;
		if (!((( !( !((now.states[0]==11)))&& !((now.states[0]==0)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 277: // STATE 34 - _spin_nvr.tmp:753 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][34] = 1;
		if (!(( !( !((now.states[0]==11)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 278: // STATE 36 - _spin_nvr.tmp:754 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][36] = 1;
		if (!(( !( !((now.states[0]==11)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 279: // STATE 38 - _spin_nvr.tmp:755 - [((!(!((states[0]==ABORTED)))&&!((states[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][38] = 1;
		if (!(( !( !((now.states[0]==11)))&& !((now.states[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 280: // STATE 40 - _spin_nvr.tmp:756 - [(!(!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][40] = 1;
		if (!( !( !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 281: // STATE 42 - _spin_nvr.tmp:757 - [(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][42] = 1;
		if (!((( !( !((now.states[0]==11)))&& !((now.states[0]==0)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 282: // STATE 44 - _spin_nvr.tmp:758 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][44] = 1;
		if (!(( !( !((now.states[0]==11)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 283: // STATE 51 - _spin_nvr.tmp:763 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][51] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 284: // STATE 55 - _spin_nvr.tmp:765 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][55] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 56, 60) */
		reached[10][56] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[10][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 285: // STATE 58 - _spin_nvr.tmp:766 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][58] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 286: // STATE 63 - _spin_nvr.tmp:770 - [(!((states[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][63] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 64, 68) */
		reached[10][64] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[10][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 287: // STATE 71 - _spin_nvr.tmp:775 - [(!((states[2]==ABORTED)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][71] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		/* merge: assert(!(!((states[2]==ABORTED))))(0, 72, 76) */
		reached[10][72] = 1;
		spin_assert( !( !((now.states[2]==11))), " !( !((states[2]==11)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[10][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 288: // STATE 79 - _spin_nvr.tmp:780 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][79] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 80, 88) */
		reached[10][80] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[10][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 289: // STATE 82 - _spin_nvr.tmp:781 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][82] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 290: // STATE 84 - _spin_nvr.tmp:782 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][84] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 291: // STATE 91 - _spin_nvr.tmp:787 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][91] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 292: // STATE 95 - _spin_nvr.tmp:789 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][95] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 96, 100) */
		reached[10][96] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[10][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 293: // STATE 98 - _spin_nvr.tmp:790 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][98] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 294: // STATE 103 - _spin_nvr.tmp:794 - [(!((states[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][103] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 104, 108) */
		reached[10][104] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[10][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 295: // STATE 111 - _spin_nvr.tmp:799 - [(!((states[1]==ABORTED)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][111] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		/* merge: assert(!(!((states[1]==ABORTED))))(0, 112, 116) */
		reached[10][112] = 1;
		spin_assert( !( !((now.states[1]==11))), " !( !((states[1]==11)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[10][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 296: // STATE 119 - _spin_nvr.tmp:804 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][119] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 120, 128) */
		reached[10][120] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[10][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 297: // STATE 122 - _spin_nvr.tmp:805 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][122] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 298: // STATE 124 - _spin_nvr.tmp:806 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][124] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 299: // STATE 131 - _spin_nvr.tmp:811 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][131] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 300: // STATE 135 - _spin_nvr.tmp:813 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][135] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 136, 140) */
		reached[10][136] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[10][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 301: // STATE 138 - _spin_nvr.tmp:814 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][138] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 302: // STATE 143 - _spin_nvr.tmp:818 - [(!((states[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][143] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 144, 148) */
		reached[10][144] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[10][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 303: // STATE 151 - _spin_nvr.tmp:823 - [(!((states[0]==ABORTED)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][151] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		/* merge: assert(!(!((states[0]==ABORTED))))(0, 152, 156) */
		reached[10][152] = 1;
		spin_assert( !( !((now.states[0]==11))), " !( !((states[0]==11)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[10][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 304: // STATE 159 - _spin_nvr.tmp:828 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][159] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 160, 168) */
		reached[10][160] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[10][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 305: // STATE 162 - _spin_nvr.tmp:829 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][162] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 306: // STATE 164 - _spin_nvr.tmp:830 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][164] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 307: // STATE 171 - _spin_nvr.tmp:835 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][171] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 172, 180) */
		reached[10][172] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[10][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 308: // STATE 174 - _spin_nvr.tmp:836 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][174] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 309: // STATE 176 - _spin_nvr.tmp:837 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][176] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 310: // STATE 183 - _spin_nvr.tmp:842 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][183] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 184, 192) */
		reached[10][184] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[10][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 311: // STATE 186 - _spin_nvr.tmp:843 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][186] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 312: // STATE 188 - _spin_nvr.tmp:844 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][188] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 313: // STATE 195 - _spin_nvr.tmp:849 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][195] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 196, 204) */
		reached[10][196] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[10][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 314: // STATE 198 - _spin_nvr.tmp:850 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][198] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 315: // STATE 200 - _spin_nvr.tmp:851 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][200] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 316: // STATE 207 - _spin_nvr.tmp:856 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][207] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 317: // STATE 211 - _spin_nvr.tmp:858 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][211] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 212, 216) */
		reached[10][212] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[10][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 318: // STATE 214 - _spin_nvr.tmp:859 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][214] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 319: // STATE 219 - _spin_nvr.tmp:863 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][219] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 320: // STATE 221 - _spin_nvr.tmp:864 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][221] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 321: // STATE 223 - _spin_nvr.tmp:865 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][223] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 224, 236) */
		reached[10][224] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[10][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 322: // STATE 226 - _spin_nvr.tmp:866 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][226] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 323: // STATE 228 - _spin_nvr.tmp:867 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][228] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 324: // STATE 232 - _spin_nvr.tmp:869 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][232] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 325: // STATE 234 - _spin_nvr.tmp:870 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][234] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 326: // STATE 239 - _spin_nvr.tmp:874 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][239] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 327: // STATE 243 - _spin_nvr.tmp:876 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][243] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 244, 250) */
		reached[10][244] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[10][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 328: // STATE 246 - _spin_nvr.tmp:877 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][246] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 329: // STATE 248 - _spin_nvr.tmp:878 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][248] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 330: // STATE 253 - _spin_nvr.tmp:882 - [(!((states[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][253] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 254, 258) */
		reached[10][254] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[10][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 331: // STATE 261 - _spin_nvr.tmp:887 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][261] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 332: // STATE 263 - _spin_nvr.tmp:888 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][263] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 333: // STATE 265 - _spin_nvr.tmp:889 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][265] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 266, 282) */
		reached[10][266] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[10][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 334: // STATE 268 - _spin_nvr.tmp:890 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][268] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 335: // STATE 270 - _spin_nvr.tmp:891 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][270] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 336: // STATE 274 - _spin_nvr.tmp:893 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][274] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 337: // STATE 276 - _spin_nvr.tmp:894 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][276] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 338: // STATE 278 - _spin_nvr.tmp:895 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][278] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 339: // STATE 280 - _spin_nvr.tmp:896 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][280] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 340: // STATE 285 - _spin_nvr.tmp:900 - [(!((states[2]==ABORTED)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][285] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		/* merge: assert(!(!((states[2]==ABORTED))))(0, 286, 290) */
		reached[10][286] = 1;
		spin_assert( !( !((now.states[2]==11))), " !( !((states[2]==11)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[10][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 341: // STATE 293 - _spin_nvr.tmp:905 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][293] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 294, 302) */
		reached[10][294] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==11)))), " !(( !((states[2]==0))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[10][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 342: // STATE 296 - _spin_nvr.tmp:906 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][296] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 343: // STATE 298 - _spin_nvr.tmp:907 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][298] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 344: // STATE 305 - _spin_nvr.tmp:912 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][305] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 345: // STATE 309 - _spin_nvr.tmp:914 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][309] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 310, 314) */
		reached[10][310] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[10][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 346: // STATE 312 - _spin_nvr.tmp:915 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][312] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 347: // STATE 317 - _spin_nvr.tmp:919 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][317] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 348: // STATE 319 - _spin_nvr.tmp:920 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][319] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 349: // STATE 321 - _spin_nvr.tmp:921 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][321] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 322, 334) */
		reached[10][322] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[10][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 350: // STATE 324 - _spin_nvr.tmp:922 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][324] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 351: // STATE 326 - _spin_nvr.tmp:923 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][326] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 352: // STATE 330 - _spin_nvr.tmp:925 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][330] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 353: // STATE 332 - _spin_nvr.tmp:926 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][332] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 354: // STATE 337 - _spin_nvr.tmp:930 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][337] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 355: // STATE 341 - _spin_nvr.tmp:932 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][341] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 342, 348) */
		reached[10][342] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[10][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 356: // STATE 344 - _spin_nvr.tmp:933 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][344] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 357: // STATE 346 - _spin_nvr.tmp:934 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][346] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 358: // STATE 351 - _spin_nvr.tmp:938 - [(!((states[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][351] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 352, 356) */
		reached[10][352] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[10][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 359: // STATE 359 - _spin_nvr.tmp:943 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][359] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 360: // STATE 361 - _spin_nvr.tmp:944 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][361] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 361: // STATE 363 - _spin_nvr.tmp:945 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][363] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 364, 380) */
		reached[10][364] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[10][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 362: // STATE 366 - _spin_nvr.tmp:946 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][366] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 363: // STATE 368 - _spin_nvr.tmp:947 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][368] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 364: // STATE 372 - _spin_nvr.tmp:949 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][372] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 365: // STATE 374 - _spin_nvr.tmp:950 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][374] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 366: // STATE 376 - _spin_nvr.tmp:951 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][376] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 367: // STATE 378 - _spin_nvr.tmp:952 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][378] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 368: // STATE 383 - _spin_nvr.tmp:956 - [(!((states[1]==ABORTED)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][383] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		/* merge: assert(!(!((states[1]==ABORTED))))(0, 384, 388) */
		reached[10][384] = 1;
		spin_assert( !( !((now.states[1]==11))), " !( !((states[1]==11)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[10][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 369: // STATE 391 - _spin_nvr.tmp:961 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][391] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 392, 400) */
		reached[10][392] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==11)))), " !(( !((states[1]==0))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[10][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 370: // STATE 394 - _spin_nvr.tmp:962 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][394] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 371: // STATE 396 - _spin_nvr.tmp:963 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][396] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 372: // STATE 403 - _spin_nvr.tmp:968 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][403] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 373: // STATE 407 - _spin_nvr.tmp:970 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][407] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 408, 412) */
		reached[10][408] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[10][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 374: // STATE 410 - _spin_nvr.tmp:971 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][410] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 375: // STATE 415 - _spin_nvr.tmp:975 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][415] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 376: // STATE 417 - _spin_nvr.tmp:976 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][417] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 377: // STATE 419 - _spin_nvr.tmp:977 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][419] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 420, 432) */
		reached[10][420] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[10][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 378: // STATE 422 - _spin_nvr.tmp:978 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][422] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 379: // STATE 424 - _spin_nvr.tmp:979 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][424] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 380: // STATE 428 - _spin_nvr.tmp:981 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][428] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 381: // STATE 430 - _spin_nvr.tmp:982 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][430] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 382: // STATE 435 - _spin_nvr.tmp:986 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][435] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 383: // STATE 439 - _spin_nvr.tmp:988 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][439] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 440, 446) */
		reached[10][440] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[10][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 384: // STATE 442 - _spin_nvr.tmp:989 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][442] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 385: // STATE 444 - _spin_nvr.tmp:990 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][444] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 386: // STATE 449 - _spin_nvr.tmp:994 - [(!((states[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][449] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 450, 454) */
		reached[10][450] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[10][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 387: // STATE 457 - _spin_nvr.tmp:999 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][457] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 388: // STATE 459 - _spin_nvr.tmp:1000 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][459] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 389: // STATE 461 - _spin_nvr.tmp:1001 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][461] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 462, 478) */
		reached[10][462] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[10][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 390: // STATE 464 - _spin_nvr.tmp:1002 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][464] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 391: // STATE 466 - _spin_nvr.tmp:1003 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][466] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 392: // STATE 470 - _spin_nvr.tmp:1005 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][470] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 393: // STATE 472 - _spin_nvr.tmp:1006 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][472] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 394: // STATE 474 - _spin_nvr.tmp:1007 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][474] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 395: // STATE 476 - _spin_nvr.tmp:1008 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][476] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 396: // STATE 481 - _spin_nvr.tmp:1012 - [(!((states[0]==ABORTED)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][481] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		/* merge: assert(!(!((states[0]==ABORTED))))(0, 482, 486) */
		reached[10][482] = 1;
		spin_assert( !( !((now.states[0]==11))), " !( !((states[0]==11)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[10][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 397: // STATE 489 - _spin_nvr.tmp:1017 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][489] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 490, 498) */
		reached[10][490] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==11)))), " !(( !((states[0]==0))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[10][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 398: // STATE 492 - _spin_nvr.tmp:1018 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][492] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 399: // STATE 494 - _spin_nvr.tmp:1019 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][494] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 400: // STATE 502 - _spin_nvr.tmp:1024 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_aborting */
	case 401: // STATE 1 - _spin_nvr.tmp:710 - [((!(!((states[2]==ABORTING)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][1] = 1;
		if (!(( !( !((now.states[2]==10)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 402: // STATE 3 - _spin_nvr.tmp:711 - [(((!(!((states[0]==ABORTING)))&&(!((states[0]==ABORTED))&&!((states[0]==ABORTING))))||((!(!((states[1]==ABORTING)))&&(!((states[1]==ABORTED))&&!((states[1]==ABORTING))))||(!(!((states[2]==ABORTING)))&&(!((states[2]==ABORTED))&&!((states[2]==ABORTING)))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][3] = 1;
		if (!((( !( !((now.states[0]==10)))&&( !((now.states[0]==11))&& !((now.states[0]==10))))||(( !( !((now.states[1]==10)))&&( !((now.states[1]==11))&& !((now.states[1]==10))))||( !( !((now.states[2]==10)))&&( !((now.states[2]==11))&& !((now.states[2]==10))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==ABORTING)))&&(!((states[0]==ABORTED))&&!((states[0]==ABORTING))))||((!(!((states[1]==ABORTING)))&&(!((states[1]==ABORTED))&&!((states[1]==ABORTING))))||(!(!((states[2]==ABORTING)))&&(!((states[2]==ABORTED))&&!((states[2]==ABORTING))))))))(0, 4, 12) */
		reached[9][4] = 1;
		spin_assert( !((( !( !((now.states[0]==10)))&&( !((now.states[0]==11))&& !((now.states[0]==10))))||(( !( !((now.states[1]==10)))&&( !((now.states[1]==11))&& !((now.states[1]==10))))||( !( !((now.states[2]==10)))&&( !((now.states[2]==11))&& !((now.states[2]==10))))))), " !((( !( !((states[0]==10)))&&( !((states[0]==11))&& !((states[0]==10))))||(( !( !((states[1]==10)))&&( !((states[1]==11))&& !((states[1]==10))))||( !( !((states[2]==10)))&&( !((states[2]==11))&& !((states[2]==10)))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[9][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 403: // STATE 6 - _spin_nvr.tmp:712 - [((!(!((states[1]==ABORTING)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][6] = 1;
		if (!(( !( !((now.states[1]==10)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 404: // STATE 8 - _spin_nvr.tmp:713 - [((!(!((states[0]==ABORTING)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][8] = 1;
		if (!(( !( !((now.states[0]==10)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 405: // STATE 15 - _spin_nvr.tmp:718 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][15] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 406: // STATE 17 - _spin_nvr.tmp:719 - [((!((states[2]==ABORTED))&&!((states[2]==ABORTING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][17] = 1;
		if (!(( !((now.states[2]==11))&& !((now.states[2]==10)))))
			continue;
		/* merge: assert(!((!((states[2]==ABORTED))&&!((states[2]==ABORTING)))))(0, 18, 20) */
		reached[9][18] = 1;
		spin_assert( !(( !((now.states[2]==11))&& !((now.states[2]==10)))), " !(( !((states[2]==11))&& !((states[2]==10))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[9][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 407: // STATE 23 - _spin_nvr.tmp:723 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][23] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 408: // STATE 25 - _spin_nvr.tmp:724 - [((!((states[1]==ABORTED))&&!((states[1]==ABORTING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][25] = 1;
		if (!(( !((now.states[1]==11))&& !((now.states[1]==10)))))
			continue;
		/* merge: assert(!((!((states[1]==ABORTED))&&!((states[1]==ABORTING)))))(0, 26, 28) */
		reached[9][26] = 1;
		spin_assert( !(( !((now.states[1]==11))&& !((now.states[1]==10)))), " !(( !((states[1]==11))&& !((states[1]==10))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[9][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 409: // STATE 31 - _spin_nvr.tmp:728 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][31] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 410: // STATE 33 - _spin_nvr.tmp:729 - [((!((states[0]==ABORTED))&&!((states[0]==ABORTING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][33] = 1;
		if (!(( !((now.states[0]==11))&& !((now.states[0]==10)))))
			continue;
		/* merge: assert(!((!((states[0]==ABORTED))&&!((states[0]==ABORTING)))))(0, 34, 36) */
		reached[9][34] = 1;
		spin_assert( !(( !((now.states[0]==11))&& !((now.states[0]==10)))), " !(( !((states[0]==11))&& !((states[0]==10))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[9][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 411: // STATE 40 - _spin_nvr.tmp:733 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_stopped */
	case 412: // STATE 1 - _spin_nvr.tmp:419 - [(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][1] = 1;
		if (!((( !( !((now.states[2]==9)))&& !((now.states[2]==0)))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 413: // STATE 3 - _spin_nvr.tmp:420 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][3] = 1;
		if (!(( !( !((now.states[2]==9)))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 414: // STATE 5 - _spin_nvr.tmp:421 - [(((!(!((states[0]==STOPPED)))&&(!((states[0]==0))&&!((states[0]==STOPPED))))||((!(!((states[1]==STOPPED)))&&(!((states[1]==0))&&!((states[1]==STOPPED))))||(!(!((states[2]==STOPPED)))&&(!((states[2]==0))&&!((states[2]==STOPPED)))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][5] = 1;
		if (!((( !( !((now.states[0]==9)))&&( !((now.states[0]==0))&& !((now.states[0]==9))))||(( !( !((now.states[1]==9)))&&( !((now.states[1]==0))&& !((now.states[1]==9))))||( !( !((now.states[2]==9)))&&( !((now.states[2]==0))&& !((now.states[2]==9))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==STOPPED)))&&(!((states[0]==0))&&!((states[0]==STOPPED))))||((!(!((states[1]==STOPPED)))&&(!((states[1]==0))&&!((states[1]==STOPPED))))||(!(!((states[2]==STOPPED)))&&(!((states[2]==0))&&!((states[2]==STOPPED))))))))(0, 6, 48) */
		reached[8][6] = 1;
		spin_assert( !((( !( !((now.states[0]==9)))&&( !((now.states[0]==0))&& !((now.states[0]==9))))||(( !( !((now.states[1]==9)))&&( !((now.states[1]==0))&& !((now.states[1]==9))))||( !( !((now.states[2]==9)))&&( !((now.states[2]==0))&& !((now.states[2]==9))))))), " !((( !( !((states[0]==9)))&&( !((states[0]==0))&& !((states[0]==9))))||(( !( !((states[1]==9)))&&( !((states[1]==0))&& !((states[1]==9))))||( !( !((states[2]==9)))&&( !((states[2]==0))&& !((states[2]==9)))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[8][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 415: // STATE 8 - _spin_nvr.tmp:422 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][8] = 1;
		if (!(( !( !((now.states[2]==9)))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 416: // STATE 10 - _spin_nvr.tmp:423 - [((!(!((states[2]==STOPPED)))&&!((states[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][10] = 1;
		if (!(( !( !((now.states[2]==9)))&& !((now.states[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 417: // STATE 12 - _spin_nvr.tmp:424 - [(!(!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][12] = 1;
		if (!( !( !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 418: // STATE 14 - _spin_nvr.tmp:425 - [(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][14] = 1;
		if (!((( !( !((now.states[2]==9)))&& !((now.states[2]==0)))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 419: // STATE 16 - _spin_nvr.tmp:426 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][16] = 1;
		if (!(( !( !((now.states[2]==9)))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 420: // STATE 18 - _spin_nvr.tmp:427 - [(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][18] = 1;
		if (!((( !( !((now.states[1]==9)))&& !((now.states[1]==0)))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 421: // STATE 20 - _spin_nvr.tmp:428 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][20] = 1;
		if (!(( !( !((now.states[1]==9)))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 422: // STATE 22 - _spin_nvr.tmp:429 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][22] = 1;
		if (!(( !( !((now.states[1]==9)))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 423: // STATE 24 - _spin_nvr.tmp:430 - [((!(!((states[1]==STOPPED)))&&!((states[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][24] = 1;
		if (!(( !( !((now.states[1]==9)))&& !((now.states[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 424: // STATE 26 - _spin_nvr.tmp:431 - [(!(!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][26] = 1;
		if (!( !( !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 425: // STATE 28 - _spin_nvr.tmp:432 - [(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][28] = 1;
		if (!((( !( !((now.states[1]==9)))&& !((now.states[1]==0)))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 426: // STATE 30 - _spin_nvr.tmp:433 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][30] = 1;
		if (!(( !( !((now.states[1]==9)))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 427: // STATE 32 - _spin_nvr.tmp:434 - [(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][32] = 1;
		if (!((( !( !((now.states[0]==9)))&& !((now.states[0]==0)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 428: // STATE 34 - _spin_nvr.tmp:435 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][34] = 1;
		if (!(( !( !((now.states[0]==9)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 429: // STATE 36 - _spin_nvr.tmp:436 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][36] = 1;
		if (!(( !( !((now.states[0]==9)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 430: // STATE 38 - _spin_nvr.tmp:437 - [((!(!((states[0]==STOPPED)))&&!((states[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][38] = 1;
		if (!(( !( !((now.states[0]==9)))&& !((now.states[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 431: // STATE 40 - _spin_nvr.tmp:438 - [(!(!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][40] = 1;
		if (!( !( !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 432: // STATE 42 - _spin_nvr.tmp:439 - [(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][42] = 1;
		if (!((( !( !((now.states[0]==9)))&& !((now.states[0]==0)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 433: // STATE 44 - _spin_nvr.tmp:440 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][44] = 1;
		if (!(( !( !((now.states[0]==9)))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 434: // STATE 51 - _spin_nvr.tmp:445 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][51] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 435: // STATE 55 - _spin_nvr.tmp:447 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][55] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 56, 60) */
		reached[8][56] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[8][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 436: // STATE 58 - _spin_nvr.tmp:448 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][58] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 437: // STATE 63 - _spin_nvr.tmp:452 - [(!((states[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][63] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 64, 68) */
		reached[8][64] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[8][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 438: // STATE 71 - _spin_nvr.tmp:457 - [(!((states[2]==STOPPED)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][71] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		/* merge: assert(!(!((states[2]==STOPPED))))(0, 72, 76) */
		reached[8][72] = 1;
		spin_assert( !( !((now.states[2]==9))), " !( !((states[2]==9)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[8][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 439: // STATE 79 - _spin_nvr.tmp:462 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][79] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 80, 88) */
		reached[8][80] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[8][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 440: // STATE 82 - _spin_nvr.tmp:463 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][82] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 441: // STATE 84 - _spin_nvr.tmp:464 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][84] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 442: // STATE 91 - _spin_nvr.tmp:469 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][91] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 443: // STATE 95 - _spin_nvr.tmp:471 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][95] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 96, 100) */
		reached[8][96] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[8][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 444: // STATE 98 - _spin_nvr.tmp:472 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][98] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 445: // STATE 103 - _spin_nvr.tmp:476 - [(!((states[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][103] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 104, 108) */
		reached[8][104] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[8][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 446: // STATE 111 - _spin_nvr.tmp:481 - [(!((states[1]==STOPPED)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][111] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		/* merge: assert(!(!((states[1]==STOPPED))))(0, 112, 116) */
		reached[8][112] = 1;
		spin_assert( !( !((now.states[1]==9))), " !( !((states[1]==9)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[8][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 447: // STATE 119 - _spin_nvr.tmp:486 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][119] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 120, 128) */
		reached[8][120] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[8][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 448: // STATE 122 - _spin_nvr.tmp:487 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][122] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 449: // STATE 124 - _spin_nvr.tmp:488 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][124] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 450: // STATE 131 - _spin_nvr.tmp:493 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][131] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 451: // STATE 135 - _spin_nvr.tmp:495 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][135] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 136, 140) */
		reached[8][136] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[8][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 452: // STATE 138 - _spin_nvr.tmp:496 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][138] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 453: // STATE 143 - _spin_nvr.tmp:500 - [(!((states[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][143] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 144, 148) */
		reached[8][144] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[8][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 454: // STATE 151 - _spin_nvr.tmp:505 - [(!((states[0]==STOPPED)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][151] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		/* merge: assert(!(!((states[0]==STOPPED))))(0, 152, 156) */
		reached[8][152] = 1;
		spin_assert( !( !((now.states[0]==9))), " !( !((states[0]==9)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[8][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 455: // STATE 159 - _spin_nvr.tmp:510 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][159] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 160, 168) */
		reached[8][160] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[8][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 456: // STATE 162 - _spin_nvr.tmp:511 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][162] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 457: // STATE 164 - _spin_nvr.tmp:512 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][164] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 458: // STATE 171 - _spin_nvr.tmp:517 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][171] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 172, 180) */
		reached[8][172] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[8][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 459: // STATE 174 - _spin_nvr.tmp:518 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][174] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 460: // STATE 176 - _spin_nvr.tmp:519 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][176] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 461: // STATE 183 - _spin_nvr.tmp:524 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][183] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 184, 192) */
		reached[8][184] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[8][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 462: // STATE 186 - _spin_nvr.tmp:525 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][186] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 463: // STATE 188 - _spin_nvr.tmp:526 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][188] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 464: // STATE 195 - _spin_nvr.tmp:531 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][195] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 196, 204) */
		reached[8][196] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[8][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 465: // STATE 198 - _spin_nvr.tmp:532 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][198] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 466: // STATE 200 - _spin_nvr.tmp:533 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][200] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 467: // STATE 207 - _spin_nvr.tmp:538 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][207] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 468: // STATE 211 - _spin_nvr.tmp:540 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][211] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 212, 216) */
		reached[8][212] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[8][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 469: // STATE 214 - _spin_nvr.tmp:541 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][214] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 470: // STATE 219 - _spin_nvr.tmp:545 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][219] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 471: // STATE 221 - _spin_nvr.tmp:546 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][221] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 472: // STATE 223 - _spin_nvr.tmp:547 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][223] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 224, 236) */
		reached[8][224] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[8][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 473: // STATE 226 - _spin_nvr.tmp:548 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][226] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 474: // STATE 228 - _spin_nvr.tmp:549 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][228] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 475: // STATE 232 - _spin_nvr.tmp:551 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][232] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 476: // STATE 234 - _spin_nvr.tmp:552 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][234] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 477: // STATE 239 - _spin_nvr.tmp:556 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][239] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 478: // STATE 243 - _spin_nvr.tmp:558 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][243] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 244, 250) */
		reached[8][244] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[8][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 479: // STATE 246 - _spin_nvr.tmp:559 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][246] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 480: // STATE 248 - _spin_nvr.tmp:560 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][248] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 481: // STATE 253 - _spin_nvr.tmp:564 - [(!((states[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][253] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 254, 258) */
		reached[8][254] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[8][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 482: // STATE 261 - _spin_nvr.tmp:569 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][261] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 483: // STATE 263 - _spin_nvr.tmp:570 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][263] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 484: // STATE 265 - _spin_nvr.tmp:571 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][265] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 266, 282) */
		reached[8][266] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[8][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 485: // STATE 268 - _spin_nvr.tmp:572 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][268] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 486: // STATE 270 - _spin_nvr.tmp:573 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][270] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 487: // STATE 274 - _spin_nvr.tmp:575 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][274] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 488: // STATE 276 - _spin_nvr.tmp:576 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][276] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 489: // STATE 278 - _spin_nvr.tmp:577 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][278] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 490: // STATE 280 - _spin_nvr.tmp:578 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][280] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 491: // STATE 285 - _spin_nvr.tmp:582 - [(!((states[2]==STOPPED)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][285] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		/* merge: assert(!(!((states[2]==STOPPED))))(0, 286, 290) */
		reached[8][286] = 1;
		spin_assert( !( !((now.states[2]==9))), " !( !((states[2]==9)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[8][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 492: // STATE 293 - _spin_nvr.tmp:587 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][293] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==9)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 294, 302) */
		reached[8][294] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==9)))), " !(( !((states[2]==0))&& !((states[2]==9))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[8][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 493: // STATE 296 - _spin_nvr.tmp:588 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][296] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 494: // STATE 298 - _spin_nvr.tmp:589 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][298] = 1;
		if (!( !((now.states[2]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 495: // STATE 305 - _spin_nvr.tmp:594 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][305] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 496: // STATE 309 - _spin_nvr.tmp:596 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][309] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 310, 314) */
		reached[8][310] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[8][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 497: // STATE 312 - _spin_nvr.tmp:597 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][312] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 498: // STATE 317 - _spin_nvr.tmp:601 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][317] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 499: // STATE 319 - _spin_nvr.tmp:602 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][319] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 500: // STATE 321 - _spin_nvr.tmp:603 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][321] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 322, 334) */
		reached[8][322] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[8][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 501: // STATE 324 - _spin_nvr.tmp:604 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][324] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 502: // STATE 326 - _spin_nvr.tmp:605 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][326] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 503: // STATE 330 - _spin_nvr.tmp:607 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][330] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 504: // STATE 332 - _spin_nvr.tmp:608 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][332] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 505: // STATE 337 - _spin_nvr.tmp:612 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][337] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 506: // STATE 341 - _spin_nvr.tmp:614 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][341] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 342, 348) */
		reached[8][342] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[8][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 507: // STATE 344 - _spin_nvr.tmp:615 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][344] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 508: // STATE 346 - _spin_nvr.tmp:616 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][346] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 509: // STATE 351 - _spin_nvr.tmp:620 - [(!((states[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][351] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 352, 356) */
		reached[8][352] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[8][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 510: // STATE 359 - _spin_nvr.tmp:625 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][359] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 511: // STATE 361 - _spin_nvr.tmp:626 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][361] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 512: // STATE 363 - _spin_nvr.tmp:627 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][363] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 364, 380) */
		reached[8][364] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[8][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 513: // STATE 366 - _spin_nvr.tmp:628 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][366] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 514: // STATE 368 - _spin_nvr.tmp:629 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][368] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 515: // STATE 372 - _spin_nvr.tmp:631 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][372] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 516: // STATE 374 - _spin_nvr.tmp:632 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][374] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 517: // STATE 376 - _spin_nvr.tmp:633 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][376] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 518: // STATE 378 - _spin_nvr.tmp:634 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][378] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 519: // STATE 383 - _spin_nvr.tmp:638 - [(!((states[1]==STOPPED)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][383] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		/* merge: assert(!(!((states[1]==STOPPED))))(0, 384, 388) */
		reached[8][384] = 1;
		spin_assert( !( !((now.states[1]==9))), " !( !((states[1]==9)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[8][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 520: // STATE 391 - _spin_nvr.tmp:643 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][391] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==9)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 392, 400) */
		reached[8][392] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==9)))), " !(( !((states[1]==0))&& !((states[1]==9))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[8][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 521: // STATE 394 - _spin_nvr.tmp:644 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][394] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 522: // STATE 396 - _spin_nvr.tmp:645 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][396] = 1;
		if (!( !((now.states[1]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 523: // STATE 403 - _spin_nvr.tmp:650 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][403] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 524: // STATE 407 - _spin_nvr.tmp:652 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][407] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 408, 412) */
		reached[8][408] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[8][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 525: // STATE 410 - _spin_nvr.tmp:653 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][410] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 526: // STATE 415 - _spin_nvr.tmp:657 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][415] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 527: // STATE 417 - _spin_nvr.tmp:658 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][417] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 528: // STATE 419 - _spin_nvr.tmp:659 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][419] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 420, 432) */
		reached[8][420] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[8][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 529: // STATE 422 - _spin_nvr.tmp:660 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][422] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 530: // STATE 424 - _spin_nvr.tmp:661 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][424] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 531: // STATE 428 - _spin_nvr.tmp:663 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][428] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 532: // STATE 430 - _spin_nvr.tmp:664 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][430] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 533: // STATE 435 - _spin_nvr.tmp:668 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][435] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 534: // STATE 439 - _spin_nvr.tmp:670 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][439] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 440, 446) */
		reached[8][440] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[8][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 535: // STATE 442 - _spin_nvr.tmp:671 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][442] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 536: // STATE 444 - _spin_nvr.tmp:672 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][444] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 537: // STATE 449 - _spin_nvr.tmp:676 - [(!((states[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][449] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 450, 454) */
		reached[8][450] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[8][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 538: // STATE 457 - _spin_nvr.tmp:681 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][457] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 539: // STATE 459 - _spin_nvr.tmp:682 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][459] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 540: // STATE 461 - _spin_nvr.tmp:683 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][461] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 462, 478) */
		reached[8][462] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[8][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 541: // STATE 464 - _spin_nvr.tmp:684 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][464] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 542: // STATE 466 - _spin_nvr.tmp:685 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][466] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 543: // STATE 470 - _spin_nvr.tmp:687 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][470] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 544: // STATE 472 - _spin_nvr.tmp:688 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][472] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 545: // STATE 474 - _spin_nvr.tmp:689 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][474] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 546: // STATE 476 - _spin_nvr.tmp:690 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][476] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 547: // STATE 481 - _spin_nvr.tmp:694 - [(!((states[0]==STOPPED)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][481] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		/* merge: assert(!(!((states[0]==STOPPED))))(0, 482, 486) */
		reached[8][482] = 1;
		spin_assert( !( !((now.states[0]==9))), " !( !((states[0]==9)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[8][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 548: // STATE 489 - _spin_nvr.tmp:699 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][489] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==9)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 490, 498) */
		reached[8][490] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==9)))), " !(( !((states[0]==0))&& !((states[0]==9))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[8][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 549: // STATE 492 - _spin_nvr.tmp:700 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][492] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 550: // STATE 494 - _spin_nvr.tmp:701 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][494] = 1;
		if (!( !((now.states[0]==9))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 551: // STATE 502 - _spin_nvr.tmp:706 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_stopping */
	case 552: // STATE 1 - _spin_nvr.tmp:392 - [((!(!((states[2]==STOPPING)))&&!(((states[2]==STOPPED)||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][1] = 1;
		if (!(( !( !((now.states[2]==7)))&& !(((now.states[2]==9)||(now.states[2]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 553: // STATE 3 - _spin_nvr.tmp:393 - [(((!(!((states[0]==STOPPING)))&&(!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))||((!(!((states[1]==STOPPING)))&&(!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))||(!(!((states[2]==STOPPING)))&&(!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING)))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][3] = 1;
		if (!((( !( !((now.states[0]==7)))&&( !(((now.states[0]==9)||(now.states[0]==10)))&& !((now.states[0]==7))))||(( !( !((now.states[1]==7)))&&( !(((now.states[1]==9)||(now.states[1]==10)))&& !((now.states[1]==7))))||( !( !((now.states[2]==7)))&&( !(((now.states[2]==9)||(now.states[2]==10)))&& !((now.states[2]==7))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==STOPPING)))&&(!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))||((!(!((states[1]==STOPPING)))&&(!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))||(!(!((states[2]==STOPPING)))&&(!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING))))))))(0, 4, 12) */
		reached[7][4] = 1;
		spin_assert( !((( !( !((now.states[0]==7)))&&( !(((now.states[0]==9)||(now.states[0]==10)))&& !((now.states[0]==7))))||(( !( !((now.states[1]==7)))&&( !(((now.states[1]==9)||(now.states[1]==10)))&& !((now.states[1]==7))))||( !( !((now.states[2]==7)))&&( !(((now.states[2]==9)||(now.states[2]==10)))&& !((now.states[2]==7))))))), " !((( !( !((states[0]==7)))&&( !(((states[0]==9)||(states[0]==10)))&& !((states[0]==7))))||(( !( !((states[1]==7)))&&( !(((states[1]==9)||(states[1]==10)))&& !((states[1]==7))))||( !( !((states[2]==7)))&&( !(((states[2]==9)||(states[2]==10)))&& !((states[2]==7)))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[7][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 554: // STATE 6 - _spin_nvr.tmp:394 - [((!(!((states[1]==STOPPING)))&&!(((states[1]==STOPPED)||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][6] = 1;
		if (!(( !( !((now.states[1]==7)))&& !(((now.states[1]==9)||(now.states[1]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 555: // STATE 8 - _spin_nvr.tmp:395 - [((!(!((states[0]==STOPPING)))&&!(((states[0]==STOPPED)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][8] = 1;
		if (!(( !( !((now.states[0]==7)))&& !(((now.states[0]==9)||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 556: // STATE 15 - _spin_nvr.tmp:400 - [(!(((states[2]==STOPPED)||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][15] = 1;
		if (!( !(((now.states[2]==9)||(now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 557: // STATE 17 - _spin_nvr.tmp:401 - [((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][17] = 1;
		if (!(( !(((now.states[2]==9)||(now.states[2]==10)))&& !((now.states[2]==7)))))
			continue;
		/* merge: assert(!((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING)))))(0, 18, 20) */
		reached[7][18] = 1;
		spin_assert( !(( !(((now.states[2]==9)||(now.states[2]==10)))&& !((now.states[2]==7)))), " !(( !(((states[2]==9)||(states[2]==10)))&& !((states[2]==7))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[7][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 558: // STATE 23 - _spin_nvr.tmp:405 - [(!(((states[1]==STOPPED)||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][23] = 1;
		if (!( !(((now.states[1]==9)||(now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 559: // STATE 25 - _spin_nvr.tmp:406 - [((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][25] = 1;
		if (!(( !(((now.states[1]==9)||(now.states[1]==10)))&& !((now.states[1]==7)))))
			continue;
		/* merge: assert(!((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING)))))(0, 26, 28) */
		reached[7][26] = 1;
		spin_assert( !(( !(((now.states[1]==9)||(now.states[1]==10)))&& !((now.states[1]==7)))), " !(( !(((states[1]==9)||(states[1]==10)))&& !((states[1]==7))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[7][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 560: // STATE 31 - _spin_nvr.tmp:410 - [(!(((states[0]==STOPPED)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][31] = 1;
		if (!( !(((now.states[0]==9)||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 561: // STATE 33 - _spin_nvr.tmp:411 - [((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][33] = 1;
		if (!(( !(((now.states[0]==9)||(now.states[0]==10)))&& !((now.states[0]==7)))))
			continue;
		/* merge: assert(!((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING)))))(0, 34, 36) */
		reached[7][34] = 1;
		spin_assert( !(( !(((now.states[0]==9)||(now.states[0]==10)))&& !((now.states[0]==7)))), " !(( !(((states[0]==9)||(states[0]==10)))&& !((states[0]==7))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[7][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 562: // STATE 40 - _spin_nvr.tmp:415 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_paused */
	case 563: // STATE 1 - _spin_nvr.tmp:308 - [(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][1] = 1;
		if (!((( !( !((now.states[2]==4)))&& !(((now.states[2]==3)||(now.states[2]==7))))&& !((now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 564: // STATE 3 - _spin_nvr.tmp:309 - [(((!(!((states[0]==PAUSED)))&&(!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))||((!(!((states[1]==PAUSED)))&&(!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))||(!(!((states[2]==PAUSED)))&&(!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))))] (24:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][3] = 1;
		if (!((( !( !((now.states[0]==4)))&&( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4))))||(( !( !((now.states[1]==4)))&&( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4))))||( !( !((now.states[2]==4)))&&( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==PAUSED)))&&(!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))||((!(!((states[1]==PAUSED)))&&(!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))||(!(!((states[2]==PAUSED)))&&(!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))))))(0, 4, 24) */
		reached[6][4] = 1;
		spin_assert( !((( !( !((now.states[0]==4)))&&( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4))))||(( !( !((now.states[1]==4)))&&( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4))))||( !( !((now.states[2]==4)))&&( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4))))))), " !((( !( !((states[0]==4)))&&( !(((states[0]==3)||(states[0]==7)))&& !((states[0]==4))))||(( !( !((states[1]==4)))&&( !(((states[1]==3)||(states[1]==7)))&& !((states[1]==4))))||( !( !((states[2]==4)))&&( !(((states[2]==3)||(states[2]==7)))&& !((states[2]==4)))))))", II, tt, t);
		/* merge: .(goto)(0, 25, 24) */
		reached[6][25] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 565: // STATE 6 - _spin_nvr.tmp:310 - [((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][6] = 1;
		if (!(( !( !((now.states[2]==4)))&& !(((now.states[2]==3)||(now.states[2]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 566: // STATE 8 - _spin_nvr.tmp:311 - [(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][8] = 1;
		if (!((( !( !((now.states[2]==4)))&& !(((now.states[2]==3)||(now.states[2]==7))))&& !((now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 567: // STATE 10 - _spin_nvr.tmp:312 - [(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][10] = 1;
		if (!((( !( !((now.states[1]==4)))&& !(((now.states[1]==3)||(now.states[1]==7))))&& !((now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 568: // STATE 12 - _spin_nvr.tmp:313 - [((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][12] = 1;
		if (!(( !( !((now.states[1]==4)))&& !(((now.states[1]==3)||(now.states[1]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 569: // STATE 14 - _spin_nvr.tmp:314 - [(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][14] = 1;
		if (!((( !( !((now.states[1]==4)))&& !(((now.states[1]==3)||(now.states[1]==7))))&& !((now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 570: // STATE 16 - _spin_nvr.tmp:315 - [(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][16] = 1;
		if (!((( !( !((now.states[0]==4)))&& !(((now.states[0]==3)||(now.states[0]==7))))&& !((now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 571: // STATE 18 - _spin_nvr.tmp:316 - [((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][18] = 1;
		if (!(( !( !((now.states[0]==4)))&& !(((now.states[0]==3)||(now.states[0]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 572: // STATE 20 - _spin_nvr.tmp:317 - [(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][20] = 1;
		if (!((( !( !((now.states[0]==4)))&& !(((now.states[0]==3)||(now.states[0]==7))))&& !((now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 573: // STATE 27 - _spin_nvr.tmp:322 - [(!(((states[2]==RUNNING)||(states[2]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][27] = 1;
		if (!( !(((now.states[2]==3)||(now.states[2]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 574: // STATE 29 - _spin_nvr.tmp:323 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (32:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][29] = 1;
		if (!(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))))
			continue;
		/* merge: assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))(0, 30, 32) */
		reached[6][30] = 1;
		spin_assert( !(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))), " !(( !(((states[2]==3)||(states[2]==7)))&& !((states[2]==4))))", II, tt, t);
		/* merge: .(goto)(0, 33, 32) */
		reached[6][33] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 575: // STATE 35 - _spin_nvr.tmp:327 - [(!((states[2]==PAUSED)))] (40:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][35] = 1;
		if (!( !((now.states[2]==4))))
			continue;
		/* merge: assert(!(!((states[2]==PAUSED))))(0, 36, 40) */
		reached[6][36] = 1;
		spin_assert( !( !((now.states[2]==4))), " !( !((states[2]==4)))", II, tt, t);
		/* merge: .(goto)(0, 41, 40) */
		reached[6][41] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 576: // STATE 43 - _spin_nvr.tmp:332 - [(!(((states[1]==RUNNING)||(states[1]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][43] = 1;
		if (!( !(((now.states[1]==3)||(now.states[1]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 577: // STATE 45 - _spin_nvr.tmp:333 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][45] = 1;
		if (!(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))))
			continue;
		/* merge: assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))(0, 46, 48) */
		reached[6][46] = 1;
		spin_assert( !(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))), " !(( !(((states[1]==3)||(states[1]==7)))&& !((states[1]==4))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[6][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 578: // STATE 51 - _spin_nvr.tmp:337 - [(!((states[1]==PAUSED)))] (56:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][51] = 1;
		if (!( !((now.states[1]==4))))
			continue;
		/* merge: assert(!(!((states[1]==PAUSED))))(0, 52, 56) */
		reached[6][52] = 1;
		spin_assert( !( !((now.states[1]==4))), " !( !((states[1]==4)))", II, tt, t);
		/* merge: .(goto)(0, 57, 56) */
		reached[6][57] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 579: // STATE 59 - _spin_nvr.tmp:342 - [(!(((states[0]==RUNNING)||(states[0]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][59] = 1;
		if (!( !(((now.states[0]==3)||(now.states[0]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 580: // STATE 61 - _spin_nvr.tmp:343 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (64:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][61] = 1;
		if (!(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))))
			continue;
		/* merge: assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))(0, 62, 64) */
		reached[6][62] = 1;
		spin_assert( !(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))), " !(( !(((states[0]==3)||(states[0]==7)))&& !((states[0]==4))))", II, tt, t);
		/* merge: .(goto)(0, 65, 64) */
		reached[6][65] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 581: // STATE 67 - _spin_nvr.tmp:347 - [(!((states[0]==PAUSED)))] (72:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][67] = 1;
		if (!( !((now.states[0]==4))))
			continue;
		/* merge: assert(!(!((states[0]==PAUSED))))(0, 68, 72) */
		reached[6][68] = 1;
		spin_assert( !( !((now.states[0]==4))), " !( !((states[0]==4)))", II, tt, t);
		/* merge: .(goto)(0, 73, 72) */
		reached[6][73] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 582: // STATE 75 - _spin_nvr.tmp:352 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][75] = 1;
		if (!(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 583: // STATE 77 - _spin_nvr.tmp:353 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (84:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][77] = 1;
		if (!(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))))
			continue;
		/* merge: assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))(0, 78, 84) */
		reached[6][78] = 1;
		spin_assert( !(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))), " !(( !(((states[2]==3)||(states[2]==7)))&& !((states[2]==4))))", II, tt, t);
		/* merge: .(goto)(0, 85, 84) */
		reached[6][85] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 584: // STATE 80 - _spin_nvr.tmp:354 - [(!(((states[2]==RUNNING)||(states[2]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][80] = 1;
		if (!( !(((now.states[2]==3)||(now.states[2]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 585: // STATE 82 - _spin_nvr.tmp:355 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][82] = 1;
		if (!(( !(((now.states[2]==3)||(now.states[2]==7)))&& !((now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 586: // STATE 87 - _spin_nvr.tmp:359 - [(!((states[2]==PAUSED)))] (92:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][87] = 1;
		if (!( !((now.states[2]==4))))
			continue;
		/* merge: assert(!(!((states[2]==PAUSED))))(0, 88, 92) */
		reached[6][88] = 1;
		spin_assert( !( !((now.states[2]==4))), " !( !((states[2]==4)))", II, tt, t);
		/* merge: .(goto)(0, 93, 92) */
		reached[6][93] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 587: // STATE 95 - _spin_nvr.tmp:364 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][95] = 1;
		if (!(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 588: // STATE 97 - _spin_nvr.tmp:365 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (104:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][97] = 1;
		if (!(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))))
			continue;
		/* merge: assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))(0, 98, 104) */
		reached[6][98] = 1;
		spin_assert( !(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))), " !(( !(((states[1]==3)||(states[1]==7)))&& !((states[1]==4))))", II, tt, t);
		/* merge: .(goto)(0, 105, 104) */
		reached[6][105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 589: // STATE 100 - _spin_nvr.tmp:366 - [(!(((states[1]==RUNNING)||(states[1]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][100] = 1;
		if (!( !(((now.states[1]==3)||(now.states[1]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 590: // STATE 102 - _spin_nvr.tmp:367 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][102] = 1;
		if (!(( !(((now.states[1]==3)||(now.states[1]==7)))&& !((now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 591: // STATE 107 - _spin_nvr.tmp:371 - [(!((states[1]==PAUSED)))] (112:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][107] = 1;
		if (!( !((now.states[1]==4))))
			continue;
		/* merge: assert(!(!((states[1]==PAUSED))))(0, 108, 112) */
		reached[6][108] = 1;
		spin_assert( !( !((now.states[1]==4))), " !( !((states[1]==4)))", II, tt, t);
		/* merge: .(goto)(0, 113, 112) */
		reached[6][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 592: // STATE 115 - _spin_nvr.tmp:376 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][115] = 1;
		if (!(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 593: // STATE 117 - _spin_nvr.tmp:377 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (124:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][117] = 1;
		if (!(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))))
			continue;
		/* merge: assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))(0, 118, 124) */
		reached[6][118] = 1;
		spin_assert( !(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))), " !(( !(((states[0]==3)||(states[0]==7)))&& !((states[0]==4))))", II, tt, t);
		/* merge: .(goto)(0, 125, 124) */
		reached[6][125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 594: // STATE 120 - _spin_nvr.tmp:378 - [(!(((states[0]==RUNNING)||(states[0]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][120] = 1;
		if (!( !(((now.states[0]==3)||(now.states[0]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 595: // STATE 122 - _spin_nvr.tmp:379 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][122] = 1;
		if (!(( !(((now.states[0]==3)||(now.states[0]==7)))&& !((now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 596: // STATE 127 - _spin_nvr.tmp:383 - [(!((states[0]==PAUSED)))] (132:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][127] = 1;
		if (!( !((now.states[0]==4))))
			continue;
		/* merge: assert(!(!((states[0]==PAUSED))))(0, 128, 132) */
		reached[6][128] = 1;
		spin_assert( !( !((now.states[0]==4))), " !( !((states[0]==4)))", II, tt, t);
		/* merge: .(goto)(0, 133, 132) */
		reached[6][133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 597: // STATE 136 - _spin_nvr.tmp:388 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][136] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_running */
	case 598: // STATE 1 - _spin_nvr.tmp:224 - [(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][1] = 1;
		if (!((( !( !((now.states[2]==3)))&& !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10))))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 599: // STATE 3 - _spin_nvr.tmp:225 - [(((!(!((states[0]==RUNNING)))&&(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))||((!(!((states[1]==RUNNING)))&&(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))||(!(!((states[2]==RUNNING)))&&(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))))] (24:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][3] = 1;
		if (!((( !( !((now.states[0]==3)))&&( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3))))||(( !( !((now.states[1]==3)))&&( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3))))||( !( !((now.states[2]==3)))&&( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==RUNNING)))&&(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))||((!(!((states[1]==RUNNING)))&&(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))||(!(!((states[2]==RUNNING)))&&(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))))))(0, 4, 24) */
		reached[5][4] = 1;
		spin_assert( !((( !( !((now.states[0]==3)))&&( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3))))||(( !( !((now.states[1]==3)))&&( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3))))||( !( !((now.states[2]==3)))&&( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3))))))), " !((( !( !((states[0]==3)))&&( !((((states[0]==4)||(states[0]==7))||(states[0]==10)))&& !((states[0]==3))))||(( !( !((states[1]==3)))&&( !((((states[1]==4)||(states[1]==7))||(states[1]==10)))&& !((states[1]==3))))||( !( !((states[2]==3)))&&( !((((states[2]==4)||(states[2]==7))||(states[2]==10)))&& !((states[2]==3)))))))", II, tt, t);
		/* merge: .(goto)(0, 25, 24) */
		reached[5][25] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 600: // STATE 6 - _spin_nvr.tmp:226 - [((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][6] = 1;
		if (!(( !( !((now.states[2]==3)))&& !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 601: // STATE 8 - _spin_nvr.tmp:227 - [(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][8] = 1;
		if (!((( !( !((now.states[2]==3)))&& !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10))))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 602: // STATE 10 - _spin_nvr.tmp:228 - [(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][10] = 1;
		if (!((( !( !((now.states[1]==3)))&& !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10))))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 603: // STATE 12 - _spin_nvr.tmp:229 - [((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][12] = 1;
		if (!(( !( !((now.states[1]==3)))&& !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 604: // STATE 14 - _spin_nvr.tmp:230 - [(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][14] = 1;
		if (!((( !( !((now.states[1]==3)))&& !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10))))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 605: // STATE 16 - _spin_nvr.tmp:231 - [(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][16] = 1;
		if (!((( !( !((now.states[0]==3)))&& !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10))))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 606: // STATE 18 - _spin_nvr.tmp:232 - [((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][18] = 1;
		if (!(( !( !((now.states[0]==3)))&& !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 607: // STATE 20 - _spin_nvr.tmp:233 - [(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][20] = 1;
		if (!((( !( !((now.states[0]==3)))&& !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10))))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 608: // STATE 27 - _spin_nvr.tmp:238 - [(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][27] = 1;
		if (!( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 609: // STATE 29 - _spin_nvr.tmp:239 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (32:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][29] = 1;
		if (!(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))(0, 30, 32) */
		reached[5][30] = 1;
		spin_assert( !(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))), " !(( !((((states[2]==4)||(states[2]==7))||(states[2]==10)))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 33, 32) */
		reached[5][33] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 610: // STATE 35 - _spin_nvr.tmp:243 - [(!((states[2]==RUNNING)))] (40:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][35] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		/* merge: assert(!(!((states[2]==RUNNING))))(0, 36, 40) */
		reached[5][36] = 1;
		spin_assert( !( !((now.states[2]==3))), " !( !((states[2]==3)))", II, tt, t);
		/* merge: .(goto)(0, 41, 40) */
		reached[5][41] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 611: // STATE 43 - _spin_nvr.tmp:248 - [(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][43] = 1;
		if (!( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 612: // STATE 45 - _spin_nvr.tmp:249 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][45] = 1;
		if (!(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))(0, 46, 48) */
		reached[5][46] = 1;
		spin_assert( !(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))), " !(( !((((states[1]==4)||(states[1]==7))||(states[1]==10)))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[5][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 613: // STATE 51 - _spin_nvr.tmp:253 - [(!((states[1]==RUNNING)))] (56:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][51] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		/* merge: assert(!(!((states[1]==RUNNING))))(0, 52, 56) */
		reached[5][52] = 1;
		spin_assert( !( !((now.states[1]==3))), " !( !((states[1]==3)))", II, tt, t);
		/* merge: .(goto)(0, 57, 56) */
		reached[5][57] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 614: // STATE 59 - _spin_nvr.tmp:258 - [(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][59] = 1;
		if (!( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 615: // STATE 61 - _spin_nvr.tmp:259 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (64:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][61] = 1;
		if (!(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))(0, 62, 64) */
		reached[5][62] = 1;
		spin_assert( !(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))), " !(( !((((states[0]==4)||(states[0]==7))||(states[0]==10)))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 65, 64) */
		reached[5][65] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 616: // STATE 67 - _spin_nvr.tmp:263 - [(!((states[0]==RUNNING)))] (72:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][67] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		/* merge: assert(!(!((states[0]==RUNNING))))(0, 68, 72) */
		reached[5][68] = 1;
		spin_assert( !( !((now.states[0]==3))), " !( !((states[0]==3)))", II, tt, t);
		/* merge: .(goto)(0, 73, 72) */
		reached[5][73] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 617: // STATE 75 - _spin_nvr.tmp:268 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][75] = 1;
		if (!(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 618: // STATE 77 - _spin_nvr.tmp:269 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (84:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][77] = 1;
		if (!(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))(0, 78, 84) */
		reached[5][78] = 1;
		spin_assert( !(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))), " !(( !((((states[2]==4)||(states[2]==7))||(states[2]==10)))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 85, 84) */
		reached[5][85] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 619: // STATE 80 - _spin_nvr.tmp:270 - [(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][80] = 1;
		if (!( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 620: // STATE 82 - _spin_nvr.tmp:271 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][82] = 1;
		if (!(( !((((now.states[2]==4)||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 621: // STATE 87 - _spin_nvr.tmp:275 - [(!((states[2]==RUNNING)))] (92:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][87] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		/* merge: assert(!(!((states[2]==RUNNING))))(0, 88, 92) */
		reached[5][88] = 1;
		spin_assert( !( !((now.states[2]==3))), " !( !((states[2]==3)))", II, tt, t);
		/* merge: .(goto)(0, 93, 92) */
		reached[5][93] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 622: // STATE 95 - _spin_nvr.tmp:280 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][95] = 1;
		if (!(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 623: // STATE 97 - _spin_nvr.tmp:281 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (104:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][97] = 1;
		if (!(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))(0, 98, 104) */
		reached[5][98] = 1;
		spin_assert( !(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))), " !(( !((((states[1]==4)||(states[1]==7))||(states[1]==10)))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 105, 104) */
		reached[5][105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 624: // STATE 100 - _spin_nvr.tmp:282 - [(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][100] = 1;
		if (!( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 625: // STATE 102 - _spin_nvr.tmp:283 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][102] = 1;
		if (!(( !((((now.states[1]==4)||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 626: // STATE 107 - _spin_nvr.tmp:287 - [(!((states[1]==RUNNING)))] (112:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][107] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		/* merge: assert(!(!((states[1]==RUNNING))))(0, 108, 112) */
		reached[5][108] = 1;
		spin_assert( !( !((now.states[1]==3))), " !( !((states[1]==3)))", II, tt, t);
		/* merge: .(goto)(0, 113, 112) */
		reached[5][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 627: // STATE 115 - _spin_nvr.tmp:292 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][115] = 1;
		if (!(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 628: // STATE 117 - _spin_nvr.tmp:293 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (124:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][117] = 1;
		if (!(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))(0, 118, 124) */
		reached[5][118] = 1;
		spin_assert( !(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))), " !(( !((((states[0]==4)||(states[0]==7))||(states[0]==10)))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 125, 124) */
		reached[5][125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 629: // STATE 120 - _spin_nvr.tmp:294 - [(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][120] = 1;
		if (!( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 630: // STATE 122 - _spin_nvr.tmp:295 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][122] = 1;
		if (!(( !((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 631: // STATE 127 - _spin_nvr.tmp:299 - [(!((states[0]==RUNNING)))] (132:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][127] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		/* merge: assert(!(!((states[0]==RUNNING))))(0, 128, 132) */
		reached[5][128] = 1;
		spin_assert( !( !((now.states[0]==3))), " !( !((states[0]==3)))", II, tt, t);
		/* merge: .(goto)(0, 133, 132) */
		reached[5][133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 632: // STATE 136 - _spin_nvr.tmp:304 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][136] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_starting */
	case 633: // STATE 1 - _spin_nvr.tmp:197 - [((!(!((states[2]==STARTING)))&&!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][1] = 1;
		if (!(( !( !((now.states[2]==2)))&& !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 634: // STATE 3 - _spin_nvr.tmp:198 - [(((!(!((states[0]==STARTING)))&&(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))||((!(!((states[1]==STARTING)))&&(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))||(!(!((states[2]==STARTING)))&&(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING)))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][3] = 1;
		if (!((( !( !((now.states[0]==2)))&&( !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==2))))||(( !( !((now.states[1]==2)))&&( !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==2))))||( !( !((now.states[2]==2)))&&( !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==2))))))))
			continue;
		/* merge: assert(!(((!(!((states[0]==STARTING)))&&(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))||((!(!((states[1]==STARTING)))&&(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))||(!(!((states[2]==STARTING)))&&(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING))))))))(0, 4, 12) */
		reached[4][4] = 1;
		spin_assert( !((( !( !((now.states[0]==2)))&&( !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==2))))||(( !( !((now.states[1]==2)))&&( !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==2))))||( !( !((now.states[2]==2)))&&( !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==2))))))), " !((( !( !((states[0]==2)))&&( !(((((states[0]==3)||(states[0]==4))||(states[0]==7))||(states[0]==10)))&& !((states[0]==2))))||(( !( !((states[1]==2)))&&( !(((((states[1]==3)||(states[1]==4))||(states[1]==7))||(states[1]==10)))&& !((states[1]==2))))||( !( !((states[2]==2)))&&( !(((((states[2]==3)||(states[2]==4))||(states[2]==7))||(states[2]==10)))&& !((states[2]==2)))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[4][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 635: // STATE 6 - _spin_nvr.tmp:199 - [((!(!((states[1]==STARTING)))&&!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][6] = 1;
		if (!(( !( !((now.states[1]==2)))&& !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 636: // STATE 8 - _spin_nvr.tmp:200 - [((!(!((states[0]==STARTING)))&&!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][8] = 1;
		if (!(( !( !((now.states[0]==2)))&& !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 637: // STATE 15 - _spin_nvr.tmp:205 - [(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][15] = 1;
		if (!( !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 638: // STATE 17 - _spin_nvr.tmp:206 - [((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][17] = 1;
		if (!(( !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING)))))(0, 18, 20) */
		reached[4][18] = 1;
		spin_assert( !(( !(((((now.states[2]==3)||(now.states[2]==4))||(now.states[2]==7))||(now.states[2]==10)))&& !((now.states[2]==2)))), " !(( !(((((states[2]==3)||(states[2]==4))||(states[2]==7))||(states[2]==10)))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[4][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 639: // STATE 23 - _spin_nvr.tmp:210 - [(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][23] = 1;
		if (!( !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 640: // STATE 25 - _spin_nvr.tmp:211 - [((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][25] = 1;
		if (!(( !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING)))))(0, 26, 28) */
		reached[4][26] = 1;
		spin_assert( !(( !(((((now.states[1]==3)||(now.states[1]==4))||(now.states[1]==7))||(now.states[1]==10)))&& !((now.states[1]==2)))), " !(( !(((((states[1]==3)||(states[1]==4))||(states[1]==7))||(states[1]==10)))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[4][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 641: // STATE 31 - _spin_nvr.tmp:215 - [(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][31] = 1;
		if (!( !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 642: // STATE 33 - _spin_nvr.tmp:216 - [((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][33] = 1;
		if (!(( !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING)))))(0, 34, 36) */
		reached[4][34] = 1;
		spin_assert( !(( !(((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==10)))&& !((now.states[0]==2)))), " !(( !(((((states[0]==3)||(states[0]==4))||(states[0]==7))||(states[0]==10)))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[4][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 643: // STATE 40 - _spin_nvr.tmp:220 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_ready */
	case 644: // STATE 1 - _spin_nvr.tmp:3 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][1] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 645: // STATE 3 - _spin_nvr.tmp:4 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][3] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 646: // STATE 5 - _spin_nvr.tmp:5 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][5] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 647: // STATE 7 - _spin_nvr.tmp:6 - [(((!((states[0]==0))&&(!((states[0]==READY))&&!((states[0]==STARTING))))||((!((states[1]==0))&&(!((states[1]==READY))&&!((states[1]==STARTING))))||(!((states[2]==0))&&(!((states[2]==READY))&&!((states[2]==STARTING)))))))] (34:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][7] = 1;
		if (!((( !((now.states[0]==0))&&( !((now.states[0]==1))&& !((now.states[0]==2))))||(( !((now.states[1]==0))&&( !((now.states[1]==1))&& !((now.states[1]==2))))||( !((now.states[2]==0))&&( !((now.states[2]==1))&& !((now.states[2]==2))))))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&(!((states[0]==READY))&&!((states[0]==STARTING))))||((!((states[1]==0))&&(!((states[1]==READY))&&!((states[1]==STARTING))))||(!((states[2]==0))&&(!((states[2]==READY))&&!((states[2]==STARTING))))))))(0, 8, 34) */
		reached[3][8] = 1;
		spin_assert( !((( !((now.states[0]==0))&&( !((now.states[0]==1))&& !((now.states[0]==2))))||(( !((now.states[1]==0))&&( !((now.states[1]==1))&& !((now.states[1]==2))))||( !((now.states[2]==0))&&( !((now.states[2]==1))&& !((now.states[2]==2))))))), " !((( !((states[0]==0))&&( !((states[0]==1))&& !((states[0]==2))))||(( !((states[1]==0))&&( !((states[1]==1))&& !((states[1]==2))))||( !((states[2]==0))&&( !((states[2]==1))&& !((states[2]==2)))))))", II, tt, t);
		/* merge: .(goto)(0, 35, 34) */
		reached[3][35] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 648: // STATE 10 - _spin_nvr.tmp:7 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][10] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 649: // STATE 12 - _spin_nvr.tmp:8 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][12] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 650: // STATE 14 - _spin_nvr.tmp:9 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][14] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 651: // STATE 16 - _spin_nvr.tmp:10 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][16] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 652: // STATE 18 - _spin_nvr.tmp:11 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][18] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 653: // STATE 20 - _spin_nvr.tmp:12 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][20] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 654: // STATE 22 - _spin_nvr.tmp:13 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][22] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 655: // STATE 24 - _spin_nvr.tmp:14 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][24] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 656: // STATE 26 - _spin_nvr.tmp:15 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][26] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 657: // STATE 28 - _spin_nvr.tmp:16 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][28] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 658: // STATE 30 - _spin_nvr.tmp:17 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][30] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 659: // STATE 32 - _spin_nvr.tmp:18 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][32] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 660: // STATE 37 - _spin_nvr.tmp:22 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported37 = 0;
			if (verbose && !reported37)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported37 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported37 = 0;
			if (verbose && !reported37)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported37 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][37] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 661: // STATE 39 - _spin_nvr.tmp:23 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (42:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][39] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 40, 42) */
		reached[3][40] = 1;
		spin_assert( !(( !((now.states[2]==1))&& !((now.states[2]==2)))), " !(( !((states[2]==1))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 43, 42) */
		reached[3][43] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 662: // STATE 45 - _spin_nvr.tmp:27 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][45] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 663: // STATE 47 - _spin_nvr.tmp:28 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported47 = 0;
			if (verbose && !reported47)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported47 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported47 = 0;
			if (verbose && !reported47)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported47 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][47] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 664: // STATE 49 - _spin_nvr.tmp:29 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][49] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 665: // STATE 51 - _spin_nvr.tmp:30 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][51] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 666: // STATE 53 - _spin_nvr.tmp:31 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (58:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][53] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 54, 58) */
		reached[3][54] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))), " !((( !((states[2]==0))&& !((states[2]==1)))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 59, 58) */
		reached[3][59] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 667: // STATE 56 - _spin_nvr.tmp:32 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported56 = 0;
			if (verbose && !reported56)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported56 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported56 = 0;
			if (verbose && !reported56)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported56 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][56] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 668: // STATE 61 - _spin_nvr.tmp:36 - [(!((states[2]==READY)))] (66:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][61] = 1;
		if (!( !((now.states[2]==1))))
			continue;
		/* merge: assert(!(!((states[2]==READY))))(0, 62, 66) */
		reached[3][62] = 1;
		spin_assert( !( !((now.states[2]==1))), " !( !((states[2]==1)))", II, tt, t);
		/* merge: .(goto)(0, 67, 66) */
		reached[3][67] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 669: // STATE 69 - _spin_nvr.tmp:41 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported69 = 0;
			if (verbose && !reported69)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported69 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported69 = 0;
			if (verbose && !reported69)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported69 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][69] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 670: // STATE 71 - _spin_nvr.tmp:42 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (78:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][71] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 72, 78) */
		reached[3][72] = 1;
		spin_assert( !(( !((now.states[2]==1))&& !((now.states[2]==2)))), " !(( !((states[2]==1))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 79, 78) */
		reached[3][79] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 671: // STATE 74 - _spin_nvr.tmp:43 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported74 = 0;
			if (verbose && !reported74)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported74 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported74 = 0;
			if (verbose && !reported74)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported74 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][74] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 672: // STATE 76 - _spin_nvr.tmp:44 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][76] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 673: // STATE 81 - _spin_nvr.tmp:48 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][81] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 674: // STATE 83 - _spin_nvr.tmp:49 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (86:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][83] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 84, 86) */
		reached[3][84] = 1;
		spin_assert( !(( !((now.states[1]==1))&& !((now.states[1]==2)))), " !(( !((states[1]==1))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 87, 86) */
		reached[3][87] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 675: // STATE 89 - _spin_nvr.tmp:53 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported89 = 0;
			if (verbose && !reported89)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported89 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported89 = 0;
			if (verbose && !reported89)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported89 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][89] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 676: // STATE 91 - _spin_nvr.tmp:54 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][91] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 677: // STATE 93 - _spin_nvr.tmp:55 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported93 = 0;
			if (verbose && !reported93)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported93 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported93 = 0;
			if (verbose && !reported93)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported93 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][93] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 678: // STATE 95 - _spin_nvr.tmp:56 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][95] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 679: // STATE 97 - _spin_nvr.tmp:57 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (102:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][97] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 98, 102) */
		reached[3][98] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))), " !((( !((states[1]==0))&& !((states[1]==1)))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 103, 102) */
		reached[3][103] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 680: // STATE 100 - _spin_nvr.tmp:58 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][100] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 681: // STATE 105 - _spin_nvr.tmp:62 - [(!((states[1]==READY)))] (110:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported105 = 0;
			if (verbose && !reported105)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported105 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported105 = 0;
			if (verbose && !reported105)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported105 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][105] = 1;
		if (!( !((now.states[1]==1))))
			continue;
		/* merge: assert(!(!((states[1]==READY))))(0, 106, 110) */
		reached[3][106] = 1;
		spin_assert( !( !((now.states[1]==1))), " !( !((states[1]==1)))", II, tt, t);
		/* merge: .(goto)(0, 111, 110) */
		reached[3][111] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 682: // STATE 113 - _spin_nvr.tmp:67 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][113] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 683: // STATE 115 - _spin_nvr.tmp:68 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (122:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][115] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 116, 122) */
		reached[3][116] = 1;
		spin_assert( !(( !((now.states[1]==1))&& !((now.states[1]==2)))), " !(( !((states[1]==1))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 123, 122) */
		reached[3][123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 684: // STATE 118 - _spin_nvr.tmp:69 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][118] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 685: // STATE 120 - _spin_nvr.tmp:70 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][120] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 686: // STATE 125 - _spin_nvr.tmp:74 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported125 = 0;
			if (verbose && !reported125)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported125 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported125 = 0;
			if (verbose && !reported125)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported125 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][125] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 687: // STATE 127 - _spin_nvr.tmp:75 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (130:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][127] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 128, 130) */
		reached[3][128] = 1;
		spin_assert( !(( !((now.states[0]==1))&& !((now.states[0]==2)))), " !(( !((states[0]==1))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 131, 130) */
		reached[3][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 688: // STATE 133 - _spin_nvr.tmp:79 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][133] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 689: // STATE 135 - _spin_nvr.tmp:80 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][135] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 690: // STATE 137 - _spin_nvr.tmp:81 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported137 = 0;
			if (verbose && !reported137)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported137 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported137 = 0;
			if (verbose && !reported137)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported137 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][137] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 691: // STATE 139 - _spin_nvr.tmp:82 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported139 = 0;
			if (verbose && !reported139)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported139 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported139 = 0;
			if (verbose && !reported139)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported139 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][139] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 692: // STATE 141 - _spin_nvr.tmp:83 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (146:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported141 = 0;
			if (verbose && !reported141)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported141 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported141 = 0;
			if (verbose && !reported141)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported141 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][141] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 142, 146) */
		reached[3][142] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))), " !((( !((states[0]==0))&& !((states[0]==1)))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 147, 146) */
		reached[3][147] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 693: // STATE 144 - _spin_nvr.tmp:84 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][144] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 694: // STATE 149 - _spin_nvr.tmp:88 - [(!((states[0]==READY)))] (154:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported149 = 0;
			if (verbose && !reported149)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported149 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported149 = 0;
			if (verbose && !reported149)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported149 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][149] = 1;
		if (!( !((now.states[0]==1))))
			continue;
		/* merge: assert(!(!((states[0]==READY))))(0, 150, 154) */
		reached[3][150] = 1;
		spin_assert( !( !((now.states[0]==1))), " !( !((states[0]==1)))", II, tt, t);
		/* merge: .(goto)(0, 155, 154) */
		reached[3][155] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 695: // STATE 157 - _spin_nvr.tmp:93 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][157] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 696: // STATE 159 - _spin_nvr.tmp:94 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (166:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][159] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 160, 166) */
		reached[3][160] = 1;
		spin_assert( !(( !((now.states[0]==1))&& !((now.states[0]==2)))), " !(( !((states[0]==1))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 167, 166) */
		reached[3][167] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 697: // STATE 162 - _spin_nvr.tmp:95 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][162] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 698: // STATE 164 - _spin_nvr.tmp:96 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][164] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 699: // STATE 169 - _spin_nvr.tmp:100 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported169 = 0;
			if (verbose && !reported169)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported169 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported169 = 0;
			if (verbose && !reported169)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported169 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][169] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 700: // STATE 171 - _spin_nvr.tmp:101 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][171] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 701: // STATE 173 - _spin_nvr.tmp:102 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][173] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 702: // STATE 175 - _spin_nvr.tmp:103 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (182:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][175] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 176, 182) */
		reached[3][176] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))), " !((( !((states[2]==0))&& !((states[2]==1)))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 183, 182) */
		reached[3][183] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 703: // STATE 178 - _spin_nvr.tmp:104 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported178 = 0;
			if (verbose && !reported178)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported178 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported178 = 0;
			if (verbose && !reported178)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported178 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][178] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 704: // STATE 180 - _spin_nvr.tmp:105 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][180] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 705: // STATE 185 - _spin_nvr.tmp:109 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported185 = 0;
			if (verbose && !reported185)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported185 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported185 = 0;
			if (verbose && !reported185)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported185 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][185] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 706: // STATE 187 - _spin_nvr.tmp:110 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][187] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 707: // STATE 189 - _spin_nvr.tmp:111 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported189 = 0;
			if (verbose && !reported189)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported189 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported189 = 0;
			if (verbose && !reported189)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported189 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][189] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 708: // STATE 191 - _spin_nvr.tmp:112 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported191 = 0;
			if (verbose && !reported191)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported191 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported191 = 0;
			if (verbose && !reported191)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported191 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][191] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 709: // STATE 193 - _spin_nvr.tmp:113 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (200:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported193 = 0;
			if (verbose && !reported193)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported193 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported193 = 0;
			if (verbose && !reported193)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported193 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][193] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 194, 200) */
		reached[3][194] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))), " !((( !((states[2]==0))&& !((states[2]==1)))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 201, 200) */
		reached[3][201] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 710: // STATE 196 - _spin_nvr.tmp:114 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported196 = 0;
			if (verbose && !reported196)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported196 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported196 = 0;
			if (verbose && !reported196)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported196 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][196] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==1)))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 711: // STATE 198 - _spin_nvr.tmp:115 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][198] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 712: // STATE 203 - _spin_nvr.tmp:119 - [(!((states[2]==READY)))] (208:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported203 = 0;
			if (verbose && !reported203)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported203 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported203 = 0;
			if (verbose && !reported203)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported203 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][203] = 1;
		if (!( !((now.states[2]==1))))
			continue;
		/* merge: assert(!(!((states[2]==READY))))(0, 204, 208) */
		reached[3][204] = 1;
		spin_assert( !( !((now.states[2]==1))), " !( !((states[2]==1)))", II, tt, t);
		/* merge: .(goto)(0, 209, 208) */
		reached[3][209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 713: // STATE 211 - _spin_nvr.tmp:124 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][211] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 714: // STATE 213 - _spin_nvr.tmp:125 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (220:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported213 = 0;
			if (verbose && !reported213)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported213 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported213 = 0;
			if (verbose && !reported213)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported213 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][213] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 214, 220) */
		reached[3][214] = 1;
		spin_assert( !(( !((now.states[2]==1))&& !((now.states[2]==2)))), " !(( !((states[2]==1))&& !((states[2]==2))))", II, tt, t);
		/* merge: .(goto)(0, 221, 220) */
		reached[3][221] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 715: // STATE 216 - _spin_nvr.tmp:126 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported216 = 0;
			if (verbose && !reported216)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported216 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported216 = 0;
			if (verbose && !reported216)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported216 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][216] = 1;
		if (!( !((now.states[2]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 716: // STATE 218 - _spin_nvr.tmp:127 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported218 = 0;
			if (verbose && !reported218)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported218 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported218 = 0;
			if (verbose && !reported218)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported218 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][218] = 1;
		if (!(( !((now.states[2]==1))&& !((now.states[2]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 717: // STATE 223 - _spin_nvr.tmp:131 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][223] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 718: // STATE 225 - _spin_nvr.tmp:132 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported225 = 0;
			if (verbose && !reported225)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported225 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported225 = 0;
			if (verbose && !reported225)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported225 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][225] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 719: // STATE 227 - _spin_nvr.tmp:133 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported227 = 0;
			if (verbose && !reported227)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported227 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported227 = 0;
			if (verbose && !reported227)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported227 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][227] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 720: // STATE 229 - _spin_nvr.tmp:134 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported229 = 0;
			if (verbose && !reported229)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported229 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported229 = 0;
			if (verbose && !reported229)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported229 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][229] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 230, 236) */
		reached[3][230] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))), " !((( !((states[1]==0))&& !((states[1]==1)))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[3][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 721: // STATE 232 - _spin_nvr.tmp:135 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][232] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 722: // STATE 234 - _spin_nvr.tmp:136 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][234] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 723: // STATE 239 - _spin_nvr.tmp:140 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][239] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 724: // STATE 241 - _spin_nvr.tmp:141 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported241 = 0;
			if (verbose && !reported241)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported241 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported241 = 0;
			if (verbose && !reported241)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported241 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][241] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 725: // STATE 243 - _spin_nvr.tmp:142 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][243] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 726: // STATE 245 - _spin_nvr.tmp:143 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported245 = 0;
			if (verbose && !reported245)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported245 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported245 = 0;
			if (verbose && !reported245)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported245 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][245] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 727: // STATE 247 - _spin_nvr.tmp:144 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (254:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported247 = 0;
			if (verbose && !reported247)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported247 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported247 = 0;
			if (verbose && !reported247)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported247 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][247] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 248, 254) */
		reached[3][248] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))), " !((( !((states[1]==0))&& !((states[1]==1)))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 255, 254) */
		reached[3][255] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 728: // STATE 250 - _spin_nvr.tmp:145 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported250 = 0;
			if (verbose && !reported250)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported250 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported250 = 0;
			if (verbose && !reported250)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported250 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][250] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==1)))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 729: // STATE 252 - _spin_nvr.tmp:146 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported252 = 0;
			if (verbose && !reported252)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported252 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported252 = 0;
			if (verbose && !reported252)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported252 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][252] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 730: // STATE 257 - _spin_nvr.tmp:150 - [(!((states[1]==READY)))] (262:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported257 = 0;
			if (verbose && !reported257)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported257 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported257 = 0;
			if (verbose && !reported257)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported257 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][257] = 1;
		if (!( !((now.states[1]==1))))
			continue;
		/* merge: assert(!(!((states[1]==READY))))(0, 258, 262) */
		reached[3][258] = 1;
		spin_assert( !( !((now.states[1]==1))), " !( !((states[1]==1)))", II, tt, t);
		/* merge: .(goto)(0, 263, 262) */
		reached[3][263] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 731: // STATE 265 - _spin_nvr.tmp:155 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][265] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 732: // STATE 267 - _spin_nvr.tmp:156 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (274:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported267 = 0;
			if (verbose && !reported267)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported267 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported267 = 0;
			if (verbose && !reported267)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported267 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][267] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 268, 274) */
		reached[3][268] = 1;
		spin_assert( !(( !((now.states[1]==1))&& !((now.states[1]==2)))), " !(( !((states[1]==1))&& !((states[1]==2))))", II, tt, t);
		/* merge: .(goto)(0, 275, 274) */
		reached[3][275] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 733: // STATE 270 - _spin_nvr.tmp:157 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][270] = 1;
		if (!( !((now.states[1]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 734: // STATE 272 - _spin_nvr.tmp:158 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported272 = 0;
			if (verbose && !reported272)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported272 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported272 = 0;
			if (verbose && !reported272)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported272 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][272] = 1;
		if (!(( !((now.states[1]==1))&& !((now.states[1]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 735: // STATE 277 - _spin_nvr.tmp:162 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported277 = 0;
			if (verbose && !reported277)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported277 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported277 = 0;
			if (verbose && !reported277)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported277 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][277] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 736: // STATE 279 - _spin_nvr.tmp:163 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported279 = 0;
			if (verbose && !reported279)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported279 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported279 = 0;
			if (verbose && !reported279)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported279 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][279] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 737: // STATE 281 - _spin_nvr.tmp:164 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported281 = 0;
			if (verbose && !reported281)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported281 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported281 = 0;
			if (verbose && !reported281)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported281 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][281] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 738: // STATE 283 - _spin_nvr.tmp:165 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported283 = 0;
			if (verbose && !reported283)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported283 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported283 = 0;
			if (verbose && !reported283)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported283 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][283] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 284, 290) */
		reached[3][284] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))), " !((( !((states[0]==0))&& !((states[0]==1)))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[3][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 739: // STATE 286 - _spin_nvr.tmp:166 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported286 = 0;
			if (verbose && !reported286)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported286 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported286 = 0;
			if (verbose && !reported286)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported286 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][286] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 740: // STATE 288 - _spin_nvr.tmp:167 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported288 = 0;
			if (verbose && !reported288)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported288 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported288 = 0;
			if (verbose && !reported288)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported288 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][288] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 741: // STATE 293 - _spin_nvr.tmp:171 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][293] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 742: // STATE 295 - _spin_nvr.tmp:172 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported295 = 0;
			if (verbose && !reported295)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported295 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported295 = 0;
			if (verbose && !reported295)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported295 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][295] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 743: // STATE 297 - _spin_nvr.tmp:173 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported297 = 0;
			if (verbose && !reported297)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported297 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported297 = 0;
			if (verbose && !reported297)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported297 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][297] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 744: // STATE 299 - _spin_nvr.tmp:174 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported299 = 0;
			if (verbose && !reported299)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported299 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported299 = 0;
			if (verbose && !reported299)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported299 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][299] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 745: // STATE 301 - _spin_nvr.tmp:175 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (308:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported301 = 0;
			if (verbose && !reported301)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported301 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported301 = 0;
			if (verbose && !reported301)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported301 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][301] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 302, 308) */
		reached[3][302] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))), " !((( !((states[0]==0))&& !((states[0]==1)))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 309, 308) */
		reached[3][309] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 746: // STATE 304 - _spin_nvr.tmp:176 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported304 = 0;
			if (verbose && !reported304)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported304 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported304 = 0;
			if (verbose && !reported304)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported304 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][304] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==1)))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 747: // STATE 306 - _spin_nvr.tmp:177 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported306 = 0;
			if (verbose && !reported306)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported306 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported306 = 0;
			if (verbose && !reported306)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported306 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][306] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 748: // STATE 311 - _spin_nvr.tmp:181 - [(!((states[0]==READY)))] (316:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported311 = 0;
			if (verbose && !reported311)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported311 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported311 = 0;
			if (verbose && !reported311)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported311 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][311] = 1;
		if (!( !((now.states[0]==1))))
			continue;
		/* merge: assert(!(!((states[0]==READY))))(0, 312, 316) */
		reached[3][312] = 1;
		spin_assert( !( !((now.states[0]==1))), " !( !((states[0]==1)))", II, tt, t);
		/* merge: .(goto)(0, 317, 316) */
		reached[3][317] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 749: // STATE 319 - _spin_nvr.tmp:186 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][319] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 750: // STATE 321 - _spin_nvr.tmp:187 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (328:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][321] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 322, 328) */
		reached[3][322] = 1;
		spin_assert( !(( !((now.states[0]==1))&& !((now.states[0]==2)))), " !(( !((states[0]==1))&& !((states[0]==2))))", II, tt, t);
		/* merge: .(goto)(0, 329, 328) */
		reached[3][329] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 751: // STATE 324 - _spin_nvr.tmp:188 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][324] = 1;
		if (!( !((now.states[0]==2))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 752: // STATE 326 - _spin_nvr.tmp:189 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][326] = 1;
		if (!(( !((now.states[0]==1))&& !((now.states[0]==2)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 753: // STATE 332 - _spin_nvr.tmp:193 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][332] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC :init: */
	case 754: // STATE 11 - mutant_243.pml:407 - [D_STEP407]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][11] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_14936_0: /* 2 */
S_14935_0: /* 2 */
S_14929_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_14935_1;
S_14930_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(states[i]==0)", II, tt, t);
S_14931_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(commands[i]==0)", II, tt, t);
S_14932_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_14936_0; /* ';' */
S_14935_1: /* 3 */
S_14933_0: /* 2 */
		/* else */;
S_14934_0: /* 2 */
		goto S_14937_0;	/* 'goto' */
S_14935_2: /* 3 */
		Uerror("blocking sel in d_step (nr.0, near line 408)");
S_14937_0: /* 2 */
		goto S_14938_0;	/* 'break' */
S_14938_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_14962_0;
S_14962_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 755: // STATE 33 - mutant_243.pml:573 - [D_STEP573]
		if (!(((boq == -1 && 1)) || ((boq == -1 && 1))))
			continue;

		reached[2][33] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_14945_0: /* 2 */
S_14941_0: /* 2 */
		if (!(1))
			goto S_14945_1;
S_14942_0: /* 2 */
		now.serialize_commands = 1;
#ifdef VAR_RANGES
		logval("serialize_commands", ((int)now.serialize_commands));
#endif
		;
		goto S_14946_0;
S_14945_1: /* 3 */
S_14943_0: /* 2 */
		if (!(1))
			goto S_14945_2;
S_14944_0: /* 2 */
		now.serialize_commands = 0;
#ifdef VAR_RANGES
		logval("serialize_commands", ((int)now.serialize_commands));
#endif
		;
		goto S_14946_0;
S_14945_2: /* 3 */
		Uerror("blocking sel in d_step (nr.1, near line 574)");
S_14946_0: /* 2 */
S_14947_0: /* 2 */
		now.all_workers_stopped = 0;
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
S_14948_0: /* 2 */
		now.exists_aborted_worker = 0;
#ifdef VAR_RANGES
		logval("exists_aborted_worker", ((int)now.exists_aborted_worker));
#endif
		;
S_14949_0: /* 2 */
		now.supervisor_started = 0;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
S_14959_0: /* 2 */
S_14958_0: /* 2 */
S_14950_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_14958_1;
S_14954_0: /* 2 */
S_14953_0: /* 2 */
S_14951_0: /* 2 */
		now.states[ Index(((P2 *)_this)->i, 3) ] = 1;
#ifdef VAR_RANGES
		logval("states[:init::i]", now.states[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_14952_0: /* 2 */
		now.commands[ Index(((P2 *)_this)->i, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[:init::i]", now.commands[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
		goto S_14955_0;
S_14955_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_14959_0; /* ';' */
S_14958_1: /* 3 */
S_14956_0: /* 2 */
		/* else */;
S_14957_0: /* 2 */
		goto S_14960_0;	/* 'goto' */
S_14958_2: /* 3 */
		Uerror("blocking sel in d_step (nr.2, near line 583)");
S_14960_0: /* 2 */
		goto S_14963_0;	/* 'break' */
S_14963_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 756: // STATE 35 - mutant_243.pml:675 - [i = 0] (0:0:1 - 1)
		IfNotBlocked
		reached[2][35] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 757: // STATE 46 - mutant_243.pml:407 - [D_STEP407]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][46] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_14971_0: /* 2 */
S_14970_0: /* 2 */
S_14964_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_14970_1;
S_14965_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==1), "(states[i]==1)", II, tt, t);
S_14966_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==6), "(commands[i]==6)", II, tt, t);
S_14967_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_14971_0; /* ';' */
S_14970_1: /* 3 */
S_14968_0: /* 2 */
		/* else */;
S_14969_0: /* 2 */
		goto S_14972_0;	/* 'goto' */
S_14970_2: /* 3 */
		Uerror("blocking sel in d_step (nr.3, near line 408)");
S_14972_0: /* 2 */
		goto S_14973_0;	/* 'break' */
S_14973_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_14976_0;
S_14976_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 758: // STATE 48 - mutant_243.pml:677 - [printf('Init starts Supervisor...\\n')] (0:81:0 - 1)
		IfNotBlocked
		reached[2][48] = 1;
		Printf("Init starts Supervisor...\n");
		_m = 3; goto P999; /* 0 */
	case 759: // STATE 49 - mutant_243.pml:510 - [(((START==START)&&(commands[0]==CONTINUE)))] (69:0:1 - 1)
		IfNotBlocked
		reached[2][49] = 1;
		if (!(((5==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(69, 50, 69) */
		reached[2][50] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(69, 51, 69) */
		reached[2][51] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 760: // STATE 67 - mutant_243.pml:528 - [.(goto)] (0:69:0 - 6)
		IfNotBlocked
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 761: // STATE 52 - mutant_243.pml:513 - [(((START==PAUSE)&&(commands[0]==CONTINUE)))] (69:0:1 - 1)
		IfNotBlocked
		reached[2][52] = 1;
		if (!(((5==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(69, 53, 69) */
		reached[2][53] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(69, 54, 69) */
		reached[2][54] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 762: // STATE 55 - mutant_243.pml:516 - [(((START==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (69:0:1 - 1)
		IfNotBlocked
		reached[2][55] = 1;
		if (!(((5==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(69, 56, 69) */
		reached[2][56] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(69, 57, 69) */
		reached[2][57] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 763: // STATE 58 - mutant_243.pml:519 - [(((START==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (69:0:1 - 1)
		IfNotBlocked
		reached[2][58] = 1;
		if (!(((5==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(69, 59, 69) */
		reached[2][59] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(69, 60, 69) */
		reached[2][60] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 764: // STATE 61 - mutant_243.pml:522 - [((START==ABORT))] (69:0:1 - 1)
		IfNotBlocked
		reached[2][61] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[0]!=READY))(69, 62, 69) */
		reached[2][62] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(69, 63, 69) */
		reached[2][63] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 765: // STATE 65 - mutant_243.pml:526 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:69:0 - 1)
		IfNotBlocked
		reached[2][65] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(69, 67, 69) */
		reached[2][67] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 766: // STATE 69 - mutant_243.pml:529 - [(run Supervisor())] (0:0:0 - 1)
		IfNotBlocked
		reached[2][69] = 1;
		if (!(addproc(II, 1, 1, 0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 767: // STATE 70 - mutant_243.pml:227 - [((_pid==0))] (78:0:0 - 1)
		IfNotBlocked
		reached[2][70] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',0)(0, 71, 78) */
		reached[2][71] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 77, 78) */
		reached[2][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 768: // STATE 72 - mutant_243.pml:229 - [((_pid==1))] (78:0:0 - 1)
		IfNotBlocked
		reached[2][72] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',0)(0, 73, 78) */
		reached[2][73] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 77, 78) */
		reached[2][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 769: // STATE 74 - mutant_243.pml:231 - [((_pid>1))] (78:0:0 - 1)
		IfNotBlocked
		reached[2][74] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),0)(0, 75, 78) */
		reached[2][75] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 77, 78) */
		reached[2][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 770: // STATE 78 - mutant_243.pml:234 - [(((((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][78] = 1;
		if (!(((((((now.states[0]==3)||(now.states[0]==4))||(now.states[0]==7))||(now.states[0]==9))||(now.states[0]==10))||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 771: // STATE 79 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][79] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 772: // STATE 82 - mutant_243.pml:681 - [((states[0]==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][82] = 1;
		if (!((now.states[0]==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 773: // STATE 83 - mutant_243.pml:682 - [printf('Init pauses Supervisor...\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][83] = 1;
		Printf("Init pauses Supervisor...\n");
		_m = 3; goto P999; /* 0 */
	case 774: // STATE 85 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[0]==CONTINUE)))] (119:0:1 - 1)
		IfNotBlocked
		reached[2][85] = 1;
		if (!(((8==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(119, 86, 119) */
		reached[2][86] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(119, 87, 119) */
		reached[2][87] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 775: // STATE 103 - mutant_243.pml:336 - [.(goto)] (0:119:0 - 6)
		IfNotBlocked
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 776: // STATE 88 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))] (119:0:1 - 1)
		IfNotBlocked
		reached[2][88] = 1;
		if (!(((8==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(119, 89, 119) */
		reached[2][89] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(119, 90, 119) */
		reached[2][90] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 777: // STATE 91 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (119:0:1 - 1)
		IfNotBlocked
		reached[2][91] = 1;
		if (!(((8==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(119, 92, 119) */
		reached[2][92] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(119, 93, 119) */
		reached[2][93] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 778: // STATE 94 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (119:0:1 - 1)
		IfNotBlocked
		reached[2][94] = 1;
		if (!(((8==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(119, 95, 119) */
		reached[2][95] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(119, 96, 119) */
		reached[2][96] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 779: // STATE 97 - mutant_243.pml:330 - [((PAUSE==ABORT))] (119:0:1 - 1)
		IfNotBlocked
		reached[2][97] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[0]!=READY))(119, 98, 119) */
		reached[2][98] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(119, 99, 119) */
		reached[2][99] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 780: // STATE 101 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:119:0 - 1)
		IfNotBlocked
		reached[2][101] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(119, 103, 119) */
		reached[2][103] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 781: // STATE 106 - mutant_243.pml:239 - [((_pid==0))] (114:0:0 - 1)
		IfNotBlocked
		reached[2][106] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',0)(0, 107, 114) */
		reached[2][107] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 113, 114) */
		reached[2][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 782: // STATE 108 - mutant_243.pml:241 - [((_pid==1))] (114:0:0 - 1)
		IfNotBlocked
		reached[2][108] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',0)(0, 109, 114) */
		reached[2][109] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 113, 114) */
		reached[2][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 783: // STATE 110 - mutant_243.pml:243 - [((_pid>1))] (114:0:0 - 1)
		IfNotBlocked
		reached[2][110] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),0)(0, 111, 114) */
		reached[2][111] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 113, 114) */
		reached[2][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 784: // STATE 114 - mutant_243.pml:246 - [((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][114] = 1;
		if (!((((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==9))||(now.states[0]==10))||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 785: // STATE 115 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][115] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 786: // STATE 123 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[0]==CONTINUE)))] (157:0:1 - 1)
		IfNotBlocked
		reached[2][123] = 1;
		if (!(((8==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(157, 124, 157) */
		reached[2][124] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(157, 125, 157) */
		reached[2][125] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 787: // STATE 141 - mutant_243.pml:336 - [.(goto)] (0:157:0 - 6)
		IfNotBlocked
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 788: // STATE 126 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))] (157:0:1 - 1)
		IfNotBlocked
		reached[2][126] = 1;
		if (!(((8==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(157, 127, 157) */
		reached[2][127] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(157, 128, 157) */
		reached[2][128] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 789: // STATE 129 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (157:0:1 - 1)
		IfNotBlocked
		reached[2][129] = 1;
		if (!(((8==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(157, 130, 157) */
		reached[2][130] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(157, 131, 157) */
		reached[2][131] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 790: // STATE 132 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (157:0:1 - 1)
		IfNotBlocked
		reached[2][132] = 1;
		if (!(((8==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(157, 133, 157) */
		reached[2][133] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(157, 134, 157) */
		reached[2][134] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 791: // STATE 135 - mutant_243.pml:330 - [((PAUSE==ABORT))] (157:0:1 - 1)
		IfNotBlocked
		reached[2][135] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[0]!=READY))(157, 136, 157) */
		reached[2][136] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(157, 137, 157) */
		reached[2][137] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 792: // STATE 139 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:157:0 - 1)
		IfNotBlocked
		reached[2][139] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(157, 141, 157) */
		reached[2][141] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 793: // STATE 144 - mutant_243.pml:239 - [((_pid==0))] (152:0:0 - 1)
		IfNotBlocked
		reached[2][144] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',0)(0, 145, 152) */
		reached[2][145] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 151, 152) */
		reached[2][151] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 794: // STATE 146 - mutant_243.pml:241 - [((_pid==1))] (152:0:0 - 1)
		IfNotBlocked
		reached[2][146] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',0)(0, 147, 152) */
		reached[2][147] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 151, 152) */
		reached[2][151] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 795: // STATE 148 - mutant_243.pml:243 - [((_pid>1))] (152:0:0 - 1)
		IfNotBlocked
		reached[2][148] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),0)(0, 149, 152) */
		reached[2][149] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 151, 152) */
		reached[2][151] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 796: // STATE 152 - mutant_243.pml:246 - [((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][152] = 1;
		if (!((((((now.states[0]==4)||(now.states[0]==7))||(now.states[0]==9))||(now.states[0]==10))||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 797: // STATE 153 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][153] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 798: // STATE 162 - mutant_243.pml:689 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][162] = 1;
		if (!((now.states[0]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 799: // STATE 163 - mutant_243.pml:690 - [printf('Init resumes Supervisor...\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][163] = 1;
		Printf("Init resumes Supervisor...\n");
		_m = 3; goto P999; /* 0 */
	case 800: // STATE 165 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (199:0:1 - 1)
		IfNotBlocked
		reached[2][165] = 1;
		if (!(((6==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(199, 166, 199) */
		reached[2][166] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(199, 167, 199) */
		reached[2][167] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 801: // STATE 183 - mutant_243.pml:365 - [.(goto)] (0:199:0 - 6)
		IfNotBlocked
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 802: // STATE 168 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (199:0:1 - 1)
		IfNotBlocked
		reached[2][168] = 1;
		if (!(((6==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(199, 169, 199) */
		reached[2][169] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(199, 170, 199) */
		reached[2][170] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 803: // STATE 171 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (199:0:1 - 1)
		IfNotBlocked
		reached[2][171] = 1;
		if (!(((6==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(199, 172, 199) */
		reached[2][172] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(199, 173, 199) */
		reached[2][173] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 804: // STATE 174 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (199:0:1 - 1)
		IfNotBlocked
		reached[2][174] = 1;
		if (!(((6==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(199, 175, 199) */
		reached[2][175] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(199, 176, 199) */
		reached[2][176] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 805: // STATE 177 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (199:0:1 - 1)
		IfNotBlocked
		reached[2][177] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[0]!=READY))(199, 178, 199) */
		reached[2][178] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(199, 179, 199) */
		reached[2][179] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 806: // STATE 181 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:199:0 - 1)
		IfNotBlocked
		reached[2][181] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(199, 183, 199) */
		reached[2][183] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 807: // STATE 186 - mutant_243.pml:251 - [((_pid==0))] (194:0:0 - 1)
		IfNotBlocked
		reached[2][186] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',0)(0, 187, 194) */
		reached[2][187] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 193, 194) */
		reached[2][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 808: // STATE 188 - mutant_243.pml:253 - [((_pid==1))] (194:0:0 - 1)
		IfNotBlocked
		reached[2][188] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',0)(0, 189, 194) */
		reached[2][189] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 193, 194) */
		reached[2][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 809: // STATE 190 - mutant_243.pml:255 - [((_pid>1))] (194:0:0 - 1)
		IfNotBlocked
		reached[2][190] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),0)(0, 191, 194) */
		reached[2][191] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 193, 194) */
		reached[2][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 810: // STATE 194 - mutant_243.pml:258 - [((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][194] = 1;
		if (!((((((now.states[0]==3)||(now.states[0]==7))||(now.states[0]==9))||(now.states[0]==10))||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 811: // STATE 195 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][195] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 812: // STATE 203 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (237:0:1 - 1)
		IfNotBlocked
		reached[2][203] = 1;
		if (!(((6==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(237, 204, 237) */
		reached[2][204] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(237, 205, 237) */
		reached[2][205] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 813: // STATE 221 - mutant_243.pml:365 - [.(goto)] (0:237:0 - 6)
		IfNotBlocked
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 814: // STATE 206 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (237:0:1 - 1)
		IfNotBlocked
		reached[2][206] = 1;
		if (!(((6==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(237, 207, 237) */
		reached[2][207] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(237, 208, 237) */
		reached[2][208] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 815: // STATE 209 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (237:0:1 - 1)
		IfNotBlocked
		reached[2][209] = 1;
		if (!(((6==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(237, 210, 237) */
		reached[2][210] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(237, 211, 237) */
		reached[2][211] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 816: // STATE 212 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (237:0:1 - 1)
		IfNotBlocked
		reached[2][212] = 1;
		if (!(((6==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(237, 213, 237) */
		reached[2][213] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(237, 214, 237) */
		reached[2][214] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 817: // STATE 215 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (237:0:1 - 1)
		IfNotBlocked
		reached[2][215] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[0]!=READY))(237, 216, 237) */
		reached[2][216] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(237, 217, 237) */
		reached[2][217] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 818: // STATE 219 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:237:0 - 1)
		IfNotBlocked
		reached[2][219] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(237, 221, 237) */
		reached[2][221] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 819: // STATE 224 - mutant_243.pml:251 - [((_pid==0))] (232:0:0 - 1)
		IfNotBlocked
		reached[2][224] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',0)(0, 225, 232) */
		reached[2][225] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 231, 232) */
		reached[2][231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 820: // STATE 226 - mutant_243.pml:253 - [((_pid==1))] (232:0:0 - 1)
		IfNotBlocked
		reached[2][226] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',0)(0, 227, 232) */
		reached[2][227] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 231, 232) */
		reached[2][231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 821: // STATE 228 - mutant_243.pml:255 - [((_pid>1))] (232:0:0 - 1)
		IfNotBlocked
		reached[2][228] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),0)(0, 229, 232) */
		reached[2][229] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 231, 232) */
		reached[2][231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 822: // STATE 232 - mutant_243.pml:258 - [((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][232] = 1;
		if (!((((((now.states[0]==3)||(now.states[0]==7))||(now.states[0]==9))||(now.states[0]==10))||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 823: // STATE 233 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][233] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 824: // STATE 250 - mutant_243.pml:703 - [printf('Init stops Supervisor...\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][250] = 1;
		Printf("Init stops Supervisor...\n");
		_m = 3; goto P999; /* 0 */
	case 825: // STATE 252 - mutant_243.pml:376 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (286:0:1 - 1)
		IfNotBlocked
		reached[2][252] = 1;
		if (!(((12==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(286, 253, 286) */
		reached[2][253] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(286, 254, 286) */
		reached[2][254] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 826: // STATE 270 - mutant_243.pml:394 - [.(goto)] (0:286:0 - 6)
		IfNotBlocked
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 827: // STATE 255 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (286:0:1 - 1)
		IfNotBlocked
		reached[2][255] = 1;
		if (!(((12==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(286, 256, 286) */
		reached[2][256] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(286, 257, 286) */
		reached[2][257] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 828: // STATE 258 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (286:0:1 - 1)
		IfNotBlocked
		reached[2][258] = 1;
		if (!(((12==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(286, 259, 286) */
		reached[2][259] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(286, 260, 286) */
		reached[2][260] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 829: // STATE 261 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (286:0:1 - 1)
		IfNotBlocked
		reached[2][261] = 1;
		if (!(((12==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(286, 262, 286) */
		reached[2][262] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(286, 263, 286) */
		reached[2][263] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 830: // STATE 264 - mutant_243.pml:388 - [((STOP==ABORT))] (286:0:1 - 1)
		IfNotBlocked
		reached[2][264] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[0]!=READY))(286, 265, 286) */
		reached[2][265] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(286, 266, 286) */
		reached[2][266] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 831: // STATE 268 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:286:0 - 1)
		IfNotBlocked
		reached[2][268] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(286, 270, 286) */
		reached[2][270] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 832: // STATE 273 - mutant_243.pml:263 - [((_pid==0))] (281:0:0 - 1)
		IfNotBlocked
		reached[2][273] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',0)(0, 274, 281) */
		reached[2][274] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 280, 281) */
		reached[2][280] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 833: // STATE 275 - mutant_243.pml:265 - [((_pid==1))] (281:0:0 - 1)
		IfNotBlocked
		reached[2][275] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)(0, 276, 281) */
		reached[2][276] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 280, 281) */
		reached[2][280] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 834: // STATE 277 - mutant_243.pml:267 - [((_pid>1))] (281:0:0 - 1)
		IfNotBlocked
		reached[2][277] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)(0, 278, 281) */
		reached[2][278] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 280, 281) */
		reached[2][280] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 835: // STATE 281 - mutant_243.pml:270 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][281] = 1;
		if (!(((now.states[0]==9)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 836: // STATE 282 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][282] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 837: // STATE 290 - mutant_243.pml:376 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (324:0:1 - 1)
		IfNotBlocked
		reached[2][290] = 1;
		if (!(((12==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(324, 291, 324) */
		reached[2][291] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(324, 292, 324) */
		reached[2][292] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 838: // STATE 308 - mutant_243.pml:394 - [.(goto)] (0:324:0 - 6)
		IfNotBlocked
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 839: // STATE 293 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (324:0:1 - 1)
		IfNotBlocked
		reached[2][293] = 1;
		if (!(((12==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(324, 294, 324) */
		reached[2][294] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(324, 295, 324) */
		reached[2][295] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 840: // STATE 296 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (324:0:1 - 1)
		IfNotBlocked
		reached[2][296] = 1;
		if (!(((12==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(324, 297, 324) */
		reached[2][297] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(324, 298, 324) */
		reached[2][298] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 841: // STATE 299 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (324:0:1 - 1)
		IfNotBlocked
		reached[2][299] = 1;
		if (!(((12==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(324, 300, 324) */
		reached[2][300] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(324, 301, 324) */
		reached[2][301] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 842: // STATE 302 - mutant_243.pml:388 - [((STOP==ABORT))] (324:0:1 - 1)
		IfNotBlocked
		reached[2][302] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[0]!=READY))(324, 303, 324) */
		reached[2][303] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(324, 304, 324) */
		reached[2][304] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 843: // STATE 306 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:324:0 - 1)
		IfNotBlocked
		reached[2][306] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(324, 308, 324) */
		reached[2][308] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 844: // STATE 311 - mutant_243.pml:263 - [((_pid==0))] (319:0:0 - 1)
		IfNotBlocked
		reached[2][311] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',0)(0, 312, 319) */
		reached[2][312] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 318, 319) */
		reached[2][318] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 845: // STATE 313 - mutant_243.pml:265 - [((_pid==1))] (319:0:0 - 1)
		IfNotBlocked
		reached[2][313] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)(0, 314, 319) */
		reached[2][314] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 318, 319) */
		reached[2][318] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 846: // STATE 315 - mutant_243.pml:267 - [((_pid>1))] (319:0:0 - 1)
		IfNotBlocked
		reached[2][315] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)(0, 316, 319) */
		reached[2][316] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 318, 319) */
		reached[2][318] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 847: // STATE 319 - mutant_243.pml:270 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][319] = 1;
		if (!(((now.states[0]==9)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 848: // STATE 320 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[2][320] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 849: // STATE 333 - mutant_243.pml:263 - [((_pid==0))] (341:0:0 - 1)
		IfNotBlocked
		reached[2][333] = 1;
		if (!((((int)((P2 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',0)(0, 334, 341) */
		reached[2][334] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 340, 341) */
		reached[2][340] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 850: // STATE 335 - mutant_243.pml:265 - [((_pid==1))] (341:0:0 - 1)
		IfNotBlocked
		reached[2][335] = 1;
		if (!((((int)((P2 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)(0, 336, 341) */
		reached[2][336] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 340, 341) */
		reached[2][340] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 851: // STATE 337 - mutant_243.pml:267 - [((_pid>1))] (341:0:0 - 1)
		IfNotBlocked
		reached[2][337] = 1;
		if (!((((int)((P2 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)(0, 338, 341) */
		reached[2][338] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P2 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 340, 341) */
		reached[2][340] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 852: // STATE 341 - mutant_243.pml:270 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[2][341] = 1;
		if (!(((now.states[0]==9)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 853: // STATE 342 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:358:1 - 1)
		IfNotBlocked
		reached[2][342] = 1;
		Printf("waiiting ended.\n");
		/* merge: i = 0(358, 344, 358) */
		reached[2][344] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 1 */
	case 854: // STATE 357 - mutant_243.pml:593 - [D_STEP593]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][357] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_15283_0: /* 2 */
S_15282_0: /* 2 */
S_15273_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_15282_1;
S_15278_0: /* 2 */
S_15277_0: /* 2 */
S_15274_0: /* 2 */
		now.states[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("states[:init::i]", now.states[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_15275_0: /* 2 */
		now.commands[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("commands[:init::i]", now.commands[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_15276_0: /* 2 */
		now.executing[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("executing[:init::i]", ((int)now.executing[ Index(((int)((P2 *)_this)->i), 3) ]));
#endif
		;
		goto S_15279_0;
S_15279_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_15283_0; /* ';' */
S_15282_1: /* 3 */
S_15280_0: /* 2 */
		/* else */;
S_15281_0: /* 2 */
		goto S_15284_0;	/* 'goto' */
S_15282_2: /* 3 */
		Uerror("blocking sel in d_step (nr.4, near line 594)");
S_15284_0: /* 2 */
		goto S_15287_0;	/* 'break' */
S_15287_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 855: // STATE 359 - mutant_243.pml:716 - [i = 0] (0:0:1 - 1)
		IfNotBlocked
		reached[2][359] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 856: // STATE 370 - mutant_243.pml:407 - [D_STEP407]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][370] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_15295_0: /* 2 */
S_15294_0: /* 2 */
S_15288_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_15294_1;
S_15289_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(states[i]==0)", II, tt, t);
S_15290_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(commands[i]==0)", II, tt, t);
S_15291_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_15295_0; /* ';' */
S_15294_1: /* 3 */
S_15292_0: /* 2 */
		/* else */;
S_15293_0: /* 2 */
		goto S_15296_0;	/* 'goto' */
S_15294_2: /* 3 */
		Uerror("blocking sel in d_step (nr.5, near line 408)");
S_15296_0: /* 2 */
		goto S_15297_0;	/* 'break' */
S_15297_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_15300_0;
S_15300_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 857: // STATE 372 - mutant_243.pml:718 - [-end-] (0:0:0 - 1)
		IfNotBlocked
		reached[2][372] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC Supervisor */
	case 858: // STATE 1 - mutant_243.pml:605 - [((commands[0]==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1] = 1;
		if (!((now.commands[0]==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 859: // STATE 2 - mutant_243.pml:5 - [(((0==0)&&(5==0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[1][2] = 1;
		if (!(((0==0)&&(5==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',1,2)(0, 3, 13) */
		reached[1][3] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 1, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[1][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 860: // STATE 4 - mutant_243.pml:7 - [(((0==0)&&(5>0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[1][4] = 1;
		if (!(((0==0)&&(5>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',1,5,2)(0, 5, 13) */
		reached[1][5] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 1, 5, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[1][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 861: // STATE 6 - mutant_243.pml:9 - [(((0>0)&&(5==0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[1][6] = 1;
		if (!(((0>0)&&(5==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,1,2)(0, 7, 13) */
		reached[1][7] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 1, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[1][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 862: // STATE 8 - mutant_243.pml:11 - [(((0>0)&&(5>0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[1][8] = 1;
		if (!(((0>0)&&(5>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,1,5,2)(0, 9, 13) */
		reached[1][9] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 1, 5, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[1][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 863: // STATE 13 - mutant_243.pml:564 - [states[0] = 2] (0:0:1 - 5)
		IfNotBlocked
		reached[1][13] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 2;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 864: // STATE 14 - mutant_243.pml:552 - [((2==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14] = 1;
		if (!((2==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 865: // STATE 15 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][15] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 866: // STATE 16 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][16] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 867: // STATE 17 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][17] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 868: // STATE 19 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][19] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 869: // STATE 20 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][20] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 870: // STATE 21 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][21] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 871: // STATE 22 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][22] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 872: // STATE 23 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (43:0:1 - 1)
		IfNotBlocked
		reached[1][23] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(43, 24, 43) */
		reached[1][24] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(43, 25, 43) */
		reached[1][25] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 873: // STATE 41 - mutant_243.pml:306 - [.(goto)] (0:43:0 - 6)
		IfNotBlocked
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 874: // STATE 26 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (43:0:1 - 1)
		IfNotBlocked
		reached[1][26] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(43, 27, 43) */
		reached[1][27] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(43, 28, 43) */
		reached[1][28] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 875: // STATE 29 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (43:0:1 - 1)
		IfNotBlocked
		reached[1][29] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(43, 30, 43) */
		reached[1][30] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(43, 31, 43) */
		reached[1][31] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 876: // STATE 32 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (43:0:1 - 1)
		IfNotBlocked
		reached[1][32] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(43, 33, 43) */
		reached[1][33] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(43, 34, 43) */
		reached[1][34] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 877: // STATE 35 - mutant_243.pml:300 - [((START==ABORT))] (43:0:1 - 1)
		IfNotBlocked
		reached[1][35] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(43, 36, 43) */
		reached[1][36] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(43, 37, 43) */
		reached[1][37] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 878: // STATE 39 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:43:0 - 1)
		IfNotBlocked
		reached[1][39] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(43, 41, 43) */
		reached[1][41] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 879: // STATE 43 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][43] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 880: // STATE 45 - mutant_243.pml:227 - [((_pid==0))] (53:0:0 - 1)
		IfNotBlocked
		reached[1][45] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 46, 53) */
		reached[1][46] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 52, 53) */
		reached[1][52] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 881: // STATE 47 - mutant_243.pml:229 - [((_pid==1))] (53:0:0 - 1)
		IfNotBlocked
		reached[1][47] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 48, 53) */
		reached[1][48] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 52, 53) */
		reached[1][52] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 882: // STATE 49 - mutant_243.pml:231 - [((_pid>1))] (53:0:0 - 1)
		IfNotBlocked
		reached[1][49] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 50, 53) */
		reached[1][50] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 52, 53) */
		reached[1][52] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 883: // STATE 53 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][53] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 884: // STATE 54 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:182:1 - 1)
		IfNotBlocked
		reached[1][54] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(182, 59, 182) */
		reached[1][59] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 885: // STATE 57 - mutant_243.pml:312 - [(1)] (182:0:1 - 1)
		IfNotBlocked
		reached[1][57] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(182, 59, 182) */
		reached[1][59] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 886: // STATE 61 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][61] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 887: // STATE 62 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (96:0:1 - 1)
		IfNotBlocked
		reached[1][62] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(96, 63, 96) */
		reached[1][63] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(96, 64, 96) */
		reached[1][64] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 888: // STATE 80 - mutant_243.pml:336 - [.(goto)] (0:96:0 - 6)
		IfNotBlocked
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 889: // STATE 65 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (96:0:1 - 1)
		IfNotBlocked
		reached[1][65] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(96, 66, 96) */
		reached[1][66] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(96, 67, 96) */
		reached[1][67] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 890: // STATE 68 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (96:0:1 - 1)
		IfNotBlocked
		reached[1][68] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(96, 69, 96) */
		reached[1][69] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(96, 70, 96) */
		reached[1][70] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 891: // STATE 71 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (96:0:1 - 1)
		IfNotBlocked
		reached[1][71] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(96, 72, 96) */
		reached[1][72] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(96, 73, 96) */
		reached[1][73] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 892: // STATE 74 - mutant_243.pml:330 - [((PAUSE==ABORT))] (96:0:1 - 1)
		IfNotBlocked
		reached[1][74] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(96, 75, 96) */
		reached[1][75] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(96, 76, 96) */
		reached[1][76] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 893: // STATE 78 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:96:0 - 1)
		IfNotBlocked
		reached[1][78] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(96, 80, 96) */
		reached[1][80] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 894: // STATE 83 - mutant_243.pml:239 - [((_pid==0))] (91:0:0 - 1)
		IfNotBlocked
		reached[1][83] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 84, 91) */
		reached[1][84] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 90, 91) */
		reached[1][90] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 895: // STATE 85 - mutant_243.pml:241 - [((_pid==1))] (91:0:0 - 1)
		IfNotBlocked
		reached[1][85] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 86, 91) */
		reached[1][86] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 90, 91) */
		reached[1][90] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 896: // STATE 87 - mutant_243.pml:243 - [((_pid>1))] (91:0:0 - 1)
		IfNotBlocked
		reached[1][87] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 88, 91) */
		reached[1][88] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 90, 91) */
		reached[1][90] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 897: // STATE 91 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][91] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 898: // STATE 92 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:182:1 - 1)
		IfNotBlocked
		reached[1][92] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(182, 97, 182) */
		reached[1][97] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 899: // STATE 95 - mutant_243.pml:341 - [(1)] (182:0:1 - 1)
		IfNotBlocked
		reached[1][95] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(182, 97, 182) */
		reached[1][97] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 900: // STATE 99 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][99] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 901: // STATE 100 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (134:0:1 - 1)
		IfNotBlocked
		reached[1][100] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(134, 101, 134) */
		reached[1][101] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(134, 102, 134) */
		reached[1][102] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 902: // STATE 118 - mutant_243.pml:365 - [.(goto)] (0:134:0 - 6)
		IfNotBlocked
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 903: // STATE 103 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (134:0:1 - 1)
		IfNotBlocked
		reached[1][103] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(134, 104, 134) */
		reached[1][104] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(134, 105, 134) */
		reached[1][105] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 904: // STATE 106 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (134:0:1 - 1)
		IfNotBlocked
		reached[1][106] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(134, 107, 134) */
		reached[1][107] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(134, 108, 134) */
		reached[1][108] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 905: // STATE 109 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (134:0:1 - 1)
		IfNotBlocked
		reached[1][109] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(134, 110, 134) */
		reached[1][110] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(134, 111, 134) */
		reached[1][111] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 906: // STATE 112 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (134:0:1 - 1)
		IfNotBlocked
		reached[1][112] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(134, 113, 134) */
		reached[1][113] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(134, 114, 134) */
		reached[1][114] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 907: // STATE 116 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:134:0 - 1)
		IfNotBlocked
		reached[1][116] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(134, 118, 134) */
		reached[1][118] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 908: // STATE 121 - mutant_243.pml:251 - [((_pid==0))] (129:0:0 - 1)
		IfNotBlocked
		reached[1][121] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 122, 129) */
		reached[1][122] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 128, 129) */
		reached[1][128] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 909: // STATE 123 - mutant_243.pml:253 - [((_pid==1))] (129:0:0 - 1)
		IfNotBlocked
		reached[1][123] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 124, 129) */
		reached[1][124] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 128, 129) */
		reached[1][128] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 910: // STATE 125 - mutant_243.pml:255 - [((_pid>1))] (129:0:0 - 1)
		IfNotBlocked
		reached[1][125] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 126, 129) */
		reached[1][126] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 128, 129) */
		reached[1][128] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 911: // STATE 129 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][129] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 912: // STATE 130 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:182:1 - 1)
		IfNotBlocked
		reached[1][130] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(182, 135, 182) */
		reached[1][135] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 913: // STATE 133 - mutant_243.pml:370 - [(1)] (182:0:1 - 1)
		IfNotBlocked
		reached[1][133] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(182, 135, 182) */
		reached[1][135] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 914: // STATE 137 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][137] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 915: // STATE 138 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (172:0:1 - 1)
		IfNotBlocked
		reached[1][138] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(172, 139, 172) */
		reached[1][139] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(172, 140, 172) */
		reached[1][140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 916: // STATE 156 - mutant_243.pml:394 - [.(goto)] (0:172:0 - 6)
		IfNotBlocked
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 917: // STATE 141 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (172:0:1 - 1)
		IfNotBlocked
		reached[1][141] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(172, 142, 172) */
		reached[1][142] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(172, 143, 172) */
		reached[1][143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 918: // STATE 144 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (172:0:1 - 1)
		IfNotBlocked
		reached[1][144] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(172, 145, 172) */
		reached[1][145] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(172, 146, 172) */
		reached[1][146] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 919: // STATE 147 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (172:0:1 - 1)
		IfNotBlocked
		reached[1][147] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(172, 148, 172) */
		reached[1][148] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(172, 149, 172) */
		reached[1][149] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 920: // STATE 150 - mutant_243.pml:388 - [((STOP==ABORT))] (172:0:1 - 1)
		IfNotBlocked
		reached[1][150] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(172, 151, 172) */
		reached[1][151] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(172, 152, 172) */
		reached[1][152] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 921: // STATE 154 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:172:0 - 1)
		IfNotBlocked
		reached[1][154] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(172, 156, 172) */
		reached[1][156] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 922: // STATE 159 - mutant_243.pml:263 - [((_pid==0))] (167:0:0 - 1)
		IfNotBlocked
		reached[1][159] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 160, 167) */
		reached[1][160] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 166, 167) */
		reached[1][166] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 923: // STATE 161 - mutant_243.pml:265 - [((_pid==1))] (167:0:0 - 1)
		IfNotBlocked
		reached[1][161] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 162, 167) */
		reached[1][162] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 166, 167) */
		reached[1][166] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 924: // STATE 163 - mutant_243.pml:267 - [((_pid>1))] (167:0:0 - 1)
		IfNotBlocked
		reached[1][163] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 164, 167) */
		reached[1][164] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 166, 167) */
		reached[1][166] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 925: // STATE 167 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][167] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 926: // STATE 168 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:182:1 - 1)
		IfNotBlocked
		reached[1][168] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(182, 173, 182) */
		reached[1][173] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 927: // STATE 171 - mutant_243.pml:399 - [(1)] (182:0:1 - 1)
		IfNotBlocked
		reached[1][171] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(182, 173, 182) */
		reached[1][173] = 1;
		;
		/* merge: .(goto)(182, 176, 182) */
		reached[1][176] = 1;
		;
		/* merge: j = (j+1)(182, 178, 182) */
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 928: // STATE 178 - mutant_243.pml:435 - [j = (j+1)] (0:182:1 - 13)
		IfNotBlocked
		reached[1][178] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 183, 182) */
		reached[1][183] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 929: // STATE 180 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 930: // STATE 187 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][187] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 931: // STATE 188 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][188] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 932: // STATE 189 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][189] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 933: // STATE 190 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (210:0:1 - 1)
		IfNotBlocked
		reached[1][190] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(210, 191, 210) */
		reached[1][191] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(210, 192, 210) */
		reached[1][192] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 934: // STATE 208 - mutant_243.pml:306 - [.(goto)] (0:210:0 - 6)
		IfNotBlocked
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 935: // STATE 193 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (210:0:1 - 1)
		IfNotBlocked
		reached[1][193] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(210, 194, 210) */
		reached[1][194] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(210, 195, 210) */
		reached[1][195] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 936: // STATE 196 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (210:0:1 - 1)
		IfNotBlocked
		reached[1][196] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(210, 197, 210) */
		reached[1][197] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(210, 198, 210) */
		reached[1][198] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 937: // STATE 199 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (210:0:1 - 1)
		IfNotBlocked
		reached[1][199] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(210, 200, 210) */
		reached[1][200] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(210, 201, 210) */
		reached[1][201] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 938: // STATE 202 - mutant_243.pml:300 - [((START==ABORT))] (210:0:1 - 1)
		IfNotBlocked
		reached[1][202] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(210, 203, 210) */
		reached[1][203] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(210, 204, 210) */
		reached[1][204] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 939: // STATE 206 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:210:0 - 1)
		IfNotBlocked
		reached[1][206] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(210, 208, 210) */
		reached[1][208] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 940: // STATE 210 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][210] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 941: // STATE 212 - mutant_243.pml:227 - [((_pid==0))] (220:0:0 - 1)
		IfNotBlocked
		reached[1][212] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 213, 220) */
		reached[1][213] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 219, 220) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 942: // STATE 214 - mutant_243.pml:229 - [((_pid==1))] (220:0:0 - 1)
		IfNotBlocked
		reached[1][214] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 215, 220) */
		reached[1][215] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 219, 220) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 943: // STATE 216 - mutant_243.pml:231 - [((_pid>1))] (220:0:0 - 1)
		IfNotBlocked
		reached[1][216] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 217, 220) */
		reached[1][217] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 219, 220) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 944: // STATE 220 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][220] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 945: // STATE 221 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:349:1 - 1)
		IfNotBlocked
		reached[1][221] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(349, 226, 349) */
		reached[1][226] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 946: // STATE 224 - mutant_243.pml:312 - [(1)] (349:0:1 - 1)
		IfNotBlocked
		reached[1][224] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(349, 226, 349) */
		reached[1][226] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 947: // STATE 228 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][228] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 948: // STATE 229 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (263:0:1 - 1)
		IfNotBlocked
		reached[1][229] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(263, 230, 263) */
		reached[1][230] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(263, 231, 263) */
		reached[1][231] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 949: // STATE 247 - mutant_243.pml:336 - [.(goto)] (0:263:0 - 6)
		IfNotBlocked
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 950: // STATE 232 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (263:0:1 - 1)
		IfNotBlocked
		reached[1][232] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(263, 233, 263) */
		reached[1][233] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(263, 234, 263) */
		reached[1][234] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 951: // STATE 235 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (263:0:1 - 1)
		IfNotBlocked
		reached[1][235] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(263, 236, 263) */
		reached[1][236] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(263, 237, 263) */
		reached[1][237] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 952: // STATE 238 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (263:0:1 - 1)
		IfNotBlocked
		reached[1][238] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(263, 239, 263) */
		reached[1][239] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(263, 240, 263) */
		reached[1][240] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 953: // STATE 241 - mutant_243.pml:330 - [((PAUSE==ABORT))] (263:0:1 - 1)
		IfNotBlocked
		reached[1][241] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(263, 242, 263) */
		reached[1][242] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(263, 243, 263) */
		reached[1][243] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 954: // STATE 245 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:263:0 - 1)
		IfNotBlocked
		reached[1][245] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(263, 247, 263) */
		reached[1][247] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 955: // STATE 250 - mutant_243.pml:239 - [((_pid==0))] (258:0:0 - 1)
		IfNotBlocked
		reached[1][250] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 251, 258) */
		reached[1][251] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 257, 258) */
		reached[1][257] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 956: // STATE 252 - mutant_243.pml:241 - [((_pid==1))] (258:0:0 - 1)
		IfNotBlocked
		reached[1][252] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 253, 258) */
		reached[1][253] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 257, 258) */
		reached[1][257] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 957: // STATE 254 - mutant_243.pml:243 - [((_pid>1))] (258:0:0 - 1)
		IfNotBlocked
		reached[1][254] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 255, 258) */
		reached[1][255] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 257, 258) */
		reached[1][257] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 958: // STATE 258 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][258] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 959: // STATE 259 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:349:1 - 1)
		IfNotBlocked
		reached[1][259] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(349, 264, 349) */
		reached[1][264] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 960: // STATE 262 - mutant_243.pml:341 - [(1)] (349:0:1 - 1)
		IfNotBlocked
		reached[1][262] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(349, 264, 349) */
		reached[1][264] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 961: // STATE 266 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][266] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 962: // STATE 267 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (301:0:1 - 1)
		IfNotBlocked
		reached[1][267] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(301, 268, 301) */
		reached[1][268] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(301, 269, 301) */
		reached[1][269] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 963: // STATE 285 - mutant_243.pml:365 - [.(goto)] (0:301:0 - 6)
		IfNotBlocked
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 964: // STATE 270 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (301:0:1 - 1)
		IfNotBlocked
		reached[1][270] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(301, 271, 301) */
		reached[1][271] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(301, 272, 301) */
		reached[1][272] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 965: // STATE 273 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (301:0:1 - 1)
		IfNotBlocked
		reached[1][273] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(301, 274, 301) */
		reached[1][274] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(301, 275, 301) */
		reached[1][275] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 966: // STATE 276 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (301:0:1 - 1)
		IfNotBlocked
		reached[1][276] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(301, 277, 301) */
		reached[1][277] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(301, 278, 301) */
		reached[1][278] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 967: // STATE 279 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (301:0:1 - 1)
		IfNotBlocked
		reached[1][279] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(301, 280, 301) */
		reached[1][280] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(301, 281, 301) */
		reached[1][281] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 968: // STATE 283 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:301:0 - 1)
		IfNotBlocked
		reached[1][283] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(301, 285, 301) */
		reached[1][285] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 969: // STATE 288 - mutant_243.pml:251 - [((_pid==0))] (296:0:0 - 1)
		IfNotBlocked
		reached[1][288] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 289, 296) */
		reached[1][289] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 295, 296) */
		reached[1][295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 970: // STATE 290 - mutant_243.pml:253 - [((_pid==1))] (296:0:0 - 1)
		IfNotBlocked
		reached[1][290] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 291, 296) */
		reached[1][291] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 295, 296) */
		reached[1][295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 971: // STATE 292 - mutant_243.pml:255 - [((_pid>1))] (296:0:0 - 1)
		IfNotBlocked
		reached[1][292] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 293, 296) */
		reached[1][293] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 295, 296) */
		reached[1][295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 972: // STATE 296 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][296] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 973: // STATE 297 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:349:1 - 1)
		IfNotBlocked
		reached[1][297] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(349, 302, 349) */
		reached[1][302] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 974: // STATE 300 - mutant_243.pml:370 - [(1)] (349:0:1 - 1)
		IfNotBlocked
		reached[1][300] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(349, 302, 349) */
		reached[1][302] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 975: // STATE 304 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][304] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 976: // STATE 305 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (339:0:1 - 1)
		IfNotBlocked
		reached[1][305] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(339, 306, 339) */
		reached[1][306] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(339, 307, 339) */
		reached[1][307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 977: // STATE 323 - mutant_243.pml:394 - [.(goto)] (0:339:0 - 6)
		IfNotBlocked
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 978: // STATE 308 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (339:0:1 - 1)
		IfNotBlocked
		reached[1][308] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(339, 309, 339) */
		reached[1][309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(339, 310, 339) */
		reached[1][310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 979: // STATE 311 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (339:0:1 - 1)
		IfNotBlocked
		reached[1][311] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(339, 312, 339) */
		reached[1][312] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(339, 313, 339) */
		reached[1][313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 980: // STATE 314 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (339:0:1 - 1)
		IfNotBlocked
		reached[1][314] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(339, 315, 339) */
		reached[1][315] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(339, 316, 339) */
		reached[1][316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 981: // STATE 317 - mutant_243.pml:388 - [((STOP==ABORT))] (339:0:1 - 1)
		IfNotBlocked
		reached[1][317] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(339, 318, 339) */
		reached[1][318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(339, 319, 339) */
		reached[1][319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 982: // STATE 321 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:339:0 - 1)
		IfNotBlocked
		reached[1][321] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(339, 323, 339) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 983: // STATE 326 - mutant_243.pml:263 - [((_pid==0))] (334:0:0 - 1)
		IfNotBlocked
		reached[1][326] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 327, 334) */
		reached[1][327] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 333, 334) */
		reached[1][333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 984: // STATE 328 - mutant_243.pml:265 - [((_pid==1))] (334:0:0 - 1)
		IfNotBlocked
		reached[1][328] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 329, 334) */
		reached[1][329] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 333, 334) */
		reached[1][333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 985: // STATE 330 - mutant_243.pml:267 - [((_pid>1))] (334:0:0 - 1)
		IfNotBlocked
		reached[1][330] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 331, 334) */
		reached[1][331] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 333, 334) */
		reached[1][333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 986: // STATE 334 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][334] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 987: // STATE 335 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:349:1 - 1)
		IfNotBlocked
		reached[1][335] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(349, 340, 349) */
		reached[1][340] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 988: // STATE 338 - mutant_243.pml:399 - [(1)] (349:0:1 - 1)
		IfNotBlocked
		reached[1][338] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(349, 340, 349) */
		reached[1][340] = 1;
		;
		/* merge: .(goto)(349, 343, 349) */
		reached[1][343] = 1;
		;
		/* merge: j = (j-1)(349, 345, 349) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 989: // STATE 345 - mutant_243.pml:446 - [j = (j-1)] (0:349:1 - 13)
		IfNotBlocked
		reached[1][345] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 350, 349) */
		reached[1][350] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 990: // STATE 347 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][347] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 991: // STATE 357 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][357] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 992: // STATE 358 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][358] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 993: // STATE 359 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][359] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 994: // STATE 360 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (380:0:1 - 1)
		IfNotBlocked
		reached[1][360] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(380, 361, 380) */
		reached[1][361] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(380, 362, 380) */
		reached[1][362] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 995: // STATE 378 - mutant_243.pml:306 - [.(goto)] (0:380:0 - 6)
		IfNotBlocked
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 996: // STATE 363 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (380:0:1 - 1)
		IfNotBlocked
		reached[1][363] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(380, 364, 380) */
		reached[1][364] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(380, 365, 380) */
		reached[1][365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 997: // STATE 366 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (380:0:1 - 1)
		IfNotBlocked
		reached[1][366] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(380, 367, 380) */
		reached[1][367] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(380, 368, 380) */
		reached[1][368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 998: // STATE 369 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (380:0:1 - 1)
		IfNotBlocked
		reached[1][369] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(380, 370, 380) */
		reached[1][370] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(380, 371, 380) */
		reached[1][371] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 999: // STATE 372 - mutant_243.pml:300 - [((START==ABORT))] (380:0:1 - 1)
		IfNotBlocked
		reached[1][372] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(380, 373, 380) */
		reached[1][373] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(380, 374, 380) */
		reached[1][374] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1000: // STATE 376 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:380:0 - 1)
		IfNotBlocked
		reached[1][376] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(380, 378, 380) */
		reached[1][378] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1001: // STATE 380 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][380] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1002: // STATE 382 - mutant_243.pml:227 - [((_pid==0))] (390:0:0 - 1)
		IfNotBlocked
		reached[1][382] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 383, 390) */
		reached[1][383] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 389, 390) */
		reached[1][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1003: // STATE 384 - mutant_243.pml:229 - [((_pid==1))] (390:0:0 - 1)
		IfNotBlocked
		reached[1][384] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 385, 390) */
		reached[1][385] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 389, 390) */
		reached[1][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1004: // STATE 386 - mutant_243.pml:231 - [((_pid>1))] (390:0:0 - 1)
		IfNotBlocked
		reached[1][386] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 387, 390) */
		reached[1][387] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 389, 390) */
		reached[1][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1005: // STATE 390 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][390] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1006: // STATE 391 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:519:1 - 1)
		IfNotBlocked
		reached[1][391] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(519, 396, 519) */
		reached[1][396] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1007: // STATE 394 - mutant_243.pml:312 - [(1)] (519:0:1 - 1)
		IfNotBlocked
		reached[1][394] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(519, 396, 519) */
		reached[1][396] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1008: // STATE 398 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][398] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1009: // STATE 399 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (433:0:1 - 1)
		IfNotBlocked
		reached[1][399] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(433, 400, 433) */
		reached[1][400] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(433, 401, 433) */
		reached[1][401] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1010: // STATE 417 - mutant_243.pml:336 - [.(goto)] (0:433:0 - 6)
		IfNotBlocked
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1011: // STATE 402 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (433:0:1 - 1)
		IfNotBlocked
		reached[1][402] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(433, 403, 433) */
		reached[1][403] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(433, 404, 433) */
		reached[1][404] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1012: // STATE 405 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (433:0:1 - 1)
		IfNotBlocked
		reached[1][405] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(433, 406, 433) */
		reached[1][406] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(433, 407, 433) */
		reached[1][407] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1013: // STATE 408 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (433:0:1 - 1)
		IfNotBlocked
		reached[1][408] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(433, 409, 433) */
		reached[1][409] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(433, 410, 433) */
		reached[1][410] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1014: // STATE 411 - mutant_243.pml:330 - [((PAUSE==ABORT))] (433:0:1 - 1)
		IfNotBlocked
		reached[1][411] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(433, 412, 433) */
		reached[1][412] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(433, 413, 433) */
		reached[1][413] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1015: // STATE 415 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:433:0 - 1)
		IfNotBlocked
		reached[1][415] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(433, 417, 433) */
		reached[1][417] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1016: // STATE 420 - mutant_243.pml:239 - [((_pid==0))] (428:0:0 - 1)
		IfNotBlocked
		reached[1][420] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 421, 428) */
		reached[1][421] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 427, 428) */
		reached[1][427] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1017: // STATE 422 - mutant_243.pml:241 - [((_pid==1))] (428:0:0 - 1)
		IfNotBlocked
		reached[1][422] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 423, 428) */
		reached[1][423] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 427, 428) */
		reached[1][427] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1018: // STATE 424 - mutant_243.pml:243 - [((_pid>1))] (428:0:0 - 1)
		IfNotBlocked
		reached[1][424] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 425, 428) */
		reached[1][425] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 427, 428) */
		reached[1][427] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1019: // STATE 428 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][428] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1020: // STATE 429 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:519:1 - 1)
		IfNotBlocked
		reached[1][429] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(519, 434, 519) */
		reached[1][434] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1021: // STATE 432 - mutant_243.pml:341 - [(1)] (519:0:1 - 1)
		IfNotBlocked
		reached[1][432] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(519, 434, 519) */
		reached[1][434] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1022: // STATE 436 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][436] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1023: // STATE 437 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (471:0:1 - 1)
		IfNotBlocked
		reached[1][437] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(471, 438, 471) */
		reached[1][438] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(471, 439, 471) */
		reached[1][439] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1024: // STATE 455 - mutant_243.pml:365 - [.(goto)] (0:471:0 - 6)
		IfNotBlocked
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1025: // STATE 440 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (471:0:1 - 1)
		IfNotBlocked
		reached[1][440] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(471, 441, 471) */
		reached[1][441] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(471, 442, 471) */
		reached[1][442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1026: // STATE 443 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (471:0:1 - 1)
		IfNotBlocked
		reached[1][443] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(471, 444, 471) */
		reached[1][444] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(471, 445, 471) */
		reached[1][445] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1027: // STATE 446 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (471:0:1 - 1)
		IfNotBlocked
		reached[1][446] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(471, 447, 471) */
		reached[1][447] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(471, 448, 471) */
		reached[1][448] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1028: // STATE 449 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (471:0:1 - 1)
		IfNotBlocked
		reached[1][449] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(471, 450, 471) */
		reached[1][450] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(471, 451, 471) */
		reached[1][451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1029: // STATE 453 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:471:0 - 1)
		IfNotBlocked
		reached[1][453] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(471, 455, 471) */
		reached[1][455] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1030: // STATE 458 - mutant_243.pml:251 - [((_pid==0))] (466:0:0 - 1)
		IfNotBlocked
		reached[1][458] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 459, 466) */
		reached[1][459] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 465, 466) */
		reached[1][465] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1031: // STATE 460 - mutant_243.pml:253 - [((_pid==1))] (466:0:0 - 1)
		IfNotBlocked
		reached[1][460] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 461, 466) */
		reached[1][461] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 465, 466) */
		reached[1][465] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1032: // STATE 462 - mutant_243.pml:255 - [((_pid>1))] (466:0:0 - 1)
		IfNotBlocked
		reached[1][462] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 463, 466) */
		reached[1][463] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 465, 466) */
		reached[1][465] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1033: // STATE 466 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][466] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1034: // STATE 467 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:519:1 - 1)
		IfNotBlocked
		reached[1][467] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(519, 472, 519) */
		reached[1][472] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1035: // STATE 470 - mutant_243.pml:370 - [(1)] (519:0:1 - 1)
		IfNotBlocked
		reached[1][470] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(519, 472, 519) */
		reached[1][472] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1036: // STATE 474 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][474] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1037: // STATE 475 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (509:0:1 - 1)
		IfNotBlocked
		reached[1][475] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(509, 476, 509) */
		reached[1][476] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(509, 477, 509) */
		reached[1][477] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1038: // STATE 493 - mutant_243.pml:394 - [.(goto)] (0:509:0 - 6)
		IfNotBlocked
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1039: // STATE 478 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (509:0:1 - 1)
		IfNotBlocked
		reached[1][478] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(509, 479, 509) */
		reached[1][479] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(509, 480, 509) */
		reached[1][480] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1040: // STATE 481 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (509:0:1 - 1)
		IfNotBlocked
		reached[1][481] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(509, 482, 509) */
		reached[1][482] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(509, 483, 509) */
		reached[1][483] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1041: // STATE 484 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (509:0:1 - 1)
		IfNotBlocked
		reached[1][484] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(509, 485, 509) */
		reached[1][485] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(509, 486, 509) */
		reached[1][486] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1042: // STATE 487 - mutant_243.pml:388 - [((STOP==ABORT))] (509:0:1 - 1)
		IfNotBlocked
		reached[1][487] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(509, 488, 509) */
		reached[1][488] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(509, 489, 509) */
		reached[1][489] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1043: // STATE 491 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:509:0 - 1)
		IfNotBlocked
		reached[1][491] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(509, 493, 509) */
		reached[1][493] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1044: // STATE 496 - mutant_243.pml:263 - [((_pid==0))] (504:0:0 - 1)
		IfNotBlocked
		reached[1][496] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 497, 504) */
		reached[1][497] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 503, 504) */
		reached[1][503] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1045: // STATE 498 - mutant_243.pml:265 - [((_pid==1))] (504:0:0 - 1)
		IfNotBlocked
		reached[1][498] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 499, 504) */
		reached[1][499] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 503, 504) */
		reached[1][503] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1046: // STATE 500 - mutant_243.pml:267 - [((_pid>1))] (504:0:0 - 1)
		IfNotBlocked
		reached[1][500] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 501, 504) */
		reached[1][501] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 503, 504) */
		reached[1][503] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1047: // STATE 504 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][504] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1048: // STATE 505 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:519:1 - 1)
		IfNotBlocked
		reached[1][505] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(519, 510, 519) */
		reached[1][510] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1049: // STATE 508 - mutant_243.pml:399 - [(1)] (519:0:1 - 1)
		IfNotBlocked
		reached[1][508] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(519, 510, 519) */
		reached[1][510] = 1;
		;
		/* merge: .(goto)(519, 513, 519) */
		reached[1][513] = 1;
		;
		/* merge: j = (j+1)(519, 515, 519) */
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1050: // STATE 515 - mutant_243.pml:435 - [j = (j+1)] (0:519:1 - 13)
		IfNotBlocked
		reached[1][515] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 520, 519) */
		reached[1][520] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1051: // STATE 517 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][517] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1052: // STATE 523 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][523] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1053: // STATE 524 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][524] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1054: // STATE 525 - mutant_243.pml:227 - [((_pid==0))] (533:0:0 - 1)
		IfNotBlocked
		reached[1][525] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 526, 533) */
		reached[1][526] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 532, 533) */
		reached[1][532] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1055: // STATE 527 - mutant_243.pml:229 - [((_pid==1))] (533:0:0 - 1)
		IfNotBlocked
		reached[1][527] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 528, 533) */
		reached[1][528] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 532, 533) */
		reached[1][532] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1056: // STATE 529 - mutant_243.pml:231 - [((_pid>1))] (533:0:0 - 1)
		IfNotBlocked
		reached[1][529] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 530, 533) */
		reached[1][530] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 532, 533) */
		reached[1][532] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1057: // STATE 533 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][533] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1058: // STATE 534 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:578:1 - 1)
		IfNotBlocked
		reached[1][534] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(578, 573, 578) */
		reached[1][573] = 1;
		;
		/* merge: j = (j+1)(578, 574, 578) */
		reached[1][574] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 579, 578) */
		reached[1][579] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1059: // STATE 536 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][536] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1060: // STATE 537 - mutant_243.pml:251 - [((_pid==0))] (545:0:0 - 1)
		IfNotBlocked
		reached[1][537] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 538, 545) */
		reached[1][538] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 544, 545) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1061: // STATE 539 - mutant_243.pml:253 - [((_pid==1))] (545:0:0 - 1)
		IfNotBlocked
		reached[1][539] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 540, 545) */
		reached[1][540] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 544, 545) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1062: // STATE 541 - mutant_243.pml:255 - [((_pid>1))] (545:0:0 - 1)
		IfNotBlocked
		reached[1][541] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 542, 545) */
		reached[1][542] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 544, 545) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1063: // STATE 545 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][545] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1064: // STATE 546 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:578:1 - 1)
		IfNotBlocked
		reached[1][546] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(578, 573, 578) */
		reached[1][573] = 1;
		;
		/* merge: j = (j+1)(578, 574, 578) */
		reached[1][574] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 579, 578) */
		reached[1][579] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1065: // STATE 548 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][548] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1066: // STATE 549 - mutant_243.pml:239 - [((_pid==0))] (557:0:0 - 1)
		IfNotBlocked
		reached[1][549] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 550, 557) */
		reached[1][550] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 556, 557) */
		reached[1][556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1067: // STATE 551 - mutant_243.pml:241 - [((_pid==1))] (557:0:0 - 1)
		IfNotBlocked
		reached[1][551] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 552, 557) */
		reached[1][552] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 556, 557) */
		reached[1][556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1068: // STATE 553 - mutant_243.pml:243 - [((_pid>1))] (557:0:0 - 1)
		IfNotBlocked
		reached[1][553] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 554, 557) */
		reached[1][554] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 556, 557) */
		reached[1][556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1069: // STATE 557 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][557] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1070: // STATE 558 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:578:1 - 1)
		IfNotBlocked
		reached[1][558] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(578, 573, 578) */
		reached[1][573] = 1;
		;
		/* merge: j = (j+1)(578, 574, 578) */
		reached[1][574] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 579, 578) */
		reached[1][579] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1071: // STATE 560 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][560] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1072: // STATE 561 - mutant_243.pml:263 - [((_pid==0))] (569:0:0 - 1)
		IfNotBlocked
		reached[1][561] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 562, 569) */
		reached[1][562] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 568, 569) */
		reached[1][568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1073: // STATE 563 - mutant_243.pml:265 - [((_pid==1))] (569:0:0 - 1)
		IfNotBlocked
		reached[1][563] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 564, 569) */
		reached[1][564] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 568, 569) */
		reached[1][568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1074: // STATE 565 - mutant_243.pml:267 - [((_pid>1))] (569:0:0 - 1)
		IfNotBlocked
		reached[1][565] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 566, 569) */
		reached[1][566] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 568, 569) */
		reached[1][568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1075: // STATE 569 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][569] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1076: // STATE 570 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:578:1 - 1)
		IfNotBlocked
		reached[1][570] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(578, 573, 578) */
		reached[1][573] = 1;
		;
		/* merge: j = (j+1)(578, 574, 578) */
		reached[1][574] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 579, 578) */
		reached[1][579] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1077: // STATE 574 - mutant_243.pml:475 - [j = (j+1)] (0:578:1 - 5)
		IfNotBlocked
		reached[1][574] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 579, 578) */
		reached[1][579] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1078: // STATE 576 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][576] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1079: // STATE 587 - mutant_243.pml:554 - [((2==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][587] = 1;
		if (!((2==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1080: // STATE 588 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][588] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1081: // STATE 589 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][589] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 1082: // STATE 590 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][590] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1083: // STATE 592 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][592] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1084: // STATE 593 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][593] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1085: // STATE 594 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][594] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1086: // STATE 595 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][595] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1087: // STATE 596 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (616:0:1 - 1)
		IfNotBlocked
		reached[1][596] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(616, 597, 616) */
		reached[1][597] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(616, 598, 616) */
		reached[1][598] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1088: // STATE 614 - mutant_243.pml:306 - [.(goto)] (0:616:0 - 6)
		IfNotBlocked
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1089: // STATE 599 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (616:0:1 - 1)
		IfNotBlocked
		reached[1][599] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(616, 600, 616) */
		reached[1][600] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(616, 601, 616) */
		reached[1][601] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1090: // STATE 602 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (616:0:1 - 1)
		IfNotBlocked
		reached[1][602] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(616, 603, 616) */
		reached[1][603] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(616, 604, 616) */
		reached[1][604] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1091: // STATE 605 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (616:0:1 - 1)
		IfNotBlocked
		reached[1][605] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(616, 606, 616) */
		reached[1][606] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(616, 607, 616) */
		reached[1][607] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1092: // STATE 608 - mutant_243.pml:300 - [((START==ABORT))] (616:0:1 - 1)
		IfNotBlocked
		reached[1][608] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(616, 609, 616) */
		reached[1][609] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(616, 610, 616) */
		reached[1][610] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1093: // STATE 612 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:616:0 - 1)
		IfNotBlocked
		reached[1][612] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(616, 614, 616) */
		reached[1][614] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1094: // STATE 616 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][616] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1095: // STATE 618 - mutant_243.pml:227 - [((_pid==0))] (626:0:0 - 1)
		IfNotBlocked
		reached[1][618] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 619, 626) */
		reached[1][619] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 625, 626) */
		reached[1][625] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1096: // STATE 620 - mutant_243.pml:229 - [((_pid==1))] (626:0:0 - 1)
		IfNotBlocked
		reached[1][620] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 621, 626) */
		reached[1][621] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 625, 626) */
		reached[1][625] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1097: // STATE 622 - mutant_243.pml:231 - [((_pid>1))] (626:0:0 - 1)
		IfNotBlocked
		reached[1][622] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 623, 626) */
		reached[1][623] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 625, 626) */
		reached[1][625] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1098: // STATE 626 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][626] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1099: // STATE 627 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:755:1 - 1)
		IfNotBlocked
		reached[1][627] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(755, 632, 755) */
		reached[1][632] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1100: // STATE 630 - mutant_243.pml:312 - [(1)] (755:0:1 - 1)
		IfNotBlocked
		reached[1][630] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(755, 632, 755) */
		reached[1][632] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1101: // STATE 634 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][634] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1102: // STATE 635 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (669:0:1 - 1)
		IfNotBlocked
		reached[1][635] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(669, 636, 669) */
		reached[1][636] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(669, 637, 669) */
		reached[1][637] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1103: // STATE 653 - mutant_243.pml:336 - [.(goto)] (0:669:0 - 6)
		IfNotBlocked
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1104: // STATE 638 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (669:0:1 - 1)
		IfNotBlocked
		reached[1][638] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(669, 639, 669) */
		reached[1][639] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(669, 640, 669) */
		reached[1][640] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1105: // STATE 641 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (669:0:1 - 1)
		IfNotBlocked
		reached[1][641] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(669, 642, 669) */
		reached[1][642] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(669, 643, 669) */
		reached[1][643] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1106: // STATE 644 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (669:0:1 - 1)
		IfNotBlocked
		reached[1][644] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(669, 645, 669) */
		reached[1][645] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(669, 646, 669) */
		reached[1][646] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1107: // STATE 647 - mutant_243.pml:330 - [((PAUSE==ABORT))] (669:0:1 - 1)
		IfNotBlocked
		reached[1][647] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(669, 648, 669) */
		reached[1][648] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(669, 649, 669) */
		reached[1][649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1108: // STATE 651 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:669:0 - 1)
		IfNotBlocked
		reached[1][651] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(669, 653, 669) */
		reached[1][653] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1109: // STATE 656 - mutant_243.pml:239 - [((_pid==0))] (664:0:0 - 1)
		IfNotBlocked
		reached[1][656] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 657, 664) */
		reached[1][657] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 663, 664) */
		reached[1][663] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1110: // STATE 658 - mutant_243.pml:241 - [((_pid==1))] (664:0:0 - 1)
		IfNotBlocked
		reached[1][658] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 659, 664) */
		reached[1][659] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 663, 664) */
		reached[1][663] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1111: // STATE 660 - mutant_243.pml:243 - [((_pid>1))] (664:0:0 - 1)
		IfNotBlocked
		reached[1][660] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 661, 664) */
		reached[1][661] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 663, 664) */
		reached[1][663] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1112: // STATE 664 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][664] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1113: // STATE 665 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:755:1 - 1)
		IfNotBlocked
		reached[1][665] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(755, 670, 755) */
		reached[1][670] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1114: // STATE 668 - mutant_243.pml:341 - [(1)] (755:0:1 - 1)
		IfNotBlocked
		reached[1][668] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(755, 670, 755) */
		reached[1][670] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1115: // STATE 672 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][672] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1116: // STATE 673 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (707:0:1 - 1)
		IfNotBlocked
		reached[1][673] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(707, 674, 707) */
		reached[1][674] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(707, 675, 707) */
		reached[1][675] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1117: // STATE 691 - mutant_243.pml:365 - [.(goto)] (0:707:0 - 6)
		IfNotBlocked
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1118: // STATE 676 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (707:0:1 - 1)
		IfNotBlocked
		reached[1][676] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(707, 677, 707) */
		reached[1][677] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(707, 678, 707) */
		reached[1][678] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1119: // STATE 679 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (707:0:1 - 1)
		IfNotBlocked
		reached[1][679] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(707, 680, 707) */
		reached[1][680] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(707, 681, 707) */
		reached[1][681] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1120: // STATE 682 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (707:0:1 - 1)
		IfNotBlocked
		reached[1][682] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(707, 683, 707) */
		reached[1][683] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(707, 684, 707) */
		reached[1][684] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1121: // STATE 685 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (707:0:1 - 1)
		IfNotBlocked
		reached[1][685] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(707, 686, 707) */
		reached[1][686] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(707, 687, 707) */
		reached[1][687] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1122: // STATE 689 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:707:0 - 1)
		IfNotBlocked
		reached[1][689] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(707, 691, 707) */
		reached[1][691] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1123: // STATE 694 - mutant_243.pml:251 - [((_pid==0))] (702:0:0 - 1)
		IfNotBlocked
		reached[1][694] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 695, 702) */
		reached[1][695] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 701, 702) */
		reached[1][701] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1124: // STATE 696 - mutant_243.pml:253 - [((_pid==1))] (702:0:0 - 1)
		IfNotBlocked
		reached[1][696] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 697, 702) */
		reached[1][697] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 701, 702) */
		reached[1][701] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1125: // STATE 698 - mutant_243.pml:255 - [((_pid>1))] (702:0:0 - 1)
		IfNotBlocked
		reached[1][698] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 699, 702) */
		reached[1][699] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 701, 702) */
		reached[1][701] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1126: // STATE 702 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][702] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1127: // STATE 703 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:755:1 - 1)
		IfNotBlocked
		reached[1][703] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(755, 708, 755) */
		reached[1][708] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1128: // STATE 706 - mutant_243.pml:370 - [(1)] (755:0:1 - 1)
		IfNotBlocked
		reached[1][706] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(755, 708, 755) */
		reached[1][708] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1129: // STATE 710 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][710] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1130: // STATE 711 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (745:0:1 - 1)
		IfNotBlocked
		reached[1][711] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(745, 712, 745) */
		reached[1][712] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(745, 713, 745) */
		reached[1][713] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1131: // STATE 729 - mutant_243.pml:394 - [.(goto)] (0:745:0 - 6)
		IfNotBlocked
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1132: // STATE 714 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (745:0:1 - 1)
		IfNotBlocked
		reached[1][714] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(745, 715, 745) */
		reached[1][715] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(745, 716, 745) */
		reached[1][716] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1133: // STATE 717 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (745:0:1 - 1)
		IfNotBlocked
		reached[1][717] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(745, 718, 745) */
		reached[1][718] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(745, 719, 745) */
		reached[1][719] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1134: // STATE 720 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (745:0:1 - 1)
		IfNotBlocked
		reached[1][720] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(745, 721, 745) */
		reached[1][721] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(745, 722, 745) */
		reached[1][722] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1135: // STATE 723 - mutant_243.pml:388 - [((STOP==ABORT))] (745:0:1 - 1)
		IfNotBlocked
		reached[1][723] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(745, 724, 745) */
		reached[1][724] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(745, 725, 745) */
		reached[1][725] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1136: // STATE 727 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:745:0 - 1)
		IfNotBlocked
		reached[1][727] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(745, 729, 745) */
		reached[1][729] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1137: // STATE 732 - mutant_243.pml:263 - [((_pid==0))] (740:0:0 - 1)
		IfNotBlocked
		reached[1][732] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 733, 740) */
		reached[1][733] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 739, 740) */
		reached[1][739] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1138: // STATE 734 - mutant_243.pml:265 - [((_pid==1))] (740:0:0 - 1)
		IfNotBlocked
		reached[1][734] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 735, 740) */
		reached[1][735] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 739, 740) */
		reached[1][739] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1139: // STATE 736 - mutant_243.pml:267 - [((_pid>1))] (740:0:0 - 1)
		IfNotBlocked
		reached[1][736] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 737, 740) */
		reached[1][737] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 739, 740) */
		reached[1][739] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1140: // STATE 740 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][740] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1141: // STATE 741 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:755:1 - 1)
		IfNotBlocked
		reached[1][741] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(755, 746, 755) */
		reached[1][746] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1142: // STATE 744 - mutant_243.pml:399 - [(1)] (755:0:1 - 1)
		IfNotBlocked
		reached[1][744] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(755, 746, 755) */
		reached[1][746] = 1;
		;
		/* merge: .(goto)(755, 749, 755) */
		reached[1][749] = 1;
		;
		/* merge: j = (j+1)(755, 751, 755) */
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1143: // STATE 751 - mutant_243.pml:435 - [j = (j+1)] (0:755:1 - 13)
		IfNotBlocked
		reached[1][751] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 756, 755) */
		reached[1][756] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1144: // STATE 753 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1145: // STATE 760 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][760] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1146: // STATE 761 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][761] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1147: // STATE 762 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][762] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1148: // STATE 763 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (783:0:1 - 1)
		IfNotBlocked
		reached[1][763] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(783, 764, 783) */
		reached[1][764] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(783, 765, 783) */
		reached[1][765] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1149: // STATE 781 - mutant_243.pml:306 - [.(goto)] (0:783:0 - 6)
		IfNotBlocked
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1150: // STATE 766 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (783:0:1 - 1)
		IfNotBlocked
		reached[1][766] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(783, 767, 783) */
		reached[1][767] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(783, 768, 783) */
		reached[1][768] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1151: // STATE 769 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (783:0:1 - 1)
		IfNotBlocked
		reached[1][769] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(783, 770, 783) */
		reached[1][770] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(783, 771, 783) */
		reached[1][771] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1152: // STATE 772 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (783:0:1 - 1)
		IfNotBlocked
		reached[1][772] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(783, 773, 783) */
		reached[1][773] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(783, 774, 783) */
		reached[1][774] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1153: // STATE 775 - mutant_243.pml:300 - [((START==ABORT))] (783:0:1 - 1)
		IfNotBlocked
		reached[1][775] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(783, 776, 783) */
		reached[1][776] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(783, 777, 783) */
		reached[1][777] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1154: // STATE 779 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:783:0 - 1)
		IfNotBlocked
		reached[1][779] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(783, 781, 783) */
		reached[1][781] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1155: // STATE 783 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][783] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1156: // STATE 785 - mutant_243.pml:227 - [((_pid==0))] (793:0:0 - 1)
		IfNotBlocked
		reached[1][785] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 786, 793) */
		reached[1][786] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 792, 793) */
		reached[1][792] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1157: // STATE 787 - mutant_243.pml:229 - [((_pid==1))] (793:0:0 - 1)
		IfNotBlocked
		reached[1][787] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 788, 793) */
		reached[1][788] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 792, 793) */
		reached[1][792] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1158: // STATE 789 - mutant_243.pml:231 - [((_pid>1))] (793:0:0 - 1)
		IfNotBlocked
		reached[1][789] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 790, 793) */
		reached[1][790] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 792, 793) */
		reached[1][792] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1159: // STATE 793 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][793] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1160: // STATE 794 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:922:1 - 1)
		IfNotBlocked
		reached[1][794] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(922, 799, 922) */
		reached[1][799] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1161: // STATE 797 - mutant_243.pml:312 - [(1)] (922:0:1 - 1)
		IfNotBlocked
		reached[1][797] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(922, 799, 922) */
		reached[1][799] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1162: // STATE 801 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][801] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1163: // STATE 802 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (836:0:1 - 1)
		IfNotBlocked
		reached[1][802] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(836, 803, 836) */
		reached[1][803] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(836, 804, 836) */
		reached[1][804] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1164: // STATE 820 - mutant_243.pml:336 - [.(goto)] (0:836:0 - 6)
		IfNotBlocked
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1165: // STATE 805 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (836:0:1 - 1)
		IfNotBlocked
		reached[1][805] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(836, 806, 836) */
		reached[1][806] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(836, 807, 836) */
		reached[1][807] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1166: // STATE 808 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (836:0:1 - 1)
		IfNotBlocked
		reached[1][808] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(836, 809, 836) */
		reached[1][809] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(836, 810, 836) */
		reached[1][810] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1167: // STATE 811 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (836:0:1 - 1)
		IfNotBlocked
		reached[1][811] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(836, 812, 836) */
		reached[1][812] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(836, 813, 836) */
		reached[1][813] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1168: // STATE 814 - mutant_243.pml:330 - [((PAUSE==ABORT))] (836:0:1 - 1)
		IfNotBlocked
		reached[1][814] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(836, 815, 836) */
		reached[1][815] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(836, 816, 836) */
		reached[1][816] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1169: // STATE 818 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:836:0 - 1)
		IfNotBlocked
		reached[1][818] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(836, 820, 836) */
		reached[1][820] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1170: // STATE 823 - mutant_243.pml:239 - [((_pid==0))] (831:0:0 - 1)
		IfNotBlocked
		reached[1][823] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 824, 831) */
		reached[1][824] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 830, 831) */
		reached[1][830] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1171: // STATE 825 - mutant_243.pml:241 - [((_pid==1))] (831:0:0 - 1)
		IfNotBlocked
		reached[1][825] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 826, 831) */
		reached[1][826] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 830, 831) */
		reached[1][830] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1172: // STATE 827 - mutant_243.pml:243 - [((_pid>1))] (831:0:0 - 1)
		IfNotBlocked
		reached[1][827] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 828, 831) */
		reached[1][828] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 830, 831) */
		reached[1][830] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1173: // STATE 831 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][831] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1174: // STATE 832 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:922:1 - 1)
		IfNotBlocked
		reached[1][832] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(922, 837, 922) */
		reached[1][837] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1175: // STATE 835 - mutant_243.pml:341 - [(1)] (922:0:1 - 1)
		IfNotBlocked
		reached[1][835] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(922, 837, 922) */
		reached[1][837] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1176: // STATE 839 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][839] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1177: // STATE 840 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (874:0:1 - 1)
		IfNotBlocked
		reached[1][840] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(874, 841, 874) */
		reached[1][841] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(874, 842, 874) */
		reached[1][842] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1178: // STATE 858 - mutant_243.pml:365 - [.(goto)] (0:874:0 - 6)
		IfNotBlocked
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1179: // STATE 843 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (874:0:1 - 1)
		IfNotBlocked
		reached[1][843] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(874, 844, 874) */
		reached[1][844] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(874, 845, 874) */
		reached[1][845] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1180: // STATE 846 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (874:0:1 - 1)
		IfNotBlocked
		reached[1][846] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(874, 847, 874) */
		reached[1][847] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(874, 848, 874) */
		reached[1][848] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1181: // STATE 849 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (874:0:1 - 1)
		IfNotBlocked
		reached[1][849] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(874, 850, 874) */
		reached[1][850] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(874, 851, 874) */
		reached[1][851] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1182: // STATE 852 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (874:0:1 - 1)
		IfNotBlocked
		reached[1][852] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(874, 853, 874) */
		reached[1][853] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(874, 854, 874) */
		reached[1][854] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1183: // STATE 856 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:874:0 - 1)
		IfNotBlocked
		reached[1][856] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(874, 858, 874) */
		reached[1][858] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1184: // STATE 861 - mutant_243.pml:251 - [((_pid==0))] (869:0:0 - 1)
		IfNotBlocked
		reached[1][861] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 862, 869) */
		reached[1][862] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 868, 869) */
		reached[1][868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1185: // STATE 863 - mutant_243.pml:253 - [((_pid==1))] (869:0:0 - 1)
		IfNotBlocked
		reached[1][863] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 864, 869) */
		reached[1][864] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 868, 869) */
		reached[1][868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1186: // STATE 865 - mutant_243.pml:255 - [((_pid>1))] (869:0:0 - 1)
		IfNotBlocked
		reached[1][865] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 866, 869) */
		reached[1][866] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 868, 869) */
		reached[1][868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1187: // STATE 869 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][869] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1188: // STATE 870 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:922:1 - 1)
		IfNotBlocked
		reached[1][870] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(922, 875, 922) */
		reached[1][875] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1189: // STATE 873 - mutant_243.pml:370 - [(1)] (922:0:1 - 1)
		IfNotBlocked
		reached[1][873] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(922, 875, 922) */
		reached[1][875] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1190: // STATE 877 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][877] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1191: // STATE 878 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (912:0:1 - 1)
		IfNotBlocked
		reached[1][878] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(912, 879, 912) */
		reached[1][879] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(912, 880, 912) */
		reached[1][880] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1192: // STATE 896 - mutant_243.pml:394 - [.(goto)] (0:912:0 - 6)
		IfNotBlocked
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1193: // STATE 881 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (912:0:1 - 1)
		IfNotBlocked
		reached[1][881] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(912, 882, 912) */
		reached[1][882] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(912, 883, 912) */
		reached[1][883] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1194: // STATE 884 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (912:0:1 - 1)
		IfNotBlocked
		reached[1][884] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(912, 885, 912) */
		reached[1][885] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(912, 886, 912) */
		reached[1][886] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1195: // STATE 887 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (912:0:1 - 1)
		IfNotBlocked
		reached[1][887] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(912, 888, 912) */
		reached[1][888] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(912, 889, 912) */
		reached[1][889] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1196: // STATE 890 - mutant_243.pml:388 - [((STOP==ABORT))] (912:0:1 - 1)
		IfNotBlocked
		reached[1][890] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(912, 891, 912) */
		reached[1][891] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(912, 892, 912) */
		reached[1][892] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1197: // STATE 894 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:912:0 - 1)
		IfNotBlocked
		reached[1][894] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(912, 896, 912) */
		reached[1][896] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1198: // STATE 899 - mutant_243.pml:263 - [((_pid==0))] (907:0:0 - 1)
		IfNotBlocked
		reached[1][899] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 900, 907) */
		reached[1][900] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 906, 907) */
		reached[1][906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1199: // STATE 901 - mutant_243.pml:265 - [((_pid==1))] (907:0:0 - 1)
		IfNotBlocked
		reached[1][901] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 902, 907) */
		reached[1][902] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 906, 907) */
		reached[1][906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1200: // STATE 903 - mutant_243.pml:267 - [((_pid>1))] (907:0:0 - 1)
		IfNotBlocked
		reached[1][903] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 904, 907) */
		reached[1][904] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 906, 907) */
		reached[1][906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1201: // STATE 907 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][907] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1202: // STATE 908 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:922:1 - 1)
		IfNotBlocked
		reached[1][908] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(922, 913, 922) */
		reached[1][913] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1203: // STATE 911 - mutant_243.pml:399 - [(1)] (922:0:1 - 1)
		IfNotBlocked
		reached[1][911] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(922, 913, 922) */
		reached[1][913] = 1;
		;
		/* merge: .(goto)(922, 916, 922) */
		reached[1][916] = 1;
		;
		/* merge: j = (j-1)(922, 918, 922) */
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1204: // STATE 918 - mutant_243.pml:446 - [j = (j-1)] (0:922:1 - 13)
		IfNotBlocked
		reached[1][918] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 923, 922) */
		reached[1][923] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1205: // STATE 920 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][920] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1206: // STATE 930 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][930] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 1207: // STATE 931 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][931] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1208: // STATE 932 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][932] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1209: // STATE 933 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (953:0:1 - 1)
		IfNotBlocked
		reached[1][933] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(953, 934, 953) */
		reached[1][934] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(953, 935, 953) */
		reached[1][935] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1210: // STATE 951 - mutant_243.pml:306 - [.(goto)] (0:953:0 - 6)
		IfNotBlocked
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1211: // STATE 936 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (953:0:1 - 1)
		IfNotBlocked
		reached[1][936] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(953, 937, 953) */
		reached[1][937] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(953, 938, 953) */
		reached[1][938] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1212: // STATE 939 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (953:0:1 - 1)
		IfNotBlocked
		reached[1][939] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(953, 940, 953) */
		reached[1][940] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(953, 941, 953) */
		reached[1][941] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1213: // STATE 942 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (953:0:1 - 1)
		IfNotBlocked
		reached[1][942] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(953, 943, 953) */
		reached[1][943] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(953, 944, 953) */
		reached[1][944] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1214: // STATE 945 - mutant_243.pml:300 - [((START==ABORT))] (953:0:1 - 1)
		IfNotBlocked
		reached[1][945] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(953, 946, 953) */
		reached[1][946] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(953, 947, 953) */
		reached[1][947] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1215: // STATE 949 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:953:0 - 1)
		IfNotBlocked
		reached[1][949] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(953, 951, 953) */
		reached[1][951] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1216: // STATE 953 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][953] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1217: // STATE 955 - mutant_243.pml:227 - [((_pid==0))] (963:0:0 - 1)
		IfNotBlocked
		reached[1][955] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 956, 963) */
		reached[1][956] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 962, 963) */
		reached[1][962] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1218: // STATE 957 - mutant_243.pml:229 - [((_pid==1))] (963:0:0 - 1)
		IfNotBlocked
		reached[1][957] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 958, 963) */
		reached[1][958] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 962, 963) */
		reached[1][962] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1219: // STATE 959 - mutant_243.pml:231 - [((_pid>1))] (963:0:0 - 1)
		IfNotBlocked
		reached[1][959] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 960, 963) */
		reached[1][960] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 962, 963) */
		reached[1][962] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1220: // STATE 963 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][963] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1221: // STATE 964 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1092:1 - 1)
		IfNotBlocked
		reached[1][964] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1092, 969, 1092) */
		reached[1][969] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1222: // STATE 967 - mutant_243.pml:312 - [(1)] (1092:0:1 - 1)
		IfNotBlocked
		reached[1][967] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1092, 969, 1092) */
		reached[1][969] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1223: // STATE 971 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][971] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1224: // STATE 972 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1006:0:1 - 1)
		IfNotBlocked
		reached[1][972] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1006, 973, 1006) */
		reached[1][973] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1006, 974, 1006) */
		reached[1][974] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1225: // STATE 990 - mutant_243.pml:336 - [.(goto)] (0:1006:0 - 6)
		IfNotBlocked
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1226: // STATE 975 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1006:0:1 - 1)
		IfNotBlocked
		reached[1][975] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1006, 976, 1006) */
		reached[1][976] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1006, 977, 1006) */
		reached[1][977] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1227: // STATE 978 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1006:0:1 - 1)
		IfNotBlocked
		reached[1][978] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1006, 979, 1006) */
		reached[1][979] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1006, 980, 1006) */
		reached[1][980] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1228: // STATE 981 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1006:0:1 - 1)
		IfNotBlocked
		reached[1][981] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1006, 982, 1006) */
		reached[1][982] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1006, 983, 1006) */
		reached[1][983] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1229: // STATE 984 - mutant_243.pml:330 - [((PAUSE==ABORT))] (1006:0:1 - 1)
		IfNotBlocked
		reached[1][984] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1006, 985, 1006) */
		reached[1][985] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1006, 986, 1006) */
		reached[1][986] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1230: // STATE 988 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1006:0 - 1)
		IfNotBlocked
		reached[1][988] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1006, 990, 1006) */
		reached[1][990] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1231: // STATE 993 - mutant_243.pml:239 - [((_pid==0))] (1001:0:0 - 1)
		IfNotBlocked
		reached[1][993] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 994, 1001) */
		reached[1][994] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1000, 1001) */
		reached[1][1000] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1232: // STATE 995 - mutant_243.pml:241 - [((_pid==1))] (1001:0:0 - 1)
		IfNotBlocked
		reached[1][995] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 996, 1001) */
		reached[1][996] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1000, 1001) */
		reached[1][1000] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1233: // STATE 997 - mutant_243.pml:243 - [((_pid>1))] (1001:0:0 - 1)
		IfNotBlocked
		reached[1][997] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 998, 1001) */
		reached[1][998] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1000, 1001) */
		reached[1][1000] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1234: // STATE 1001 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1001] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1235: // STATE 1002 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1092:1 - 1)
		IfNotBlocked
		reached[1][1002] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1092, 1007, 1092) */
		reached[1][1007] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1236: // STATE 1005 - mutant_243.pml:341 - [(1)] (1092:0:1 - 1)
		IfNotBlocked
		reached[1][1005] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1092, 1007, 1092) */
		reached[1][1007] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1237: // STATE 1009 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1009] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1238: // STATE 1010 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1044:0:1 - 1)
		IfNotBlocked
		reached[1][1010] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1044, 1011, 1044) */
		reached[1][1011] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1044, 1012, 1044) */
		reached[1][1012] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1239: // STATE 1028 - mutant_243.pml:365 - [.(goto)] (0:1044:0 - 6)
		IfNotBlocked
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1240: // STATE 1013 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1044:0:1 - 1)
		IfNotBlocked
		reached[1][1013] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1044, 1014, 1044) */
		reached[1][1014] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1044, 1015, 1044) */
		reached[1][1015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1241: // STATE 1016 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1044:0:1 - 1)
		IfNotBlocked
		reached[1][1016] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1044, 1017, 1044) */
		reached[1][1017] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1044, 1018, 1044) */
		reached[1][1018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1242: // STATE 1019 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1044:0:1 - 1)
		IfNotBlocked
		reached[1][1019] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1044, 1020, 1044) */
		reached[1][1020] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1044, 1021, 1044) */
		reached[1][1021] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1243: // STATE 1022 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (1044:0:1 - 1)
		IfNotBlocked
		reached[1][1022] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1044, 1023, 1044) */
		reached[1][1023] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1044, 1024, 1044) */
		reached[1][1024] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1244: // STATE 1026 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1044:0 - 1)
		IfNotBlocked
		reached[1][1026] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1044, 1028, 1044) */
		reached[1][1028] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1245: // STATE 1031 - mutant_243.pml:251 - [((_pid==0))] (1039:0:0 - 1)
		IfNotBlocked
		reached[1][1031] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1032, 1039) */
		reached[1][1032] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1038, 1039) */
		reached[1][1038] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1246: // STATE 1033 - mutant_243.pml:253 - [((_pid==1))] (1039:0:0 - 1)
		IfNotBlocked
		reached[1][1033] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1034, 1039) */
		reached[1][1034] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1038, 1039) */
		reached[1][1038] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1247: // STATE 1035 - mutant_243.pml:255 - [((_pid>1))] (1039:0:0 - 1)
		IfNotBlocked
		reached[1][1035] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1036, 1039) */
		reached[1][1036] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1038, 1039) */
		reached[1][1038] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1248: // STATE 1039 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1039] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1249: // STATE 1040 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1092:1 - 1)
		IfNotBlocked
		reached[1][1040] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1092, 1045, 1092) */
		reached[1][1045] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1250: // STATE 1043 - mutant_243.pml:370 - [(1)] (1092:0:1 - 1)
		IfNotBlocked
		reached[1][1043] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1092, 1045, 1092) */
		reached[1][1045] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1251: // STATE 1047 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1047] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1252: // STATE 1048 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1082:0:1 - 1)
		IfNotBlocked
		reached[1][1048] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1082, 1049, 1082) */
		reached[1][1049] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1082, 1050, 1082) */
		reached[1][1050] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1253: // STATE 1066 - mutant_243.pml:394 - [.(goto)] (0:1082:0 - 6)
		IfNotBlocked
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1254: // STATE 1051 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1082:0:1 - 1)
		IfNotBlocked
		reached[1][1051] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1082, 1052, 1082) */
		reached[1][1052] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1082, 1053, 1082) */
		reached[1][1053] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1255: // STATE 1054 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1082:0:1 - 1)
		IfNotBlocked
		reached[1][1054] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1082, 1055, 1082) */
		reached[1][1055] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1082, 1056, 1082) */
		reached[1][1056] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1256: // STATE 1057 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1082:0:1 - 1)
		IfNotBlocked
		reached[1][1057] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1082, 1058, 1082) */
		reached[1][1058] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1082, 1059, 1082) */
		reached[1][1059] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1257: // STATE 1060 - mutant_243.pml:388 - [((STOP==ABORT))] (1082:0:1 - 1)
		IfNotBlocked
		reached[1][1060] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1082, 1061, 1082) */
		reached[1][1061] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1082, 1062, 1082) */
		reached[1][1062] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1258: // STATE 1064 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1082:0 - 1)
		IfNotBlocked
		reached[1][1064] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1082, 1066, 1082) */
		reached[1][1066] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1259: // STATE 1069 - mutant_243.pml:263 - [((_pid==0))] (1077:0:0 - 1)
		IfNotBlocked
		reached[1][1069] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1070, 1077) */
		reached[1][1070] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1076, 1077) */
		reached[1][1076] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1260: // STATE 1071 - mutant_243.pml:265 - [((_pid==1))] (1077:0:0 - 1)
		IfNotBlocked
		reached[1][1071] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1072, 1077) */
		reached[1][1072] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1076, 1077) */
		reached[1][1076] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1261: // STATE 1073 - mutant_243.pml:267 - [((_pid>1))] (1077:0:0 - 1)
		IfNotBlocked
		reached[1][1073] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1074, 1077) */
		reached[1][1074] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1076, 1077) */
		reached[1][1076] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1262: // STATE 1077 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1077] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1263: // STATE 1078 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1092:1 - 1)
		IfNotBlocked
		reached[1][1078] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1092, 1083, 1092) */
		reached[1][1083] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1264: // STATE 1081 - mutant_243.pml:399 - [(1)] (1092:0:1 - 1)
		IfNotBlocked
		reached[1][1081] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1092, 1083, 1092) */
		reached[1][1083] = 1;
		;
		/* merge: .(goto)(1092, 1086, 1092) */
		reached[1][1086] = 1;
		;
		/* merge: j = (j+1)(1092, 1088, 1092) */
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1265: // STATE 1088 - mutant_243.pml:435 - [j = (j+1)] (0:1092:1 - 13)
		IfNotBlocked
		reached[1][1088] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1093, 1092) */
		reached[1][1093] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1266: // STATE 1090 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1090] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1267: // STATE 1096 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1096] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1268: // STATE 1097 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1097] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1269: // STATE 1098 - mutant_243.pml:227 - [((_pid==0))] (1106:0:0 - 1)
		IfNotBlocked
		reached[1][1098] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1099, 1106) */
		reached[1][1099] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1105, 1106) */
		reached[1][1105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1270: // STATE 1100 - mutant_243.pml:229 - [((_pid==1))] (1106:0:0 - 1)
		IfNotBlocked
		reached[1][1100] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1101, 1106) */
		reached[1][1101] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1105, 1106) */
		reached[1][1105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1271: // STATE 1102 - mutant_243.pml:231 - [((_pid>1))] (1106:0:0 - 1)
		IfNotBlocked
		reached[1][1102] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1103, 1106) */
		reached[1][1103] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1105, 1106) */
		reached[1][1105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1272: // STATE 1106 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1106] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1273: // STATE 1107 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1151:1 - 1)
		IfNotBlocked
		reached[1][1107] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1151, 1146, 1151) */
		reached[1][1146] = 1;
		;
		/* merge: j = (j+1)(1151, 1147, 1151) */
		reached[1][1147] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1152, 1151) */
		reached[1][1152] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1274: // STATE 1109 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1109] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1275: // STATE 1110 - mutant_243.pml:251 - [((_pid==0))] (1118:0:0 - 1)
		IfNotBlocked
		reached[1][1110] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1111, 1118) */
		reached[1][1111] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1117, 1118) */
		reached[1][1117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1276: // STATE 1112 - mutant_243.pml:253 - [((_pid==1))] (1118:0:0 - 1)
		IfNotBlocked
		reached[1][1112] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1113, 1118) */
		reached[1][1113] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1117, 1118) */
		reached[1][1117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1277: // STATE 1114 - mutant_243.pml:255 - [((_pid>1))] (1118:0:0 - 1)
		IfNotBlocked
		reached[1][1114] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1115, 1118) */
		reached[1][1115] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1117, 1118) */
		reached[1][1117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1278: // STATE 1118 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1118] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1279: // STATE 1119 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1151:1 - 1)
		IfNotBlocked
		reached[1][1119] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1151, 1146, 1151) */
		reached[1][1146] = 1;
		;
		/* merge: j = (j+1)(1151, 1147, 1151) */
		reached[1][1147] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1152, 1151) */
		reached[1][1152] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1280: // STATE 1121 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1121] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1281: // STATE 1122 - mutant_243.pml:239 - [((_pid==0))] (1130:0:0 - 1)
		IfNotBlocked
		reached[1][1122] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1123, 1130) */
		reached[1][1123] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1129, 1130) */
		reached[1][1129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1282: // STATE 1124 - mutant_243.pml:241 - [((_pid==1))] (1130:0:0 - 1)
		IfNotBlocked
		reached[1][1124] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1125, 1130) */
		reached[1][1125] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1129, 1130) */
		reached[1][1129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1283: // STATE 1126 - mutant_243.pml:243 - [((_pid>1))] (1130:0:0 - 1)
		IfNotBlocked
		reached[1][1126] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1127, 1130) */
		reached[1][1127] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1129, 1130) */
		reached[1][1129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1284: // STATE 1130 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1130] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1285: // STATE 1131 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1151:1 - 1)
		IfNotBlocked
		reached[1][1131] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1151, 1146, 1151) */
		reached[1][1146] = 1;
		;
		/* merge: j = (j+1)(1151, 1147, 1151) */
		reached[1][1147] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1152, 1151) */
		reached[1][1152] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1286: // STATE 1133 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1133] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1287: // STATE 1134 - mutant_243.pml:263 - [((_pid==0))] (1142:0:0 - 1)
		IfNotBlocked
		reached[1][1134] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1135, 1142) */
		reached[1][1135] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1141, 1142) */
		reached[1][1141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1288: // STATE 1136 - mutant_243.pml:265 - [((_pid==1))] (1142:0:0 - 1)
		IfNotBlocked
		reached[1][1136] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1137, 1142) */
		reached[1][1137] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1141, 1142) */
		reached[1][1141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1289: // STATE 1138 - mutant_243.pml:267 - [((_pid>1))] (1142:0:0 - 1)
		IfNotBlocked
		reached[1][1138] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1139, 1142) */
		reached[1][1139] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1141, 1142) */
		reached[1][1141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1290: // STATE 1142 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1142] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1291: // STATE 1143 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1151:1 - 1)
		IfNotBlocked
		reached[1][1143] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1151, 1146, 1151) */
		reached[1][1146] = 1;
		;
		/* merge: j = (j+1)(1151, 1147, 1151) */
		reached[1][1147] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1152, 1151) */
		reached[1][1152] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1292: // STATE 1147 - mutant_243.pml:475 - [j = (j+1)] (0:1151:1 - 5)
		IfNotBlocked
		reached[1][1147] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1152, 1151) */
		reached[1][1152] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1293: // STATE 1149 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1149] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1294: // STATE 1160 - mutant_243.pml:556 - [(((2==ABORTING)||(2==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1160] = 1;
		if (!(((2==10)||(2==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1295: // STATE 1161 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1161] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1296: // STATE 1162 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1162] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 1297: // STATE 1163 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1163] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1298: // STATE 1165 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1165] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1299: // STATE 1166 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1166] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1300: // STATE 1167 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1167] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1301: // STATE 1168 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1168] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1302: // STATE 1169 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (1189:0:1 - 1)
		IfNotBlocked
		reached[1][1169] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1189, 1170, 1189) */
		reached[1][1170] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1189, 1171, 1189) */
		reached[1][1171] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1303: // STATE 1187 - mutant_243.pml:306 - [.(goto)] (0:1189:0 - 6)
		IfNotBlocked
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1304: // STATE 1172 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1189:0:1 - 1)
		IfNotBlocked
		reached[1][1172] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1189, 1173, 1189) */
		reached[1][1173] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1189, 1174, 1189) */
		reached[1][1174] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1305: // STATE 1175 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1189:0:1 - 1)
		IfNotBlocked
		reached[1][1175] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1189, 1176, 1189) */
		reached[1][1176] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1189, 1177, 1189) */
		reached[1][1177] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1306: // STATE 1178 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1189:0:1 - 1)
		IfNotBlocked
		reached[1][1178] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1189, 1179, 1189) */
		reached[1][1179] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1189, 1180, 1189) */
		reached[1][1180] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1307: // STATE 1181 - mutant_243.pml:300 - [((START==ABORT))] (1189:0:1 - 1)
		IfNotBlocked
		reached[1][1181] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1189, 1182, 1189) */
		reached[1][1182] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1189, 1183, 1189) */
		reached[1][1183] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1308: // STATE 1185 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1189:0 - 1)
		IfNotBlocked
		reached[1][1185] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1189, 1187, 1189) */
		reached[1][1187] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1309: // STATE 1189 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1189] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1310: // STATE 1191 - mutant_243.pml:227 - [((_pid==0))] (1199:0:0 - 1)
		IfNotBlocked
		reached[1][1191] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1192, 1199) */
		reached[1][1192] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1198, 1199) */
		reached[1][1198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1311: // STATE 1193 - mutant_243.pml:229 - [((_pid==1))] (1199:0:0 - 1)
		IfNotBlocked
		reached[1][1193] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1194, 1199) */
		reached[1][1194] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1198, 1199) */
		reached[1][1198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1312: // STATE 1195 - mutant_243.pml:231 - [((_pid>1))] (1199:0:0 - 1)
		IfNotBlocked
		reached[1][1195] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1196, 1199) */
		reached[1][1196] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1198, 1199) */
		reached[1][1198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1313: // STATE 1199 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1199] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1314: // STATE 1200 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1328:1 - 1)
		IfNotBlocked
		reached[1][1200] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1328, 1205, 1328) */
		reached[1][1205] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1315: // STATE 1203 - mutant_243.pml:312 - [(1)] (1328:0:1 - 1)
		IfNotBlocked
		reached[1][1203] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1328, 1205, 1328) */
		reached[1][1205] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1316: // STATE 1207 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1207] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1317: // STATE 1208 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1208] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1242, 1209, 1242) */
		reached[1][1209] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1242, 1210, 1242) */
		reached[1][1210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1318: // STATE 1226 - mutant_243.pml:336 - [.(goto)] (0:1242:0 - 6)
		IfNotBlocked
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1319: // STATE 1211 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1211] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1242, 1212, 1242) */
		reached[1][1212] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1242, 1213, 1242) */
		reached[1][1213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1320: // STATE 1214 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1214] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1242, 1215, 1242) */
		reached[1][1215] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1242, 1216, 1242) */
		reached[1][1216] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1321: // STATE 1217 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1217] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1242, 1218, 1242) */
		reached[1][1218] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1242, 1219, 1242) */
		reached[1][1219] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1322: // STATE 1220 - mutant_243.pml:330 - [((PAUSE==ABORT))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1220] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1242, 1221, 1242) */
		reached[1][1221] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1242, 1222, 1242) */
		reached[1][1222] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1323: // STATE 1224 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1242:0 - 1)
		IfNotBlocked
		reached[1][1224] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1242, 1226, 1242) */
		reached[1][1226] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1324: // STATE 1229 - mutant_243.pml:239 - [((_pid==0))] (1237:0:0 - 1)
		IfNotBlocked
		reached[1][1229] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1230, 1237) */
		reached[1][1230] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1236, 1237) */
		reached[1][1236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1325: // STATE 1231 - mutant_243.pml:241 - [((_pid==1))] (1237:0:0 - 1)
		IfNotBlocked
		reached[1][1231] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1232, 1237) */
		reached[1][1232] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1236, 1237) */
		reached[1][1236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1326: // STATE 1233 - mutant_243.pml:243 - [((_pid>1))] (1237:0:0 - 1)
		IfNotBlocked
		reached[1][1233] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1234, 1237) */
		reached[1][1234] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1236, 1237) */
		reached[1][1236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1327: // STATE 1237 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1237] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1328: // STATE 1238 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1328:1 - 1)
		IfNotBlocked
		reached[1][1238] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1328, 1243, 1328) */
		reached[1][1243] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1329: // STATE 1241 - mutant_243.pml:341 - [(1)] (1328:0:1 - 1)
		IfNotBlocked
		reached[1][1241] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1328, 1243, 1328) */
		reached[1][1243] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1330: // STATE 1245 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1245] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1331: // STATE 1246 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1280:0:1 - 1)
		IfNotBlocked
		reached[1][1246] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1280, 1247, 1280) */
		reached[1][1247] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1280, 1248, 1280) */
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1332: // STATE 1264 - mutant_243.pml:365 - [.(goto)] (0:1280:0 - 6)
		IfNotBlocked
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1333: // STATE 1249 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1280:0:1 - 1)
		IfNotBlocked
		reached[1][1249] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1280, 1250, 1280) */
		reached[1][1250] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1280, 1251, 1280) */
		reached[1][1251] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1334: // STATE 1252 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1280:0:1 - 1)
		IfNotBlocked
		reached[1][1252] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1280, 1253, 1280) */
		reached[1][1253] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1280, 1254, 1280) */
		reached[1][1254] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1335: // STATE 1255 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1280:0:1 - 1)
		IfNotBlocked
		reached[1][1255] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1280, 1256, 1280) */
		reached[1][1256] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1280, 1257, 1280) */
		reached[1][1257] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1336: // STATE 1258 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (1280:0:1 - 1)
		IfNotBlocked
		reached[1][1258] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1280, 1259, 1280) */
		reached[1][1259] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1280, 1260, 1280) */
		reached[1][1260] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1337: // STATE 1262 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1280:0 - 1)
		IfNotBlocked
		reached[1][1262] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1280, 1264, 1280) */
		reached[1][1264] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1338: // STATE 1267 - mutant_243.pml:251 - [((_pid==0))] (1275:0:0 - 1)
		IfNotBlocked
		reached[1][1267] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1268, 1275) */
		reached[1][1268] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1274, 1275) */
		reached[1][1274] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1339: // STATE 1269 - mutant_243.pml:253 - [((_pid==1))] (1275:0:0 - 1)
		IfNotBlocked
		reached[1][1269] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1270, 1275) */
		reached[1][1270] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1274, 1275) */
		reached[1][1274] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1340: // STATE 1271 - mutant_243.pml:255 - [((_pid>1))] (1275:0:0 - 1)
		IfNotBlocked
		reached[1][1271] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1272, 1275) */
		reached[1][1272] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1274, 1275) */
		reached[1][1274] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1341: // STATE 1275 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1275] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1342: // STATE 1276 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1328:1 - 1)
		IfNotBlocked
		reached[1][1276] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1328, 1281, 1328) */
		reached[1][1281] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1343: // STATE 1279 - mutant_243.pml:370 - [(1)] (1328:0:1 - 1)
		IfNotBlocked
		reached[1][1279] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1328, 1281, 1328) */
		reached[1][1281] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1344: // STATE 1283 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1283] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1345: // STATE 1284 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1318:0:1 - 1)
		IfNotBlocked
		reached[1][1284] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1318, 1285, 1318) */
		reached[1][1285] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1318, 1286, 1318) */
		reached[1][1286] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1346: // STATE 1302 - mutant_243.pml:394 - [.(goto)] (0:1318:0 - 6)
		IfNotBlocked
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1347: // STATE 1287 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1318:0:1 - 1)
		IfNotBlocked
		reached[1][1287] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1318, 1288, 1318) */
		reached[1][1288] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1318, 1289, 1318) */
		reached[1][1289] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1348: // STATE 1290 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1318:0:1 - 1)
		IfNotBlocked
		reached[1][1290] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1318, 1291, 1318) */
		reached[1][1291] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1318, 1292, 1318) */
		reached[1][1292] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1349: // STATE 1293 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1318:0:1 - 1)
		IfNotBlocked
		reached[1][1293] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1318, 1294, 1318) */
		reached[1][1294] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1318, 1295, 1318) */
		reached[1][1295] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1350: // STATE 1296 - mutant_243.pml:388 - [((STOP==ABORT))] (1318:0:1 - 1)
		IfNotBlocked
		reached[1][1296] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1318, 1297, 1318) */
		reached[1][1297] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1318, 1298, 1318) */
		reached[1][1298] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1351: // STATE 1300 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1318:0 - 1)
		IfNotBlocked
		reached[1][1300] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1318, 1302, 1318) */
		reached[1][1302] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1352: // STATE 1305 - mutant_243.pml:263 - [((_pid==0))] (1313:0:0 - 1)
		IfNotBlocked
		reached[1][1305] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1306, 1313) */
		reached[1][1306] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1312, 1313) */
		reached[1][1312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1353: // STATE 1307 - mutant_243.pml:265 - [((_pid==1))] (1313:0:0 - 1)
		IfNotBlocked
		reached[1][1307] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1308, 1313) */
		reached[1][1308] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1312, 1313) */
		reached[1][1312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1354: // STATE 1309 - mutant_243.pml:267 - [((_pid>1))] (1313:0:0 - 1)
		IfNotBlocked
		reached[1][1309] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1310, 1313) */
		reached[1][1310] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1312, 1313) */
		reached[1][1312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1355: // STATE 1313 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1313] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1356: // STATE 1314 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1328:1 - 1)
		IfNotBlocked
		reached[1][1314] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1328, 1319, 1328) */
		reached[1][1319] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1357: // STATE 1317 - mutant_243.pml:399 - [(1)] (1328:0:1 - 1)
		IfNotBlocked
		reached[1][1317] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1328, 1319, 1328) */
		reached[1][1319] = 1;
		;
		/* merge: .(goto)(1328, 1322, 1328) */
		reached[1][1322] = 1;
		;
		/* merge: j = (j+1)(1328, 1324, 1328) */
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1358: // STATE 1324 - mutant_243.pml:435 - [j = (j+1)] (0:1328:1 - 13)
		IfNotBlocked
		reached[1][1324] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1329, 1328) */
		reached[1][1329] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1359: // STATE 1326 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1360: // STATE 1333 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1333] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1361: // STATE 1334 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1334] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1362: // STATE 1335 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1335] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1363: // STATE 1336 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (1356:0:1 - 1)
		IfNotBlocked
		reached[1][1336] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1356, 1337, 1356) */
		reached[1][1337] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1356, 1338, 1356) */
		reached[1][1338] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1364: // STATE 1354 - mutant_243.pml:306 - [.(goto)] (0:1356:0 - 6)
		IfNotBlocked
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1365: // STATE 1339 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1356:0:1 - 1)
		IfNotBlocked
		reached[1][1339] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1356, 1340, 1356) */
		reached[1][1340] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1356, 1341, 1356) */
		reached[1][1341] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1366: // STATE 1342 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1356:0:1 - 1)
		IfNotBlocked
		reached[1][1342] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1356, 1343, 1356) */
		reached[1][1343] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1356, 1344, 1356) */
		reached[1][1344] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1367: // STATE 1345 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1356:0:1 - 1)
		IfNotBlocked
		reached[1][1345] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1356, 1346, 1356) */
		reached[1][1346] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1356, 1347, 1356) */
		reached[1][1347] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1368: // STATE 1348 - mutant_243.pml:300 - [((START==ABORT))] (1356:0:1 - 1)
		IfNotBlocked
		reached[1][1348] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1356, 1349, 1356) */
		reached[1][1349] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1356, 1350, 1356) */
		reached[1][1350] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1369: // STATE 1352 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1356:0 - 1)
		IfNotBlocked
		reached[1][1352] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1356, 1354, 1356) */
		reached[1][1354] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1370: // STATE 1356 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1356] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1371: // STATE 1358 - mutant_243.pml:227 - [((_pid==0))] (1366:0:0 - 1)
		IfNotBlocked
		reached[1][1358] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1359, 1366) */
		reached[1][1359] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1365, 1366) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1372: // STATE 1360 - mutant_243.pml:229 - [((_pid==1))] (1366:0:0 - 1)
		IfNotBlocked
		reached[1][1360] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1361, 1366) */
		reached[1][1361] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1365, 1366) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1373: // STATE 1362 - mutant_243.pml:231 - [((_pid>1))] (1366:0:0 - 1)
		IfNotBlocked
		reached[1][1362] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1363, 1366) */
		reached[1][1363] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1365, 1366) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1374: // STATE 1366 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1366] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1375: // STATE 1367 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1495:1 - 1)
		IfNotBlocked
		reached[1][1367] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1495, 1372, 1495) */
		reached[1][1372] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1376: // STATE 1370 - mutant_243.pml:312 - [(1)] (1495:0:1 - 1)
		IfNotBlocked
		reached[1][1370] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1495, 1372, 1495) */
		reached[1][1372] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1377: // STATE 1374 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1374] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1378: // STATE 1375 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1409:0:1 - 1)
		IfNotBlocked
		reached[1][1375] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1409, 1376, 1409) */
		reached[1][1376] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1409, 1377, 1409) */
		reached[1][1377] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1379: // STATE 1393 - mutant_243.pml:336 - [.(goto)] (0:1409:0 - 6)
		IfNotBlocked
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1380: // STATE 1378 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1409:0:1 - 1)
		IfNotBlocked
		reached[1][1378] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1409, 1379, 1409) */
		reached[1][1379] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1409, 1380, 1409) */
		reached[1][1380] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1381: // STATE 1381 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1409:0:1 - 1)
		IfNotBlocked
		reached[1][1381] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1409, 1382, 1409) */
		reached[1][1382] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1409, 1383, 1409) */
		reached[1][1383] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1382: // STATE 1384 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1409:0:1 - 1)
		IfNotBlocked
		reached[1][1384] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1409, 1385, 1409) */
		reached[1][1385] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1409, 1386, 1409) */
		reached[1][1386] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1383: // STATE 1387 - mutant_243.pml:330 - [((PAUSE==ABORT))] (1409:0:1 - 1)
		IfNotBlocked
		reached[1][1387] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1409, 1388, 1409) */
		reached[1][1388] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1409, 1389, 1409) */
		reached[1][1389] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1384: // STATE 1391 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1409:0 - 1)
		IfNotBlocked
		reached[1][1391] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1409, 1393, 1409) */
		reached[1][1393] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1385: // STATE 1396 - mutant_243.pml:239 - [((_pid==0))] (1404:0:0 - 1)
		IfNotBlocked
		reached[1][1396] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1397, 1404) */
		reached[1][1397] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1403, 1404) */
		reached[1][1403] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1386: // STATE 1398 - mutant_243.pml:241 - [((_pid==1))] (1404:0:0 - 1)
		IfNotBlocked
		reached[1][1398] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1399, 1404) */
		reached[1][1399] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1403, 1404) */
		reached[1][1403] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1387: // STATE 1400 - mutant_243.pml:243 - [((_pid>1))] (1404:0:0 - 1)
		IfNotBlocked
		reached[1][1400] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1401, 1404) */
		reached[1][1401] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1403, 1404) */
		reached[1][1403] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1388: // STATE 1404 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1404] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1389: // STATE 1405 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1495:1 - 1)
		IfNotBlocked
		reached[1][1405] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1495, 1410, 1495) */
		reached[1][1410] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1390: // STATE 1408 - mutant_243.pml:341 - [(1)] (1495:0:1 - 1)
		IfNotBlocked
		reached[1][1408] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1495, 1410, 1495) */
		reached[1][1410] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1391: // STATE 1412 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1412] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1392: // STATE 1413 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1447:0:1 - 1)
		IfNotBlocked
		reached[1][1413] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1447, 1414, 1447) */
		reached[1][1414] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1447, 1415, 1447) */
		reached[1][1415] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1393: // STATE 1431 - mutant_243.pml:365 - [.(goto)] (0:1447:0 - 6)
		IfNotBlocked
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1394: // STATE 1416 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1447:0:1 - 1)
		IfNotBlocked
		reached[1][1416] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1447, 1417, 1447) */
		reached[1][1417] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1447, 1418, 1447) */
		reached[1][1418] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1395: // STATE 1419 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1447:0:1 - 1)
		IfNotBlocked
		reached[1][1419] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1447, 1420, 1447) */
		reached[1][1420] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1447, 1421, 1447) */
		reached[1][1421] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1396: // STATE 1422 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1447:0:1 - 1)
		IfNotBlocked
		reached[1][1422] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1447, 1423, 1447) */
		reached[1][1423] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1447, 1424, 1447) */
		reached[1][1424] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1397: // STATE 1425 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (1447:0:1 - 1)
		IfNotBlocked
		reached[1][1425] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1447, 1426, 1447) */
		reached[1][1426] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1447, 1427, 1447) */
		reached[1][1427] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1398: // STATE 1429 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1447:0 - 1)
		IfNotBlocked
		reached[1][1429] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1447, 1431, 1447) */
		reached[1][1431] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1399: // STATE 1434 - mutant_243.pml:251 - [((_pid==0))] (1442:0:0 - 1)
		IfNotBlocked
		reached[1][1434] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1435, 1442) */
		reached[1][1435] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1441, 1442) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1400: // STATE 1436 - mutant_243.pml:253 - [((_pid==1))] (1442:0:0 - 1)
		IfNotBlocked
		reached[1][1436] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1437, 1442) */
		reached[1][1437] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1441, 1442) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1401: // STATE 1438 - mutant_243.pml:255 - [((_pid>1))] (1442:0:0 - 1)
		IfNotBlocked
		reached[1][1438] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1439, 1442) */
		reached[1][1439] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1441, 1442) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1402: // STATE 1442 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1442] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1403: // STATE 1443 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1495:1 - 1)
		IfNotBlocked
		reached[1][1443] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1495, 1448, 1495) */
		reached[1][1448] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1404: // STATE 1446 - mutant_243.pml:370 - [(1)] (1495:0:1 - 1)
		IfNotBlocked
		reached[1][1446] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1495, 1448, 1495) */
		reached[1][1448] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1405: // STATE 1450 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1450] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1406: // STATE 1451 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1485:0:1 - 1)
		IfNotBlocked
		reached[1][1451] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1485, 1452, 1485) */
		reached[1][1452] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1485, 1453, 1485) */
		reached[1][1453] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1407: // STATE 1469 - mutant_243.pml:394 - [.(goto)] (0:1485:0 - 6)
		IfNotBlocked
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1408: // STATE 1454 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1485:0:1 - 1)
		IfNotBlocked
		reached[1][1454] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1485, 1455, 1485) */
		reached[1][1455] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1485, 1456, 1485) */
		reached[1][1456] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1409: // STATE 1457 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1485:0:1 - 1)
		IfNotBlocked
		reached[1][1457] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1485, 1458, 1485) */
		reached[1][1458] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1485, 1459, 1485) */
		reached[1][1459] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1410: // STATE 1460 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1485:0:1 - 1)
		IfNotBlocked
		reached[1][1460] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1485, 1461, 1485) */
		reached[1][1461] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1485, 1462, 1485) */
		reached[1][1462] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1411: // STATE 1463 - mutant_243.pml:388 - [((STOP==ABORT))] (1485:0:1 - 1)
		IfNotBlocked
		reached[1][1463] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1485, 1464, 1485) */
		reached[1][1464] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1485, 1465, 1485) */
		reached[1][1465] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1412: // STATE 1467 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1485:0 - 1)
		IfNotBlocked
		reached[1][1467] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1485, 1469, 1485) */
		reached[1][1469] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1413: // STATE 1472 - mutant_243.pml:263 - [((_pid==0))] (1480:0:0 - 1)
		IfNotBlocked
		reached[1][1472] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1473, 1480) */
		reached[1][1473] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1479, 1480) */
		reached[1][1479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1414: // STATE 1474 - mutant_243.pml:265 - [((_pid==1))] (1480:0:0 - 1)
		IfNotBlocked
		reached[1][1474] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1475, 1480) */
		reached[1][1475] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1479, 1480) */
		reached[1][1479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1415: // STATE 1476 - mutant_243.pml:267 - [((_pid>1))] (1480:0:0 - 1)
		IfNotBlocked
		reached[1][1476] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1477, 1480) */
		reached[1][1477] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1479, 1480) */
		reached[1][1479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1416: // STATE 1480 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1480] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1417: // STATE 1481 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1495:1 - 1)
		IfNotBlocked
		reached[1][1481] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1495, 1486, 1495) */
		reached[1][1486] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1418: // STATE 1484 - mutant_243.pml:399 - [(1)] (1495:0:1 - 1)
		IfNotBlocked
		reached[1][1484] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1495, 1486, 1495) */
		reached[1][1486] = 1;
		;
		/* merge: .(goto)(1495, 1489, 1495) */
		reached[1][1489] = 1;
		;
		/* merge: j = (j-1)(1495, 1491, 1495) */
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1419: // STATE 1491 - mutant_243.pml:446 - [j = (j-1)] (0:1495:1 - 13)
		IfNotBlocked
		reached[1][1491] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1496, 1495) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1420: // STATE 1493 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1493] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1421: // STATE 1503 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1503] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 1422: // STATE 1504 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1504] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1423: // STATE 1505 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1505] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1424: // STATE 1506 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (1526:0:1 - 1)
		IfNotBlocked
		reached[1][1506] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1526, 1507, 1526) */
		reached[1][1507] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1526, 1508, 1526) */
		reached[1][1508] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1425: // STATE 1524 - mutant_243.pml:306 - [.(goto)] (0:1526:0 - 6)
		IfNotBlocked
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1426: // STATE 1509 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1526:0:1 - 1)
		IfNotBlocked
		reached[1][1509] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1526, 1510, 1526) */
		reached[1][1510] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1526, 1511, 1526) */
		reached[1][1511] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1427: // STATE 1512 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1526:0:1 - 1)
		IfNotBlocked
		reached[1][1512] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1526, 1513, 1526) */
		reached[1][1513] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1526, 1514, 1526) */
		reached[1][1514] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1428: // STATE 1515 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1526:0:1 - 1)
		IfNotBlocked
		reached[1][1515] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1526, 1516, 1526) */
		reached[1][1516] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1526, 1517, 1526) */
		reached[1][1517] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1429: // STATE 1518 - mutant_243.pml:300 - [((START==ABORT))] (1526:0:1 - 1)
		IfNotBlocked
		reached[1][1518] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1526, 1519, 1526) */
		reached[1][1519] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1526, 1520, 1526) */
		reached[1][1520] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1430: // STATE 1522 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1526:0 - 1)
		IfNotBlocked
		reached[1][1522] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1526, 1524, 1526) */
		reached[1][1524] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1431: // STATE 1526 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1526] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1432: // STATE 1528 - mutant_243.pml:227 - [((_pid==0))] (1536:0:0 - 1)
		IfNotBlocked
		reached[1][1528] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1529, 1536) */
		reached[1][1529] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1535, 1536) */
		reached[1][1535] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1433: // STATE 1530 - mutant_243.pml:229 - [((_pid==1))] (1536:0:0 - 1)
		IfNotBlocked
		reached[1][1530] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1531, 1536) */
		reached[1][1531] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1535, 1536) */
		reached[1][1535] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1434: // STATE 1532 - mutant_243.pml:231 - [((_pid>1))] (1536:0:0 - 1)
		IfNotBlocked
		reached[1][1532] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1533, 1536) */
		reached[1][1533] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1535, 1536) */
		reached[1][1535] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1435: // STATE 1536 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1536] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1436: // STATE 1537 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1665:1 - 1)
		IfNotBlocked
		reached[1][1537] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1665, 1542, 1665) */
		reached[1][1542] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1437: // STATE 1540 - mutant_243.pml:312 - [(1)] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1540] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1665, 1542, 1665) */
		reached[1][1542] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1438: // STATE 1544 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1544] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1439: // STATE 1545 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1579:0:1 - 1)
		IfNotBlocked
		reached[1][1545] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1579, 1546, 1579) */
		reached[1][1546] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1579, 1547, 1579) */
		reached[1][1547] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1440: // STATE 1563 - mutant_243.pml:336 - [.(goto)] (0:1579:0 - 6)
		IfNotBlocked
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1441: // STATE 1548 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1579:0:1 - 1)
		IfNotBlocked
		reached[1][1548] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1579, 1549, 1579) */
		reached[1][1549] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1579, 1550, 1579) */
		reached[1][1550] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1442: // STATE 1551 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1579:0:1 - 1)
		IfNotBlocked
		reached[1][1551] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1579, 1552, 1579) */
		reached[1][1552] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1579, 1553, 1579) */
		reached[1][1553] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1443: // STATE 1554 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1579:0:1 - 1)
		IfNotBlocked
		reached[1][1554] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1579, 1555, 1579) */
		reached[1][1555] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1579, 1556, 1579) */
		reached[1][1556] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1444: // STATE 1557 - mutant_243.pml:330 - [((PAUSE==ABORT))] (1579:0:1 - 1)
		IfNotBlocked
		reached[1][1557] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1579, 1558, 1579) */
		reached[1][1558] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1579, 1559, 1579) */
		reached[1][1559] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1445: // STATE 1561 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1579:0 - 1)
		IfNotBlocked
		reached[1][1561] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1579, 1563, 1579) */
		reached[1][1563] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1446: // STATE 1566 - mutant_243.pml:239 - [((_pid==0))] (1574:0:0 - 1)
		IfNotBlocked
		reached[1][1566] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1567, 1574) */
		reached[1][1567] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1573, 1574) */
		reached[1][1573] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1447: // STATE 1568 - mutant_243.pml:241 - [((_pid==1))] (1574:0:0 - 1)
		IfNotBlocked
		reached[1][1568] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1569, 1574) */
		reached[1][1569] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1573, 1574) */
		reached[1][1573] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1448: // STATE 1570 - mutant_243.pml:243 - [((_pid>1))] (1574:0:0 - 1)
		IfNotBlocked
		reached[1][1570] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1571, 1574) */
		reached[1][1571] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1573, 1574) */
		reached[1][1573] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1449: // STATE 1574 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1574] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1450: // STATE 1575 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1665:1 - 1)
		IfNotBlocked
		reached[1][1575] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1665, 1580, 1665) */
		reached[1][1580] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1451: // STATE 1578 - mutant_243.pml:341 - [(1)] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1578] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1665, 1580, 1665) */
		reached[1][1580] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1452: // STATE 1582 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1582] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1453: // STATE 1583 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1617:0:1 - 1)
		IfNotBlocked
		reached[1][1583] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1617, 1584, 1617) */
		reached[1][1584] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1617, 1585, 1617) */
		reached[1][1585] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1454: // STATE 1601 - mutant_243.pml:365 - [.(goto)] (0:1617:0 - 6)
		IfNotBlocked
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1455: // STATE 1586 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1617:0:1 - 1)
		IfNotBlocked
		reached[1][1586] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1617, 1587, 1617) */
		reached[1][1587] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1617, 1588, 1617) */
		reached[1][1588] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1456: // STATE 1589 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1617:0:1 - 1)
		IfNotBlocked
		reached[1][1589] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1617, 1590, 1617) */
		reached[1][1590] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1617, 1591, 1617) */
		reached[1][1591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1457: // STATE 1592 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1617:0:1 - 1)
		IfNotBlocked
		reached[1][1592] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1617, 1593, 1617) */
		reached[1][1593] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1617, 1594, 1617) */
		reached[1][1594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1458: // STATE 1595 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (1617:0:1 - 1)
		IfNotBlocked
		reached[1][1595] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1617, 1596, 1617) */
		reached[1][1596] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1617, 1597, 1617) */
		reached[1][1597] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1459: // STATE 1599 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1617:0 - 1)
		IfNotBlocked
		reached[1][1599] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1617, 1601, 1617) */
		reached[1][1601] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1460: // STATE 1604 - mutant_243.pml:251 - [((_pid==0))] (1612:0:0 - 1)
		IfNotBlocked
		reached[1][1604] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1605, 1612) */
		reached[1][1605] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1611, 1612) */
		reached[1][1611] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1461: // STATE 1606 - mutant_243.pml:253 - [((_pid==1))] (1612:0:0 - 1)
		IfNotBlocked
		reached[1][1606] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1607, 1612) */
		reached[1][1607] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1611, 1612) */
		reached[1][1611] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1462: // STATE 1608 - mutant_243.pml:255 - [((_pid>1))] (1612:0:0 - 1)
		IfNotBlocked
		reached[1][1608] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1609, 1612) */
		reached[1][1609] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1611, 1612) */
		reached[1][1611] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1463: // STATE 1612 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1612] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1464: // STATE 1613 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1665:1 - 1)
		IfNotBlocked
		reached[1][1613] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1665, 1618, 1665) */
		reached[1][1618] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1465: // STATE 1616 - mutant_243.pml:370 - [(1)] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1616] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1665, 1618, 1665) */
		reached[1][1618] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1466: // STATE 1620 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1620] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1467: // STATE 1621 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1655:0:1 - 1)
		IfNotBlocked
		reached[1][1621] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1655, 1622, 1655) */
		reached[1][1622] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1655, 1623, 1655) */
		reached[1][1623] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1468: // STATE 1639 - mutant_243.pml:394 - [.(goto)] (0:1655:0 - 6)
		IfNotBlocked
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1469: // STATE 1624 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1655:0:1 - 1)
		IfNotBlocked
		reached[1][1624] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1655, 1625, 1655) */
		reached[1][1625] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1655, 1626, 1655) */
		reached[1][1626] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1470: // STATE 1627 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1655:0:1 - 1)
		IfNotBlocked
		reached[1][1627] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1655, 1628, 1655) */
		reached[1][1628] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1655, 1629, 1655) */
		reached[1][1629] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1471: // STATE 1630 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1655:0:1 - 1)
		IfNotBlocked
		reached[1][1630] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1655, 1631, 1655) */
		reached[1][1631] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1655, 1632, 1655) */
		reached[1][1632] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1472: // STATE 1633 - mutant_243.pml:388 - [((STOP==ABORT))] (1655:0:1 - 1)
		IfNotBlocked
		reached[1][1633] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1655, 1634, 1655) */
		reached[1][1634] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1655, 1635, 1655) */
		reached[1][1635] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1473: // STATE 1637 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1655:0 - 1)
		IfNotBlocked
		reached[1][1637] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1655, 1639, 1655) */
		reached[1][1639] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1474: // STATE 1642 - mutant_243.pml:263 - [((_pid==0))] (1650:0:0 - 1)
		IfNotBlocked
		reached[1][1642] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1643, 1650) */
		reached[1][1643] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1649, 1650) */
		reached[1][1649] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1475: // STATE 1644 - mutant_243.pml:265 - [((_pid==1))] (1650:0:0 - 1)
		IfNotBlocked
		reached[1][1644] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1645, 1650) */
		reached[1][1645] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1649, 1650) */
		reached[1][1649] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1476: // STATE 1646 - mutant_243.pml:267 - [((_pid>1))] (1650:0:0 - 1)
		IfNotBlocked
		reached[1][1646] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1647, 1650) */
		reached[1][1647] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1649, 1650) */
		reached[1][1649] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1477: // STATE 1650 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1650] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1478: // STATE 1651 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1665:1 - 1)
		IfNotBlocked
		reached[1][1651] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1665, 1656, 1665) */
		reached[1][1656] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1479: // STATE 1654 - mutant_243.pml:399 - [(1)] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1654] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1665, 1656, 1665) */
		reached[1][1656] = 1;
		;
		/* merge: .(goto)(1665, 1659, 1665) */
		reached[1][1659] = 1;
		;
		/* merge: j = (j+1)(1665, 1661, 1665) */
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1480: // STATE 1661 - mutant_243.pml:435 - [j = (j+1)] (0:1665:1 - 13)
		IfNotBlocked
		reached[1][1661] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1666, 1665) */
		reached[1][1666] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1481: // STATE 1663 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1663] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1482: // STATE 1669 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1669] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1483: // STATE 1670 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1670] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1484: // STATE 1671 - mutant_243.pml:227 - [((_pid==0))] (1679:0:0 - 1)
		IfNotBlocked
		reached[1][1671] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1672, 1679) */
		reached[1][1672] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1678, 1679) */
		reached[1][1678] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1485: // STATE 1673 - mutant_243.pml:229 - [((_pid==1))] (1679:0:0 - 1)
		IfNotBlocked
		reached[1][1673] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1674, 1679) */
		reached[1][1674] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1678, 1679) */
		reached[1][1678] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1486: // STATE 1675 - mutant_243.pml:231 - [((_pid>1))] (1679:0:0 - 1)
		IfNotBlocked
		reached[1][1675] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1676, 1679) */
		reached[1][1676] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1678, 1679) */
		reached[1][1678] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1487: // STATE 1679 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1679] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1488: // STATE 1680 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1724:1 - 1)
		IfNotBlocked
		reached[1][1680] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1724, 1719, 1724) */
		reached[1][1719] = 1;
		;
		/* merge: j = (j+1)(1724, 1720, 1724) */
		reached[1][1720] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1725, 1724) */
		reached[1][1725] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1489: // STATE 1682 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1682] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1490: // STATE 1683 - mutant_243.pml:251 - [((_pid==0))] (1691:0:0 - 1)
		IfNotBlocked
		reached[1][1683] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1684, 1691) */
		reached[1][1684] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1690, 1691) */
		reached[1][1690] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1491: // STATE 1685 - mutant_243.pml:253 - [((_pid==1))] (1691:0:0 - 1)
		IfNotBlocked
		reached[1][1685] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1686, 1691) */
		reached[1][1686] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1690, 1691) */
		reached[1][1690] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1492: // STATE 1687 - mutant_243.pml:255 - [((_pid>1))] (1691:0:0 - 1)
		IfNotBlocked
		reached[1][1687] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1688, 1691) */
		reached[1][1688] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1690, 1691) */
		reached[1][1690] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1493: // STATE 1691 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1691] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1494: // STATE 1692 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1724:1 - 1)
		IfNotBlocked
		reached[1][1692] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1724, 1719, 1724) */
		reached[1][1719] = 1;
		;
		/* merge: j = (j+1)(1724, 1720, 1724) */
		reached[1][1720] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1725, 1724) */
		reached[1][1725] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1495: // STATE 1694 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1694] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1496: // STATE 1695 - mutant_243.pml:239 - [((_pid==0))] (1703:0:0 - 1)
		IfNotBlocked
		reached[1][1695] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1696, 1703) */
		reached[1][1696] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1702, 1703) */
		reached[1][1702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1497: // STATE 1697 - mutant_243.pml:241 - [((_pid==1))] (1703:0:0 - 1)
		IfNotBlocked
		reached[1][1697] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1698, 1703) */
		reached[1][1698] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1702, 1703) */
		reached[1][1702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1498: // STATE 1699 - mutant_243.pml:243 - [((_pid>1))] (1703:0:0 - 1)
		IfNotBlocked
		reached[1][1699] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1700, 1703) */
		reached[1][1700] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1702, 1703) */
		reached[1][1702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1499: // STATE 1703 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1703] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1500: // STATE 1704 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1724:1 - 1)
		IfNotBlocked
		reached[1][1704] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1724, 1719, 1724) */
		reached[1][1719] = 1;
		;
		/* merge: j = (j+1)(1724, 1720, 1724) */
		reached[1][1720] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1725, 1724) */
		reached[1][1725] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1501: // STATE 1706 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1706] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1502: // STATE 1707 - mutant_243.pml:263 - [((_pid==0))] (1715:0:0 - 1)
		IfNotBlocked
		reached[1][1707] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1708, 1715) */
		reached[1][1708] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1714, 1715) */
		reached[1][1714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1503: // STATE 1709 - mutant_243.pml:265 - [((_pid==1))] (1715:0:0 - 1)
		IfNotBlocked
		reached[1][1709] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1710, 1715) */
		reached[1][1710] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1714, 1715) */
		reached[1][1714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1504: // STATE 1711 - mutant_243.pml:267 - [((_pid>1))] (1715:0:0 - 1)
		IfNotBlocked
		reached[1][1711] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1712, 1715) */
		reached[1][1712] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1714, 1715) */
		reached[1][1714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1505: // STATE 1715 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1715] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1506: // STATE 1716 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1724:1 - 1)
		IfNotBlocked
		reached[1][1716] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1724, 1719, 1724) */
		reached[1][1719] = 1;
		;
		/* merge: j = (j+1)(1724, 1720, 1724) */
		reached[1][1720] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1725, 1724) */
		reached[1][1725] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1507: // STATE 1720 - mutant_243.pml:475 - [j = (j+1)] (0:1724:1 - 5)
		IfNotBlocked
		reached[1][1720] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1725, 1724) */
		reached[1][1725] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1508: // STATE 1722 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1509: // STATE 1739 - mutant_243.pml:609 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (2331:0:1 - 1)
		IfNotBlocked
		reached[1][1739] = 1;
		if (!(((6==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(2331, 1740, 2331) */
		reached[1][1740] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(2331, 1741, 2331) */
		reached[1][1741] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1510: // STATE 1757 - mutant_243.pml:627 - [.(goto)] (0:2331:0 - 6)
		IfNotBlocked
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1511: // STATE 1742 - mutant_243.pml:612 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (2331:0:1 - 1)
		IfNotBlocked
		reached[1][1742] = 1;
		if (!(((6==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(2331, 1743, 2331) */
		reached[1][1743] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(2331, 1744, 2331) */
		reached[1][1744] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1512: // STATE 1745 - mutant_243.pml:615 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (2331:0:1 - 1)
		IfNotBlocked
		reached[1][1745] = 1;
		if (!(((6==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(2331, 1746, 2331) */
		reached[1][1746] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(2331, 1747, 2331) */
		reached[1][1747] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1513: // STATE 1748 - mutant_243.pml:618 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (2331:0:1 - 1)
		IfNotBlocked
		reached[1][1748] = 1;
		if (!(((6==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(2331, 1749, 2331) */
		reached[1][1749] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(2331, 1750, 2331) */
		reached[1][1750] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1514: // STATE 1751 - mutant_243.pml:621 - [((CONTINUE==ABORT))] (2331:0:1 - 1)
		IfNotBlocked
		reached[1][1751] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[0]!=READY))(2331, 1752, 2331) */
		reached[1][1752] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(2331, 1753, 2331) */
		reached[1][1753] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1515: // STATE 1755 - mutant_243.pml:625 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:2331:0 - 1)
		IfNotBlocked
		reached[1][1755] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(2331, 1757, 2331) */
		reached[1][1757] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1516: // STATE 1759 - mutant_243.pml:483 - [(((5==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1759] = 1;
		if (!(((5==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1517: // STATE 1760 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1760] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 1518: // STATE 1761 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1761] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1519: // STATE 1763 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1763] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1520: // STATE 1764 - mutant_243.pml:454 - [(((5==START)||(5==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1764] = 1;
		if (!(((5==5)||(5==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1521: // STATE 1765 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1765] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1522: // STATE 1766 - mutant_243.pml:421 - [((5==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1766] = 1;
		if (!((5==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1523: // STATE 1767 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (1787:0:1 - 1)
		IfNotBlocked
		reached[1][1767] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1787, 1768, 1787) */
		reached[1][1768] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1787, 1769, 1787) */
		reached[1][1769] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1524: // STATE 1785 - mutant_243.pml:306 - [.(goto)] (0:1787:0 - 6)
		IfNotBlocked
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1525: // STATE 1770 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1787:0:1 - 1)
		IfNotBlocked
		reached[1][1770] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1787, 1771, 1787) */
		reached[1][1771] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1787, 1772, 1787) */
		reached[1][1772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1526: // STATE 1773 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1787:0:1 - 1)
		IfNotBlocked
		reached[1][1773] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1787, 1774, 1787) */
		reached[1][1774] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1787, 1775, 1787) */
		reached[1][1775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1527: // STATE 1776 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1787:0:1 - 1)
		IfNotBlocked
		reached[1][1776] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1787, 1777, 1787) */
		reached[1][1777] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1787, 1778, 1787) */
		reached[1][1778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1528: // STATE 1779 - mutant_243.pml:300 - [((START==ABORT))] (1787:0:1 - 1)
		IfNotBlocked
		reached[1][1779] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1787, 1780, 1787) */
		reached[1][1780] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1787, 1781, 1787) */
		reached[1][1781] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1529: // STATE 1783 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1787:0 - 1)
		IfNotBlocked
		reached[1][1783] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1787, 1785, 1787) */
		reached[1][1785] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1530: // STATE 1787 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1787] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1531: // STATE 1789 - mutant_243.pml:227 - [((_pid==0))] (1797:0:0 - 1)
		IfNotBlocked
		reached[1][1789] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1790, 1797) */
		reached[1][1790] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1796, 1797) */
		reached[1][1796] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1532: // STATE 1791 - mutant_243.pml:229 - [((_pid==1))] (1797:0:0 - 1)
		IfNotBlocked
		reached[1][1791] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1792, 1797) */
		reached[1][1792] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1796, 1797) */
		reached[1][1796] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1533: // STATE 1793 - mutant_243.pml:231 - [((_pid>1))] (1797:0:0 - 1)
		IfNotBlocked
		reached[1][1793] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1794, 1797) */
		reached[1][1794] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1796, 1797) */
		reached[1][1796] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1534: // STATE 1797 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1797] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1535: // STATE 1798 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:1926:1 - 1)
		IfNotBlocked
		reached[1][1798] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1926, 1803, 1926) */
		reached[1][1803] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1536: // STATE 1801 - mutant_243.pml:312 - [(1)] (1926:0:1 - 1)
		IfNotBlocked
		reached[1][1801] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1926, 1803, 1926) */
		reached[1][1803] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1537: // STATE 1805 - mutant_243.pml:423 - [((5==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1805] = 1;
		if (!((5==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1538: // STATE 1806 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1840:0:1 - 1)
		IfNotBlocked
		reached[1][1806] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1840, 1807, 1840) */
		reached[1][1807] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1840, 1808, 1840) */
		reached[1][1808] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1539: // STATE 1824 - mutant_243.pml:336 - [.(goto)] (0:1840:0 - 6)
		IfNotBlocked
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1540: // STATE 1809 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1840:0:1 - 1)
		IfNotBlocked
		reached[1][1809] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1840, 1810, 1840) */
		reached[1][1810] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1840, 1811, 1840) */
		reached[1][1811] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1541: // STATE 1812 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1840:0:1 - 1)
		IfNotBlocked
		reached[1][1812] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1840, 1813, 1840) */
		reached[1][1813] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1840, 1814, 1840) */
		reached[1][1814] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1542: // STATE 1815 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1840:0:1 - 1)
		IfNotBlocked
		reached[1][1815] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1840, 1816, 1840) */
		reached[1][1816] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1840, 1817, 1840) */
		reached[1][1817] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1543: // STATE 1818 - mutant_243.pml:330 - [((PAUSE==ABORT))] (1840:0:1 - 1)
		IfNotBlocked
		reached[1][1818] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1840, 1819, 1840) */
		reached[1][1819] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1840, 1820, 1840) */
		reached[1][1820] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1544: // STATE 1822 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1840:0 - 1)
		IfNotBlocked
		reached[1][1822] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1840, 1824, 1840) */
		reached[1][1824] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1545: // STATE 1827 - mutant_243.pml:239 - [((_pid==0))] (1835:0:0 - 1)
		IfNotBlocked
		reached[1][1827] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1828, 1835) */
		reached[1][1828] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1834, 1835) */
		reached[1][1834] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1546: // STATE 1829 - mutant_243.pml:241 - [((_pid==1))] (1835:0:0 - 1)
		IfNotBlocked
		reached[1][1829] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1830, 1835) */
		reached[1][1830] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1834, 1835) */
		reached[1][1834] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1547: // STATE 1831 - mutant_243.pml:243 - [((_pid>1))] (1835:0:0 - 1)
		IfNotBlocked
		reached[1][1831] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1832, 1835) */
		reached[1][1832] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1834, 1835) */
		reached[1][1834] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1548: // STATE 1835 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1835] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1549: // STATE 1836 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:1926:1 - 1)
		IfNotBlocked
		reached[1][1836] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1926, 1841, 1926) */
		reached[1][1841] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1550: // STATE 1839 - mutant_243.pml:341 - [(1)] (1926:0:1 - 1)
		IfNotBlocked
		reached[1][1839] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1926, 1841, 1926) */
		reached[1][1841] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1551: // STATE 1843 - mutant_243.pml:425 - [((5==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1843] = 1;
		if (!((5==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1552: // STATE 1844 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1878:0:1 - 1)
		IfNotBlocked
		reached[1][1844] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1878, 1845, 1878) */
		reached[1][1845] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1878, 1846, 1878) */
		reached[1][1846] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1553: // STATE 1862 - mutant_243.pml:365 - [.(goto)] (0:1878:0 - 6)
		IfNotBlocked
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1554: // STATE 1847 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1878:0:1 - 1)
		IfNotBlocked
		reached[1][1847] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1878, 1848, 1878) */
		reached[1][1848] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1878, 1849, 1878) */
		reached[1][1849] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1555: // STATE 1850 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1878:0:1 - 1)
		IfNotBlocked
		reached[1][1850] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1878, 1851, 1878) */
		reached[1][1851] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1878, 1852, 1878) */
		reached[1][1852] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1556: // STATE 1853 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1878:0:1 - 1)
		IfNotBlocked
		reached[1][1853] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1878, 1854, 1878) */
		reached[1][1854] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1878, 1855, 1878) */
		reached[1][1855] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1557: // STATE 1856 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (1878:0:1 - 1)
		IfNotBlocked
		reached[1][1856] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1878, 1857, 1878) */
		reached[1][1857] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1878, 1858, 1878) */
		reached[1][1858] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1558: // STATE 1860 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1878:0 - 1)
		IfNotBlocked
		reached[1][1860] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1878, 1862, 1878) */
		reached[1][1862] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1559: // STATE 1865 - mutant_243.pml:251 - [((_pid==0))] (1873:0:0 - 1)
		IfNotBlocked
		reached[1][1865] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1866, 1873) */
		reached[1][1866] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1872, 1873) */
		reached[1][1872] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1560: // STATE 1867 - mutant_243.pml:253 - [((_pid==1))] (1873:0:0 - 1)
		IfNotBlocked
		reached[1][1867] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 1868, 1873) */
		reached[1][1868] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1872, 1873) */
		reached[1][1872] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1561: // STATE 1869 - mutant_243.pml:255 - [((_pid>1))] (1873:0:0 - 1)
		IfNotBlocked
		reached[1][1869] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 1870, 1873) */
		reached[1][1870] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1872, 1873) */
		reached[1][1872] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1562: // STATE 1873 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1873] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1563: // STATE 1874 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:1926:1 - 1)
		IfNotBlocked
		reached[1][1874] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1926, 1879, 1926) */
		reached[1][1879] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1564: // STATE 1877 - mutant_243.pml:370 - [(1)] (1926:0:1 - 1)
		IfNotBlocked
		reached[1][1877] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1926, 1879, 1926) */
		reached[1][1879] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1565: // STATE 1881 - mutant_243.pml:427 - [(((5==STOP)||(5==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1881] = 1;
		if (!(((5==12)||(5==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1566: // STATE 1882 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1916:0:1 - 1)
		IfNotBlocked
		reached[1][1882] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1916, 1883, 1916) */
		reached[1][1883] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1916, 1884, 1916) */
		reached[1][1884] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1567: // STATE 1900 - mutant_243.pml:394 - [.(goto)] (0:1916:0 - 6)
		IfNotBlocked
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1568: // STATE 1885 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1916:0:1 - 1)
		IfNotBlocked
		reached[1][1885] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1916, 1886, 1916) */
		reached[1][1886] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1916, 1887, 1916) */
		reached[1][1887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1569: // STATE 1888 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1916:0:1 - 1)
		IfNotBlocked
		reached[1][1888] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1916, 1889, 1916) */
		reached[1][1889] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1916, 1890, 1916) */
		reached[1][1890] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1570: // STATE 1891 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1916:0:1 - 1)
		IfNotBlocked
		reached[1][1891] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1916, 1892, 1916) */
		reached[1][1892] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1916, 1893, 1916) */
		reached[1][1893] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1571: // STATE 1894 - mutant_243.pml:388 - [((STOP==ABORT))] (1916:0:1 - 1)
		IfNotBlocked
		reached[1][1894] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1916, 1895, 1916) */
		reached[1][1895] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1916, 1896, 1916) */
		reached[1][1896] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1572: // STATE 1898 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1916:0 - 1)
		IfNotBlocked
		reached[1][1898] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1916, 1900, 1916) */
		reached[1][1900] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1573: // STATE 1903 - mutant_243.pml:263 - [((_pid==0))] (1911:0:0 - 1)
		IfNotBlocked
		reached[1][1903] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 1904, 1911) */
		reached[1][1904] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1910, 1911) */
		reached[1][1910] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1574: // STATE 1905 - mutant_243.pml:265 - [((_pid==1))] (1911:0:0 - 1)
		IfNotBlocked
		reached[1][1905] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 1906, 1911) */
		reached[1][1906] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1910, 1911) */
		reached[1][1910] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1575: // STATE 1907 - mutant_243.pml:267 - [((_pid>1))] (1911:0:0 - 1)
		IfNotBlocked
		reached[1][1907] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 1908, 1911) */
		reached[1][1908] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1910, 1911) */
		reached[1][1910] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1576: // STATE 1911 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1911] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1577: // STATE 1912 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:1926:1 - 1)
		IfNotBlocked
		reached[1][1912] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(1926, 1917, 1926) */
		reached[1][1917] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1578: // STATE 1915 - mutant_243.pml:399 - [(1)] (1926:0:1 - 1)
		IfNotBlocked
		reached[1][1915] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1926, 1917, 1926) */
		reached[1][1917] = 1;
		;
		/* merge: .(goto)(1926, 1920, 1926) */
		reached[1][1920] = 1;
		;
		/* merge: j = (j+1)(1926, 1922, 1926) */
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1579: // STATE 1922 - mutant_243.pml:435 - [j = (j+1)] (0:1926:1 - 13)
		IfNotBlocked
		reached[1][1922] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1927, 1926) */
		reached[1][1927] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1580: // STATE 1924 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1924] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1581: // STATE 1931 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1931] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1582: // STATE 1932 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1932] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1583: // STATE 1933 - mutant_243.pml:421 - [((5==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1933] = 1;
		if (!((5==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1584: // STATE 1934 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (1954:0:1 - 1)
		IfNotBlocked
		reached[1][1934] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(1954, 1935, 1954) */
		reached[1][1935] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(1954, 1936, 1954) */
		reached[1][1936] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1585: // STATE 1952 - mutant_243.pml:306 - [.(goto)] (0:1954:0 - 6)
		IfNotBlocked
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1586: // STATE 1937 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1954:0:1 - 1)
		IfNotBlocked
		reached[1][1937] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1954, 1938, 1954) */
		reached[1][1938] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(1954, 1939, 1954) */
		reached[1][1939] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1587: // STATE 1940 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1954:0:1 - 1)
		IfNotBlocked
		reached[1][1940] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1954, 1941, 1954) */
		reached[1][1941] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1954, 1942, 1954) */
		reached[1][1942] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1588: // STATE 1943 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1954:0:1 - 1)
		IfNotBlocked
		reached[1][1943] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1954, 1944, 1954) */
		reached[1][1944] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(1954, 1945, 1954) */
		reached[1][1945] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1589: // STATE 1946 - mutant_243.pml:300 - [((START==ABORT))] (1954:0:1 - 1)
		IfNotBlocked
		reached[1][1946] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(1954, 1947, 1954) */
		reached[1][1947] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(1954, 1948, 1954) */
		reached[1][1948] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1590: // STATE 1950 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:1954:0 - 1)
		IfNotBlocked
		reached[1][1950] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(1954, 1952, 1954) */
		reached[1][1952] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1591: // STATE 1954 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1954] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1592: // STATE 1956 - mutant_243.pml:227 - [((_pid==0))] (1964:0:0 - 1)
		IfNotBlocked
		reached[1][1956] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 1957, 1964) */
		reached[1][1957] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1963, 1964) */
		reached[1][1963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1593: // STATE 1958 - mutant_243.pml:229 - [((_pid==1))] (1964:0:0 - 1)
		IfNotBlocked
		reached[1][1958] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 1959, 1964) */
		reached[1][1959] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1963, 1964) */
		reached[1][1963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1594: // STATE 1960 - mutant_243.pml:231 - [((_pid>1))] (1964:0:0 - 1)
		IfNotBlocked
		reached[1][1960] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 1961, 1964) */
		reached[1][1961] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 1963, 1964) */
		reached[1][1963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1595: // STATE 1964 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][1964] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1596: // STATE 1965 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2093:1 - 1)
		IfNotBlocked
		reached[1][1965] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2093, 1970, 2093) */
		reached[1][1970] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1597: // STATE 1968 - mutant_243.pml:312 - [(1)] (2093:0:1 - 1)
		IfNotBlocked
		reached[1][1968] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2093, 1970, 2093) */
		reached[1][1970] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1598: // STATE 1972 - mutant_243.pml:423 - [((5==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1972] = 1;
		if (!((5==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1599: // STATE 1973 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2007:0:1 - 1)
		IfNotBlocked
		reached[1][1973] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2007, 1974, 2007) */
		reached[1][1974] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2007, 1975, 2007) */
		reached[1][1975] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1600: // STATE 1991 - mutant_243.pml:336 - [.(goto)] (0:2007:0 - 6)
		IfNotBlocked
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1601: // STATE 1976 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2007:0:1 - 1)
		IfNotBlocked
		reached[1][1976] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2007, 1977, 2007) */
		reached[1][1977] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2007, 1978, 2007) */
		reached[1][1978] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1602: // STATE 1979 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2007:0:1 - 1)
		IfNotBlocked
		reached[1][1979] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2007, 1980, 2007) */
		reached[1][1980] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2007, 1981, 2007) */
		reached[1][1981] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1603: // STATE 1982 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2007:0:1 - 1)
		IfNotBlocked
		reached[1][1982] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2007, 1983, 2007) */
		reached[1][1983] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2007, 1984, 2007) */
		reached[1][1984] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1604: // STATE 1985 - mutant_243.pml:330 - [((PAUSE==ABORT))] (2007:0:1 - 1)
		IfNotBlocked
		reached[1][1985] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2007, 1986, 2007) */
		reached[1][1986] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2007, 1987, 2007) */
		reached[1][1987] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1605: // STATE 1989 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2007:0 - 1)
		IfNotBlocked
		reached[1][1989] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2007, 1991, 2007) */
		reached[1][1991] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1606: // STATE 1994 - mutant_243.pml:239 - [((_pid==0))] (2002:0:0 - 1)
		IfNotBlocked
		reached[1][1994] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1995, 2002) */
		reached[1][1995] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2001, 2002) */
		reached[1][2001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1607: // STATE 1996 - mutant_243.pml:241 - [((_pid==1))] (2002:0:0 - 1)
		IfNotBlocked
		reached[1][1996] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 1997, 2002) */
		reached[1][1997] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2001, 2002) */
		reached[1][2001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1608: // STATE 1998 - mutant_243.pml:243 - [((_pid>1))] (2002:0:0 - 1)
		IfNotBlocked
		reached[1][1998] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 1999, 2002) */
		reached[1][1999] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2001, 2002) */
		reached[1][2001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1609: // STATE 2002 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2002] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1610: // STATE 2003 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2093:1 - 1)
		IfNotBlocked
		reached[1][2003] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2093, 2008, 2093) */
		reached[1][2008] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1611: // STATE 2006 - mutant_243.pml:341 - [(1)] (2093:0:1 - 1)
		IfNotBlocked
		reached[1][2006] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2093, 2008, 2093) */
		reached[1][2008] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1612: // STATE 2010 - mutant_243.pml:425 - [((5==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2010] = 1;
		if (!((5==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1613: // STATE 2011 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2045:0:1 - 1)
		IfNotBlocked
		reached[1][2011] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2045, 2012, 2045) */
		reached[1][2012] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2045, 2013, 2045) */
		reached[1][2013] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1614: // STATE 2029 - mutant_243.pml:365 - [.(goto)] (0:2045:0 - 6)
		IfNotBlocked
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1615: // STATE 2014 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2045:0:1 - 1)
		IfNotBlocked
		reached[1][2014] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2045, 2015, 2045) */
		reached[1][2015] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2045, 2016, 2045) */
		reached[1][2016] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1616: // STATE 2017 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2045:0:1 - 1)
		IfNotBlocked
		reached[1][2017] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2045, 2018, 2045) */
		reached[1][2018] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2045, 2019, 2045) */
		reached[1][2019] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1617: // STATE 2020 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2045:0:1 - 1)
		IfNotBlocked
		reached[1][2020] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2045, 2021, 2045) */
		reached[1][2021] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2045, 2022, 2045) */
		reached[1][2022] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1618: // STATE 2023 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (2045:0:1 - 1)
		IfNotBlocked
		reached[1][2023] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2045, 2024, 2045) */
		reached[1][2024] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2045, 2025, 2045) */
		reached[1][2025] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1619: // STATE 2027 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2045:0 - 1)
		IfNotBlocked
		reached[1][2027] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2045, 2029, 2045) */
		reached[1][2029] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1620: // STATE 2032 - mutant_243.pml:251 - [((_pid==0))] (2040:0:0 - 1)
		IfNotBlocked
		reached[1][2032] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2033, 2040) */
		reached[1][2033] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2039, 2040) */
		reached[1][2039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1621: // STATE 2034 - mutant_243.pml:253 - [((_pid==1))] (2040:0:0 - 1)
		IfNotBlocked
		reached[1][2034] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2035, 2040) */
		reached[1][2035] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2039, 2040) */
		reached[1][2039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1622: // STATE 2036 - mutant_243.pml:255 - [((_pid>1))] (2040:0:0 - 1)
		IfNotBlocked
		reached[1][2036] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2037, 2040) */
		reached[1][2037] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2039, 2040) */
		reached[1][2039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1623: // STATE 2040 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2040] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1624: // STATE 2041 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2093:1 - 1)
		IfNotBlocked
		reached[1][2041] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2093, 2046, 2093) */
		reached[1][2046] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1625: // STATE 2044 - mutant_243.pml:370 - [(1)] (2093:0:1 - 1)
		IfNotBlocked
		reached[1][2044] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2093, 2046, 2093) */
		reached[1][2046] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1626: // STATE 2048 - mutant_243.pml:427 - [(((5==STOP)||(5==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2048] = 1;
		if (!(((5==12)||(5==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1627: // STATE 2049 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2083:0:1 - 1)
		IfNotBlocked
		reached[1][2049] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2083, 2050, 2083) */
		reached[1][2050] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2083, 2051, 2083) */
		reached[1][2051] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1628: // STATE 2067 - mutant_243.pml:394 - [.(goto)] (0:2083:0 - 6)
		IfNotBlocked
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1629: // STATE 2052 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2083:0:1 - 1)
		IfNotBlocked
		reached[1][2052] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2083, 2053, 2083) */
		reached[1][2053] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2083, 2054, 2083) */
		reached[1][2054] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1630: // STATE 2055 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2083:0:1 - 1)
		IfNotBlocked
		reached[1][2055] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2083, 2056, 2083) */
		reached[1][2056] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2083, 2057, 2083) */
		reached[1][2057] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1631: // STATE 2058 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2083:0:1 - 1)
		IfNotBlocked
		reached[1][2058] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2083, 2059, 2083) */
		reached[1][2059] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2083, 2060, 2083) */
		reached[1][2060] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1632: // STATE 2061 - mutant_243.pml:388 - [((STOP==ABORT))] (2083:0:1 - 1)
		IfNotBlocked
		reached[1][2061] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2083, 2062, 2083) */
		reached[1][2062] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2083, 2063, 2083) */
		reached[1][2063] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1633: // STATE 2065 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2083:0 - 1)
		IfNotBlocked
		reached[1][2065] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2083, 2067, 2083) */
		reached[1][2067] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1634: // STATE 2070 - mutant_243.pml:263 - [((_pid==0))] (2078:0:0 - 1)
		IfNotBlocked
		reached[1][2070] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2071, 2078) */
		reached[1][2071] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2077, 2078) */
		reached[1][2077] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1635: // STATE 2072 - mutant_243.pml:265 - [((_pid==1))] (2078:0:0 - 1)
		IfNotBlocked
		reached[1][2072] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2073, 2078) */
		reached[1][2073] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2077, 2078) */
		reached[1][2077] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1636: // STATE 2074 - mutant_243.pml:267 - [((_pid>1))] (2078:0:0 - 1)
		IfNotBlocked
		reached[1][2074] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2075, 2078) */
		reached[1][2075] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2077, 2078) */
		reached[1][2077] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1637: // STATE 2078 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2078] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1638: // STATE 2079 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2093:1 - 1)
		IfNotBlocked
		reached[1][2079] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2093, 2084, 2093) */
		reached[1][2084] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1639: // STATE 2082 - mutant_243.pml:399 - [(1)] (2093:0:1 - 1)
		IfNotBlocked
		reached[1][2082] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2093, 2084, 2093) */
		reached[1][2084] = 1;
		;
		/* merge: .(goto)(2093, 2087, 2093) */
		reached[1][2087] = 1;
		;
		/* merge: j = (j-1)(2093, 2089, 2093) */
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1640: // STATE 2089 - mutant_243.pml:446 - [j = (j-1)] (0:2093:1 - 13)
		IfNotBlocked
		reached[1][2089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2094, 2093) */
		reached[1][2094] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1641: // STATE 2091 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2091] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1642: // STATE 2101 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',5)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2101] = 1;
		Printf("Supervisor propagating command %e...\n", 5);
		_m = 3; goto P999; /* 0 */
	case 1643: // STATE 2102 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2102] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1644: // STATE 2103 - mutant_243.pml:421 - [((5==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2103] = 1;
		if (!((5==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1645: // STATE 2104 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (2124:0:1 - 1)
		IfNotBlocked
		reached[1][2104] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2124, 2105, 2124) */
		reached[1][2105] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2124, 2106, 2124) */
		reached[1][2106] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1646: // STATE 2122 - mutant_243.pml:306 - [.(goto)] (0:2124:0 - 6)
		IfNotBlocked
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1647: // STATE 2107 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2124:0:1 - 1)
		IfNotBlocked
		reached[1][2107] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2124, 2108, 2124) */
		reached[1][2108] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2124, 2109, 2124) */
		reached[1][2109] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1648: // STATE 2110 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2124:0:1 - 1)
		IfNotBlocked
		reached[1][2110] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2124, 2111, 2124) */
		reached[1][2111] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2124, 2112, 2124) */
		reached[1][2112] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1649: // STATE 2113 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2124:0:1 - 1)
		IfNotBlocked
		reached[1][2113] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2124, 2114, 2124) */
		reached[1][2114] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2124, 2115, 2124) */
		reached[1][2115] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1650: // STATE 2116 - mutant_243.pml:300 - [((START==ABORT))] (2124:0:1 - 1)
		IfNotBlocked
		reached[1][2116] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2124, 2117, 2124) */
		reached[1][2117] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2124, 2118, 2124) */
		reached[1][2118] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1651: // STATE 2120 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2124:0 - 1)
		IfNotBlocked
		reached[1][2120] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2124, 2122, 2124) */
		reached[1][2122] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1652: // STATE 2124 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2124] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1653: // STATE 2126 - mutant_243.pml:227 - [((_pid==0))] (2134:0:0 - 1)
		IfNotBlocked
		reached[1][2126] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2127, 2134) */
		reached[1][2127] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2133, 2134) */
		reached[1][2133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1654: // STATE 2128 - mutant_243.pml:229 - [((_pid==1))] (2134:0:0 - 1)
		IfNotBlocked
		reached[1][2128] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2129, 2134) */
		reached[1][2129] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2133, 2134) */
		reached[1][2133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1655: // STATE 2130 - mutant_243.pml:231 - [((_pid>1))] (2134:0:0 - 1)
		IfNotBlocked
		reached[1][2130] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2131, 2134) */
		reached[1][2131] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2133, 2134) */
		reached[1][2133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1656: // STATE 2134 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2134] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1657: // STATE 2135 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2263:1 - 1)
		IfNotBlocked
		reached[1][2135] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2263, 2140, 2263) */
		reached[1][2140] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1658: // STATE 2138 - mutant_243.pml:312 - [(1)] (2263:0:1 - 1)
		IfNotBlocked
		reached[1][2138] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2263, 2140, 2263) */
		reached[1][2140] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1659: // STATE 2142 - mutant_243.pml:423 - [((5==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2142] = 1;
		if (!((5==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1660: // STATE 2143 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2177:0:1 - 1)
		IfNotBlocked
		reached[1][2143] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2177, 2144, 2177) */
		reached[1][2144] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2177, 2145, 2177) */
		reached[1][2145] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1661: // STATE 2161 - mutant_243.pml:336 - [.(goto)] (0:2177:0 - 6)
		IfNotBlocked
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1662: // STATE 2146 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2177:0:1 - 1)
		IfNotBlocked
		reached[1][2146] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2177, 2147, 2177) */
		reached[1][2147] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2177, 2148, 2177) */
		reached[1][2148] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1663: // STATE 2149 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2177:0:1 - 1)
		IfNotBlocked
		reached[1][2149] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2177, 2150, 2177) */
		reached[1][2150] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2177, 2151, 2177) */
		reached[1][2151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1664: // STATE 2152 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2177:0:1 - 1)
		IfNotBlocked
		reached[1][2152] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2177, 2153, 2177) */
		reached[1][2153] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2177, 2154, 2177) */
		reached[1][2154] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1665: // STATE 2155 - mutant_243.pml:330 - [((PAUSE==ABORT))] (2177:0:1 - 1)
		IfNotBlocked
		reached[1][2155] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2177, 2156, 2177) */
		reached[1][2156] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2177, 2157, 2177) */
		reached[1][2157] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1666: // STATE 2159 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2177:0 - 1)
		IfNotBlocked
		reached[1][2159] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2177, 2161, 2177) */
		reached[1][2161] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1667: // STATE 2164 - mutant_243.pml:239 - [((_pid==0))] (2172:0:0 - 1)
		IfNotBlocked
		reached[1][2164] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2165, 2172) */
		reached[1][2165] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2171, 2172) */
		reached[1][2171] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1668: // STATE 2166 - mutant_243.pml:241 - [((_pid==1))] (2172:0:0 - 1)
		IfNotBlocked
		reached[1][2166] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2167, 2172) */
		reached[1][2167] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2171, 2172) */
		reached[1][2171] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1669: // STATE 2168 - mutant_243.pml:243 - [((_pid>1))] (2172:0:0 - 1)
		IfNotBlocked
		reached[1][2168] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2169, 2172) */
		reached[1][2169] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2171, 2172) */
		reached[1][2171] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1670: // STATE 2172 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2172] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1671: // STATE 2173 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2263:1 - 1)
		IfNotBlocked
		reached[1][2173] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2263, 2178, 2263) */
		reached[1][2178] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1672: // STATE 2176 - mutant_243.pml:341 - [(1)] (2263:0:1 - 1)
		IfNotBlocked
		reached[1][2176] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2263, 2178, 2263) */
		reached[1][2178] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1673: // STATE 2180 - mutant_243.pml:425 - [((5==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2180] = 1;
		if (!((5==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1674: // STATE 2181 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2215:0:1 - 1)
		IfNotBlocked
		reached[1][2181] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2215, 2182, 2215) */
		reached[1][2182] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2215, 2183, 2215) */
		reached[1][2183] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1675: // STATE 2199 - mutant_243.pml:365 - [.(goto)] (0:2215:0 - 6)
		IfNotBlocked
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1676: // STATE 2184 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2215:0:1 - 1)
		IfNotBlocked
		reached[1][2184] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2215, 2185, 2215) */
		reached[1][2185] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2215, 2186, 2215) */
		reached[1][2186] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1677: // STATE 2187 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2215:0:1 - 1)
		IfNotBlocked
		reached[1][2187] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2215, 2188, 2215) */
		reached[1][2188] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2215, 2189, 2215) */
		reached[1][2189] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1678: // STATE 2190 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2215:0:1 - 1)
		IfNotBlocked
		reached[1][2190] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2215, 2191, 2215) */
		reached[1][2191] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2215, 2192, 2215) */
		reached[1][2192] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1679: // STATE 2193 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (2215:0:1 - 1)
		IfNotBlocked
		reached[1][2193] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2215, 2194, 2215) */
		reached[1][2194] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2215, 2195, 2215) */
		reached[1][2195] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1680: // STATE 2197 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2215:0 - 1)
		IfNotBlocked
		reached[1][2197] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2215, 2199, 2215) */
		reached[1][2199] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1681: // STATE 2202 - mutant_243.pml:251 - [((_pid==0))] (2210:0:0 - 1)
		IfNotBlocked
		reached[1][2202] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2203, 2210) */
		reached[1][2203] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2209, 2210) */
		reached[1][2209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1682: // STATE 2204 - mutant_243.pml:253 - [((_pid==1))] (2210:0:0 - 1)
		IfNotBlocked
		reached[1][2204] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2205, 2210) */
		reached[1][2205] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2209, 2210) */
		reached[1][2209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1683: // STATE 2206 - mutant_243.pml:255 - [((_pid>1))] (2210:0:0 - 1)
		IfNotBlocked
		reached[1][2206] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2207, 2210) */
		reached[1][2207] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2209, 2210) */
		reached[1][2209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1684: // STATE 2210 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2210] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1685: // STATE 2211 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2263:1 - 1)
		IfNotBlocked
		reached[1][2211] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2263, 2216, 2263) */
		reached[1][2216] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1686: // STATE 2214 - mutant_243.pml:370 - [(1)] (2263:0:1 - 1)
		IfNotBlocked
		reached[1][2214] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2263, 2216, 2263) */
		reached[1][2216] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1687: // STATE 2218 - mutant_243.pml:427 - [(((5==STOP)||(5==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2218] = 1;
		if (!(((5==12)||(5==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1688: // STATE 2219 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2253:0:1 - 1)
		IfNotBlocked
		reached[1][2219] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2253, 2220, 2253) */
		reached[1][2220] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2253, 2221, 2253) */
		reached[1][2221] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1689: // STATE 2237 - mutant_243.pml:394 - [.(goto)] (0:2253:0 - 6)
		IfNotBlocked
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1690: // STATE 2222 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2253:0:1 - 1)
		IfNotBlocked
		reached[1][2222] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2253, 2223, 2253) */
		reached[1][2223] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2253, 2224, 2253) */
		reached[1][2224] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1691: // STATE 2225 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2253:0:1 - 1)
		IfNotBlocked
		reached[1][2225] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2253, 2226, 2253) */
		reached[1][2226] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2253, 2227, 2253) */
		reached[1][2227] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1692: // STATE 2228 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2253:0:1 - 1)
		IfNotBlocked
		reached[1][2228] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2253, 2229, 2253) */
		reached[1][2229] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2253, 2230, 2253) */
		reached[1][2230] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1693: // STATE 2231 - mutant_243.pml:388 - [((STOP==ABORT))] (2253:0:1 - 1)
		IfNotBlocked
		reached[1][2231] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2253, 2232, 2253) */
		reached[1][2232] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2253, 2233, 2253) */
		reached[1][2233] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1694: // STATE 2235 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2253:0 - 1)
		IfNotBlocked
		reached[1][2235] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2253, 2237, 2253) */
		reached[1][2237] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1695: // STATE 2240 - mutant_243.pml:263 - [((_pid==0))] (2248:0:0 - 1)
		IfNotBlocked
		reached[1][2240] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2241, 2248) */
		reached[1][2241] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2247, 2248) */
		reached[1][2247] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1696: // STATE 2242 - mutant_243.pml:265 - [((_pid==1))] (2248:0:0 - 1)
		IfNotBlocked
		reached[1][2242] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2243, 2248) */
		reached[1][2243] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2247, 2248) */
		reached[1][2247] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1697: // STATE 2244 - mutant_243.pml:267 - [((_pid>1))] (2248:0:0 - 1)
		IfNotBlocked
		reached[1][2244] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2245, 2248) */
		reached[1][2245] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2247, 2248) */
		reached[1][2247] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1698: // STATE 2248 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2248] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1699: // STATE 2249 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2263:1 - 1)
		IfNotBlocked
		reached[1][2249] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2263, 2254, 2263) */
		reached[1][2254] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1700: // STATE 2252 - mutant_243.pml:399 - [(1)] (2263:0:1 - 1)
		IfNotBlocked
		reached[1][2252] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2263, 2254, 2263) */
		reached[1][2254] = 1;
		;
		/* merge: .(goto)(2263, 2257, 2263) */
		reached[1][2257] = 1;
		;
		/* merge: j = (j+1)(2263, 2259, 2263) */
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1701: // STATE 2259 - mutant_243.pml:435 - [j = (j+1)] (0:2263:1 - 13)
		IfNotBlocked
		reached[1][2259] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2264, 2263) */
		reached[1][2264] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1702: // STATE 2261 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1703: // STATE 2267 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2267] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1704: // STATE 2268 - mutant_243.pml:466 - [((5==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2268] = 1;
		if (!((5==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1705: // STATE 2269 - mutant_243.pml:227 - [((_pid==0))] (2277:0:0 - 1)
		IfNotBlocked
		reached[1][2269] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2270, 2277) */
		reached[1][2270] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2276, 2277) */
		reached[1][2276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1706: // STATE 2271 - mutant_243.pml:229 - [((_pid==1))] (2277:0:0 - 1)
		IfNotBlocked
		reached[1][2271] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2272, 2277) */
		reached[1][2272] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2276, 2277) */
		reached[1][2276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1707: // STATE 2273 - mutant_243.pml:231 - [((_pid>1))] (2277:0:0 - 1)
		IfNotBlocked
		reached[1][2273] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2274, 2277) */
		reached[1][2274] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2276, 2277) */
		reached[1][2276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1708: // STATE 2277 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2277] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1709: // STATE 2278 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2322:1 - 1)
		IfNotBlocked
		reached[1][2278] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2322, 2317, 2322) */
		reached[1][2317] = 1;
		;
		/* merge: j = (j+1)(2322, 2318, 2322) */
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2323, 2322) */
		reached[1][2323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1710: // STATE 2280 - mutant_243.pml:468 - [((5==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2280] = 1;
		if (!((5==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1711: // STATE 2281 - mutant_243.pml:251 - [((_pid==0))] (2289:0:0 - 1)
		IfNotBlocked
		reached[1][2281] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2282, 2289) */
		reached[1][2282] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2288, 2289) */
		reached[1][2288] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1712: // STATE 2283 - mutant_243.pml:253 - [((_pid==1))] (2289:0:0 - 1)
		IfNotBlocked
		reached[1][2283] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2284, 2289) */
		reached[1][2284] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2288, 2289) */
		reached[1][2288] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1713: // STATE 2285 - mutant_243.pml:255 - [((_pid>1))] (2289:0:0 - 1)
		IfNotBlocked
		reached[1][2285] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2286, 2289) */
		reached[1][2286] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2288, 2289) */
		reached[1][2288] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1714: // STATE 2289 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2289] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1715: // STATE 2290 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2322:1 - 1)
		IfNotBlocked
		reached[1][2290] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2322, 2317, 2322) */
		reached[1][2317] = 1;
		;
		/* merge: j = (j+1)(2322, 2318, 2322) */
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2323, 2322) */
		reached[1][2323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1716: // STATE 2292 - mutant_243.pml:470 - [((5==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2292] = 1;
		if (!((5==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1717: // STATE 2293 - mutant_243.pml:239 - [((_pid==0))] (2301:0:0 - 1)
		IfNotBlocked
		reached[1][2293] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2294, 2301) */
		reached[1][2294] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2300, 2301) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1718: // STATE 2295 - mutant_243.pml:241 - [((_pid==1))] (2301:0:0 - 1)
		IfNotBlocked
		reached[1][2295] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2296, 2301) */
		reached[1][2296] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2300, 2301) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1719: // STATE 2297 - mutant_243.pml:243 - [((_pid>1))] (2301:0:0 - 1)
		IfNotBlocked
		reached[1][2297] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2298, 2301) */
		reached[1][2298] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2300, 2301) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1720: // STATE 2301 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2301] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1721: // STATE 2302 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2322:1 - 1)
		IfNotBlocked
		reached[1][2302] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2322, 2317, 2322) */
		reached[1][2317] = 1;
		;
		/* merge: j = (j+1)(2322, 2318, 2322) */
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2323, 2322) */
		reached[1][2323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1722: // STATE 2304 - mutant_243.pml:472 - [((5==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2304] = 1;
		if (!((5==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1723: // STATE 2305 - mutant_243.pml:263 - [((_pid==0))] (2313:0:0 - 1)
		IfNotBlocked
		reached[1][2305] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2306, 2313) */
		reached[1][2306] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2312, 2313) */
		reached[1][2312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1724: // STATE 2307 - mutant_243.pml:265 - [((_pid==1))] (2313:0:0 - 1)
		IfNotBlocked
		reached[1][2307] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2308, 2313) */
		reached[1][2308] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2312, 2313) */
		reached[1][2312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1725: // STATE 2309 - mutant_243.pml:267 - [((_pid>1))] (2313:0:0 - 1)
		IfNotBlocked
		reached[1][2309] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2310, 2313) */
		reached[1][2310] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2312, 2313) */
		reached[1][2312] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1726: // STATE 2313 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2313] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1727: // STATE 2314 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2322:1 - 1)
		IfNotBlocked
		reached[1][2314] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2322, 2317, 2322) */
		reached[1][2317] = 1;
		;
		/* merge: j = (j+1)(2322, 2318, 2322) */
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2323, 2322) */
		reached[1][2323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1728: // STATE 2318 - mutant_243.pml:475 - [j = (j+1)] (0:2322:1 - 5)
		IfNotBlocked
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2323, 2322) */
		reached[1][2323] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1729: // STATE 2320 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2320] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1730: // STATE 2332 - mutant_243.pml:630 - [((commands[0]==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2332] = 1;
		if (!((now.commands[0]==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1731: // STATE 2333 - mutant_243.pml:631 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2333] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 1732: // STATE 2334 - mutant_243.pml:633 - [((states[0]==STARTING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2334] = 1;
		if (!((now.states[0]==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1733: // STATE 2335 - mutant_243.pml:5 - [(((0==0)&&(6==0)))] (2346:0:0 - 1)
		IfNotBlocked
		reached[1][2335] = 1;
		if (!(((0==0)&&(6==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',2,3)(0, 2336, 2346) */
		reached[1][2336] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 2, 3);
		/* merge: .(goto)(0, 2344, 2346) */
		reached[1][2344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1734: // STATE 2337 - mutant_243.pml:7 - [(((0==0)&&(6>0)))] (2346:0:0 - 1)
		IfNotBlocked
		reached[1][2337] = 1;
		if (!(((0==0)&&(6>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',2,6,3)(0, 2338, 2346) */
		reached[1][2338] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 2, 6, 3);
		/* merge: .(goto)(0, 2344, 2346) */
		reached[1][2344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1735: // STATE 2339 - mutant_243.pml:9 - [(((0>0)&&(6==0)))] (2346:0:0 - 1)
		IfNotBlocked
		reached[1][2339] = 1;
		if (!(((0>0)&&(6==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,2,3)(0, 2340, 2346) */
		reached[1][2340] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 2, 3);
		/* merge: .(goto)(0, 2344, 2346) */
		reached[1][2344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1736: // STATE 2341 - mutant_243.pml:11 - [(((0>0)&&(6>0)))] (2346:0:0 - 1)
		IfNotBlocked
		reached[1][2341] = 1;
		if (!(((0>0)&&(6>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,2,6,3)(0, 2342, 2346) */
		reached[1][2342] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 2, 6, 3);
		/* merge: .(goto)(0, 2344, 2346) */
		reached[1][2344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1737: // STATE 2346 - mutant_243.pml:564 - [states[0] = 3] (0:0:1 - 5)
		IfNotBlocked
		reached[1][2346] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 3;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1738: // STATE 2347 - mutant_243.pml:552 - [((3==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2347] = 1;
		if (!((3==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1739: // STATE 2348 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2348] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1740: // STATE 2349 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2349] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 1741: // STATE 2350 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2350] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1742: // STATE 2352 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2352] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1743: // STATE 2353 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2353] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1744: // STATE 2354 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2354] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1745: // STATE 2355 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2355] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1746: // STATE 2356 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (2376:0:1 - 1)
		IfNotBlocked
		reached[1][2356] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2376, 2357, 2376) */
		reached[1][2357] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2376, 2358, 2376) */
		reached[1][2358] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1747: // STATE 2374 - mutant_243.pml:306 - [.(goto)] (0:2376:0 - 6)
		IfNotBlocked
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1748: // STATE 2359 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2376:0:1 - 1)
		IfNotBlocked
		reached[1][2359] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2376, 2360, 2376) */
		reached[1][2360] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2376, 2361, 2376) */
		reached[1][2361] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1749: // STATE 2362 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2376:0:1 - 1)
		IfNotBlocked
		reached[1][2362] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2376, 2363, 2376) */
		reached[1][2363] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2376, 2364, 2376) */
		reached[1][2364] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1750: // STATE 2365 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2376:0:1 - 1)
		IfNotBlocked
		reached[1][2365] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2376, 2366, 2376) */
		reached[1][2366] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2376, 2367, 2376) */
		reached[1][2367] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1751: // STATE 2368 - mutant_243.pml:300 - [((START==ABORT))] (2376:0:1 - 1)
		IfNotBlocked
		reached[1][2368] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2376, 2369, 2376) */
		reached[1][2369] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2376, 2370, 2376) */
		reached[1][2370] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1752: // STATE 2372 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2376:0 - 1)
		IfNotBlocked
		reached[1][2372] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2376, 2374, 2376) */
		reached[1][2374] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1753: // STATE 2376 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2376] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1754: // STATE 2378 - mutant_243.pml:227 - [((_pid==0))] (2386:0:0 - 1)
		IfNotBlocked
		reached[1][2378] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2379, 2386) */
		reached[1][2379] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2385, 2386) */
		reached[1][2385] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1755: // STATE 2380 - mutant_243.pml:229 - [((_pid==1))] (2386:0:0 - 1)
		IfNotBlocked
		reached[1][2380] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2381, 2386) */
		reached[1][2381] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2385, 2386) */
		reached[1][2385] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1756: // STATE 2382 - mutant_243.pml:231 - [((_pid>1))] (2386:0:0 - 1)
		IfNotBlocked
		reached[1][2382] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2383, 2386) */
		reached[1][2383] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2385, 2386) */
		reached[1][2385] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1757: // STATE 2386 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2386] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1758: // STATE 2387 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2515:1 - 1)
		IfNotBlocked
		reached[1][2387] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2515, 2392, 2515) */
		reached[1][2392] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1759: // STATE 2390 - mutant_243.pml:312 - [(1)] (2515:0:1 - 1)
		IfNotBlocked
		reached[1][2390] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2515, 2392, 2515) */
		reached[1][2392] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1760: // STATE 2394 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2394] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1761: // STATE 2395 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2429:0:1 - 1)
		IfNotBlocked
		reached[1][2395] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2429, 2396, 2429) */
		reached[1][2396] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2429, 2397, 2429) */
		reached[1][2397] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1762: // STATE 2413 - mutant_243.pml:336 - [.(goto)] (0:2429:0 - 6)
		IfNotBlocked
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1763: // STATE 2398 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2429:0:1 - 1)
		IfNotBlocked
		reached[1][2398] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2429, 2399, 2429) */
		reached[1][2399] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2429, 2400, 2429) */
		reached[1][2400] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1764: // STATE 2401 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2429:0:1 - 1)
		IfNotBlocked
		reached[1][2401] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2429, 2402, 2429) */
		reached[1][2402] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2429, 2403, 2429) */
		reached[1][2403] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1765: // STATE 2404 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2429:0:1 - 1)
		IfNotBlocked
		reached[1][2404] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2429, 2405, 2429) */
		reached[1][2405] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2429, 2406, 2429) */
		reached[1][2406] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1766: // STATE 2407 - mutant_243.pml:330 - [((PAUSE==ABORT))] (2429:0:1 - 1)
		IfNotBlocked
		reached[1][2407] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2429, 2408, 2429) */
		reached[1][2408] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2429, 2409, 2429) */
		reached[1][2409] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1767: // STATE 2411 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2429:0 - 1)
		IfNotBlocked
		reached[1][2411] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2429, 2413, 2429) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1768: // STATE 2416 - mutant_243.pml:239 - [((_pid==0))] (2424:0:0 - 1)
		IfNotBlocked
		reached[1][2416] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2417, 2424) */
		reached[1][2417] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2423, 2424) */
		reached[1][2423] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1769: // STATE 2418 - mutant_243.pml:241 - [((_pid==1))] (2424:0:0 - 1)
		IfNotBlocked
		reached[1][2418] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2419, 2424) */
		reached[1][2419] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2423, 2424) */
		reached[1][2423] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1770: // STATE 2420 - mutant_243.pml:243 - [((_pid>1))] (2424:0:0 - 1)
		IfNotBlocked
		reached[1][2420] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2421, 2424) */
		reached[1][2421] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2423, 2424) */
		reached[1][2423] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1771: // STATE 2424 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2424] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1772: // STATE 2425 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2515:1 - 1)
		IfNotBlocked
		reached[1][2425] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2515, 2430, 2515) */
		reached[1][2430] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1773: // STATE 2428 - mutant_243.pml:341 - [(1)] (2515:0:1 - 1)
		IfNotBlocked
		reached[1][2428] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2515, 2430, 2515) */
		reached[1][2430] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1774: // STATE 2432 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2432] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1775: // STATE 2433 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2467:0:1 - 1)
		IfNotBlocked
		reached[1][2433] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2467, 2434, 2467) */
		reached[1][2434] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2467, 2435, 2467) */
		reached[1][2435] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1776: // STATE 2451 - mutant_243.pml:365 - [.(goto)] (0:2467:0 - 6)
		IfNotBlocked
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1777: // STATE 2436 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2467:0:1 - 1)
		IfNotBlocked
		reached[1][2436] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2467, 2437, 2467) */
		reached[1][2437] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2467, 2438, 2467) */
		reached[1][2438] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1778: // STATE 2439 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2467:0:1 - 1)
		IfNotBlocked
		reached[1][2439] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2467, 2440, 2467) */
		reached[1][2440] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2467, 2441, 2467) */
		reached[1][2441] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1779: // STATE 2442 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2467:0:1 - 1)
		IfNotBlocked
		reached[1][2442] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2467, 2443, 2467) */
		reached[1][2443] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2467, 2444, 2467) */
		reached[1][2444] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1780: // STATE 2445 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (2467:0:1 - 1)
		IfNotBlocked
		reached[1][2445] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2467, 2446, 2467) */
		reached[1][2446] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2467, 2447, 2467) */
		reached[1][2447] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1781: // STATE 2449 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2467:0 - 1)
		IfNotBlocked
		reached[1][2449] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2467, 2451, 2467) */
		reached[1][2451] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1782: // STATE 2454 - mutant_243.pml:251 - [((_pid==0))] (2462:0:0 - 1)
		IfNotBlocked
		reached[1][2454] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2455, 2462) */
		reached[1][2455] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2461, 2462) */
		reached[1][2461] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1783: // STATE 2456 - mutant_243.pml:253 - [((_pid==1))] (2462:0:0 - 1)
		IfNotBlocked
		reached[1][2456] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2457, 2462) */
		reached[1][2457] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2461, 2462) */
		reached[1][2461] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1784: // STATE 2458 - mutant_243.pml:255 - [((_pid>1))] (2462:0:0 - 1)
		IfNotBlocked
		reached[1][2458] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2459, 2462) */
		reached[1][2459] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2461, 2462) */
		reached[1][2461] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1785: // STATE 2462 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2462] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1786: // STATE 2463 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2515:1 - 1)
		IfNotBlocked
		reached[1][2463] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2515, 2468, 2515) */
		reached[1][2468] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1787: // STATE 2466 - mutant_243.pml:370 - [(1)] (2515:0:1 - 1)
		IfNotBlocked
		reached[1][2466] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2515, 2468, 2515) */
		reached[1][2468] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1788: // STATE 2470 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2470] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1789: // STATE 2471 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2505:0:1 - 1)
		IfNotBlocked
		reached[1][2471] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2505, 2472, 2505) */
		reached[1][2472] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2505, 2473, 2505) */
		reached[1][2473] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1790: // STATE 2489 - mutant_243.pml:394 - [.(goto)] (0:2505:0 - 6)
		IfNotBlocked
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1791: // STATE 2474 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2505:0:1 - 1)
		IfNotBlocked
		reached[1][2474] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2505, 2475, 2505) */
		reached[1][2475] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2505, 2476, 2505) */
		reached[1][2476] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1792: // STATE 2477 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2505:0:1 - 1)
		IfNotBlocked
		reached[1][2477] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2505, 2478, 2505) */
		reached[1][2478] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2505, 2479, 2505) */
		reached[1][2479] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1793: // STATE 2480 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2505:0:1 - 1)
		IfNotBlocked
		reached[1][2480] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2505, 2481, 2505) */
		reached[1][2481] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2505, 2482, 2505) */
		reached[1][2482] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1794: // STATE 2483 - mutant_243.pml:388 - [((STOP==ABORT))] (2505:0:1 - 1)
		IfNotBlocked
		reached[1][2483] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2505, 2484, 2505) */
		reached[1][2484] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2505, 2485, 2505) */
		reached[1][2485] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1795: // STATE 2487 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2505:0 - 1)
		IfNotBlocked
		reached[1][2487] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2505, 2489, 2505) */
		reached[1][2489] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1796: // STATE 2492 - mutant_243.pml:263 - [((_pid==0))] (2500:0:0 - 1)
		IfNotBlocked
		reached[1][2492] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2493, 2500) */
		reached[1][2493] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2499, 2500) */
		reached[1][2499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1797: // STATE 2494 - mutant_243.pml:265 - [((_pid==1))] (2500:0:0 - 1)
		IfNotBlocked
		reached[1][2494] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2495, 2500) */
		reached[1][2495] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2499, 2500) */
		reached[1][2499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1798: // STATE 2496 - mutant_243.pml:267 - [((_pid>1))] (2500:0:0 - 1)
		IfNotBlocked
		reached[1][2496] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2497, 2500) */
		reached[1][2497] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2499, 2500) */
		reached[1][2499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1799: // STATE 2500 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2500] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1800: // STATE 2501 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2515:1 - 1)
		IfNotBlocked
		reached[1][2501] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2515, 2506, 2515) */
		reached[1][2506] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1801: // STATE 2504 - mutant_243.pml:399 - [(1)] (2515:0:1 - 1)
		IfNotBlocked
		reached[1][2504] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2515, 2506, 2515) */
		reached[1][2506] = 1;
		;
		/* merge: .(goto)(2515, 2509, 2515) */
		reached[1][2509] = 1;
		;
		/* merge: j = (j+1)(2515, 2511, 2515) */
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1802: // STATE 2511 - mutant_243.pml:435 - [j = (j+1)] (0:2515:1 - 13)
		IfNotBlocked
		reached[1][2511] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2516, 2515) */
		reached[1][2516] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1803: // STATE 2513 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2513] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1804: // STATE 2520 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2520] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1805: // STATE 2521 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2521] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1806: // STATE 2522 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2522] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1807: // STATE 2523 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (2543:0:1 - 1)
		IfNotBlocked
		reached[1][2523] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2543, 2524, 2543) */
		reached[1][2524] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2543, 2525, 2543) */
		reached[1][2525] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1808: // STATE 2541 - mutant_243.pml:306 - [.(goto)] (0:2543:0 - 6)
		IfNotBlocked
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1809: // STATE 2526 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2543:0:1 - 1)
		IfNotBlocked
		reached[1][2526] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2543, 2527, 2543) */
		reached[1][2527] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2543, 2528, 2543) */
		reached[1][2528] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1810: // STATE 2529 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2543:0:1 - 1)
		IfNotBlocked
		reached[1][2529] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2543, 2530, 2543) */
		reached[1][2530] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2543, 2531, 2543) */
		reached[1][2531] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1811: // STATE 2532 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2543:0:1 - 1)
		IfNotBlocked
		reached[1][2532] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2543, 2533, 2543) */
		reached[1][2533] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2543, 2534, 2543) */
		reached[1][2534] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1812: // STATE 2535 - mutant_243.pml:300 - [((START==ABORT))] (2543:0:1 - 1)
		IfNotBlocked
		reached[1][2535] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2543, 2536, 2543) */
		reached[1][2536] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2543, 2537, 2543) */
		reached[1][2537] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1813: // STATE 2539 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2543:0 - 1)
		IfNotBlocked
		reached[1][2539] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2543, 2541, 2543) */
		reached[1][2541] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1814: // STATE 2543 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2543] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1815: // STATE 2545 - mutant_243.pml:227 - [((_pid==0))] (2553:0:0 - 1)
		IfNotBlocked
		reached[1][2545] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2546, 2553) */
		reached[1][2546] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2552, 2553) */
		reached[1][2552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1816: // STATE 2547 - mutant_243.pml:229 - [((_pid==1))] (2553:0:0 - 1)
		IfNotBlocked
		reached[1][2547] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2548, 2553) */
		reached[1][2548] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2552, 2553) */
		reached[1][2552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1817: // STATE 2549 - mutant_243.pml:231 - [((_pid>1))] (2553:0:0 - 1)
		IfNotBlocked
		reached[1][2549] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2550, 2553) */
		reached[1][2550] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2552, 2553) */
		reached[1][2552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1818: // STATE 2553 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2553] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1819: // STATE 2554 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2682:1 - 1)
		IfNotBlocked
		reached[1][2554] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2682, 2559, 2682) */
		reached[1][2559] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1820: // STATE 2557 - mutant_243.pml:312 - [(1)] (2682:0:1 - 1)
		IfNotBlocked
		reached[1][2557] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2682, 2559, 2682) */
		reached[1][2559] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1821: // STATE 2561 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2561] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1822: // STATE 2562 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2596:0:1 - 1)
		IfNotBlocked
		reached[1][2562] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2596, 2563, 2596) */
		reached[1][2563] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2596, 2564, 2596) */
		reached[1][2564] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1823: // STATE 2580 - mutant_243.pml:336 - [.(goto)] (0:2596:0 - 6)
		IfNotBlocked
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1824: // STATE 2565 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2596:0:1 - 1)
		IfNotBlocked
		reached[1][2565] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2596, 2566, 2596) */
		reached[1][2566] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2596, 2567, 2596) */
		reached[1][2567] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1825: // STATE 2568 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2596:0:1 - 1)
		IfNotBlocked
		reached[1][2568] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2596, 2569, 2596) */
		reached[1][2569] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2596, 2570, 2596) */
		reached[1][2570] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1826: // STATE 2571 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2596:0:1 - 1)
		IfNotBlocked
		reached[1][2571] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2596, 2572, 2596) */
		reached[1][2572] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2596, 2573, 2596) */
		reached[1][2573] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1827: // STATE 2574 - mutant_243.pml:330 - [((PAUSE==ABORT))] (2596:0:1 - 1)
		IfNotBlocked
		reached[1][2574] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2596, 2575, 2596) */
		reached[1][2575] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2596, 2576, 2596) */
		reached[1][2576] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1828: // STATE 2578 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2596:0 - 1)
		IfNotBlocked
		reached[1][2578] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2596, 2580, 2596) */
		reached[1][2580] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1829: // STATE 2583 - mutant_243.pml:239 - [((_pid==0))] (2591:0:0 - 1)
		IfNotBlocked
		reached[1][2583] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2584, 2591) */
		reached[1][2584] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2590, 2591) */
		reached[1][2590] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1830: // STATE 2585 - mutant_243.pml:241 - [((_pid==1))] (2591:0:0 - 1)
		IfNotBlocked
		reached[1][2585] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2586, 2591) */
		reached[1][2586] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2590, 2591) */
		reached[1][2590] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1831: // STATE 2587 - mutant_243.pml:243 - [((_pid>1))] (2591:0:0 - 1)
		IfNotBlocked
		reached[1][2587] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2588, 2591) */
		reached[1][2588] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2590, 2591) */
		reached[1][2590] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1832: // STATE 2591 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2591] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1833: // STATE 2592 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2682:1 - 1)
		IfNotBlocked
		reached[1][2592] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2682, 2597, 2682) */
		reached[1][2597] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1834: // STATE 2595 - mutant_243.pml:341 - [(1)] (2682:0:1 - 1)
		IfNotBlocked
		reached[1][2595] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2682, 2597, 2682) */
		reached[1][2597] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1835: // STATE 2599 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2599] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1836: // STATE 2600 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2634:0:1 - 1)
		IfNotBlocked
		reached[1][2600] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2634, 2601, 2634) */
		reached[1][2601] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2634, 2602, 2634) */
		reached[1][2602] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1837: // STATE 2618 - mutant_243.pml:365 - [.(goto)] (0:2634:0 - 6)
		IfNotBlocked
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1838: // STATE 2603 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2634:0:1 - 1)
		IfNotBlocked
		reached[1][2603] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2634, 2604, 2634) */
		reached[1][2604] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2634, 2605, 2634) */
		reached[1][2605] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1839: // STATE 2606 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2634:0:1 - 1)
		IfNotBlocked
		reached[1][2606] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2634, 2607, 2634) */
		reached[1][2607] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2634, 2608, 2634) */
		reached[1][2608] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1840: // STATE 2609 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2634:0:1 - 1)
		IfNotBlocked
		reached[1][2609] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2634, 2610, 2634) */
		reached[1][2610] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2634, 2611, 2634) */
		reached[1][2611] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1841: // STATE 2612 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (2634:0:1 - 1)
		IfNotBlocked
		reached[1][2612] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2634, 2613, 2634) */
		reached[1][2613] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2634, 2614, 2634) */
		reached[1][2614] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1842: // STATE 2616 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2634:0 - 1)
		IfNotBlocked
		reached[1][2616] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2634, 2618, 2634) */
		reached[1][2618] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1843: // STATE 2621 - mutant_243.pml:251 - [((_pid==0))] (2629:0:0 - 1)
		IfNotBlocked
		reached[1][2621] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2622, 2629) */
		reached[1][2622] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2628, 2629) */
		reached[1][2628] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1844: // STATE 2623 - mutant_243.pml:253 - [((_pid==1))] (2629:0:0 - 1)
		IfNotBlocked
		reached[1][2623] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2624, 2629) */
		reached[1][2624] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2628, 2629) */
		reached[1][2628] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1845: // STATE 2625 - mutant_243.pml:255 - [((_pid>1))] (2629:0:0 - 1)
		IfNotBlocked
		reached[1][2625] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2626, 2629) */
		reached[1][2626] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2628, 2629) */
		reached[1][2628] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1846: // STATE 2629 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2629] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1847: // STATE 2630 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2682:1 - 1)
		IfNotBlocked
		reached[1][2630] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2682, 2635, 2682) */
		reached[1][2635] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1848: // STATE 2633 - mutant_243.pml:370 - [(1)] (2682:0:1 - 1)
		IfNotBlocked
		reached[1][2633] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2682, 2635, 2682) */
		reached[1][2635] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1849: // STATE 2637 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2637] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1850: // STATE 2638 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2672:0:1 - 1)
		IfNotBlocked
		reached[1][2638] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2672, 2639, 2672) */
		reached[1][2639] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2672, 2640, 2672) */
		reached[1][2640] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1851: // STATE 2656 - mutant_243.pml:394 - [.(goto)] (0:2672:0 - 6)
		IfNotBlocked
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1852: // STATE 2641 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2672:0:1 - 1)
		IfNotBlocked
		reached[1][2641] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2672, 2642, 2672) */
		reached[1][2642] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2672, 2643, 2672) */
		reached[1][2643] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1853: // STATE 2644 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2672:0:1 - 1)
		IfNotBlocked
		reached[1][2644] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2672, 2645, 2672) */
		reached[1][2645] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2672, 2646, 2672) */
		reached[1][2646] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1854: // STATE 2647 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2672:0:1 - 1)
		IfNotBlocked
		reached[1][2647] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2672, 2648, 2672) */
		reached[1][2648] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2672, 2649, 2672) */
		reached[1][2649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1855: // STATE 2650 - mutant_243.pml:388 - [((STOP==ABORT))] (2672:0:1 - 1)
		IfNotBlocked
		reached[1][2650] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2672, 2651, 2672) */
		reached[1][2651] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2672, 2652, 2672) */
		reached[1][2652] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1856: // STATE 2654 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2672:0 - 1)
		IfNotBlocked
		reached[1][2654] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2672, 2656, 2672) */
		reached[1][2656] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1857: // STATE 2659 - mutant_243.pml:263 - [((_pid==0))] (2667:0:0 - 1)
		IfNotBlocked
		reached[1][2659] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2660, 2667) */
		reached[1][2660] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2666, 2667) */
		reached[1][2666] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1858: // STATE 2661 - mutant_243.pml:265 - [((_pid==1))] (2667:0:0 - 1)
		IfNotBlocked
		reached[1][2661] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2662, 2667) */
		reached[1][2662] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2666, 2667) */
		reached[1][2666] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1859: // STATE 2663 - mutant_243.pml:267 - [((_pid>1))] (2667:0:0 - 1)
		IfNotBlocked
		reached[1][2663] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2664, 2667) */
		reached[1][2664] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2666, 2667) */
		reached[1][2666] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1860: // STATE 2667 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2667] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1861: // STATE 2668 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2682:1 - 1)
		IfNotBlocked
		reached[1][2668] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2682, 2673, 2682) */
		reached[1][2673] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1862: // STATE 2671 - mutant_243.pml:399 - [(1)] (2682:0:1 - 1)
		IfNotBlocked
		reached[1][2671] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2682, 2673, 2682) */
		reached[1][2673] = 1;
		;
		/* merge: .(goto)(2682, 2676, 2682) */
		reached[1][2676] = 1;
		;
		/* merge: j = (j-1)(2682, 2678, 2682) */
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1863: // STATE 2678 - mutant_243.pml:446 - [j = (j-1)] (0:2682:1 - 13)
		IfNotBlocked
		reached[1][2678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2683, 2682) */
		reached[1][2683] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1864: // STATE 2680 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2680] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1865: // STATE 2690 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2690] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 1866: // STATE 2691 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2691] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1867: // STATE 2692 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2692] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1868: // STATE 2693 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (2713:0:1 - 1)
		IfNotBlocked
		reached[1][2693] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2713, 2694, 2713) */
		reached[1][2694] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2713, 2695, 2713) */
		reached[1][2695] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1869: // STATE 2711 - mutant_243.pml:306 - [.(goto)] (0:2713:0 - 6)
		IfNotBlocked
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1870: // STATE 2696 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2713:0:1 - 1)
		IfNotBlocked
		reached[1][2696] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2713, 2697, 2713) */
		reached[1][2697] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2713, 2698, 2713) */
		reached[1][2698] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1871: // STATE 2699 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2713:0:1 - 1)
		IfNotBlocked
		reached[1][2699] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2713, 2700, 2713) */
		reached[1][2700] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2713, 2701, 2713) */
		reached[1][2701] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1872: // STATE 2702 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2713:0:1 - 1)
		IfNotBlocked
		reached[1][2702] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2713, 2703, 2713) */
		reached[1][2703] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2713, 2704, 2713) */
		reached[1][2704] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1873: // STATE 2705 - mutant_243.pml:300 - [((START==ABORT))] (2713:0:1 - 1)
		IfNotBlocked
		reached[1][2705] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2713, 2706, 2713) */
		reached[1][2706] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2713, 2707, 2713) */
		reached[1][2707] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1874: // STATE 2709 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2713:0 - 1)
		IfNotBlocked
		reached[1][2709] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2713, 2711, 2713) */
		reached[1][2711] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1875: // STATE 2713 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2713] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1876: // STATE 2715 - mutant_243.pml:227 - [((_pid==0))] (2723:0:0 - 1)
		IfNotBlocked
		reached[1][2715] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2716, 2723) */
		reached[1][2716] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2722, 2723) */
		reached[1][2722] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1877: // STATE 2717 - mutant_243.pml:229 - [((_pid==1))] (2723:0:0 - 1)
		IfNotBlocked
		reached[1][2717] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2718, 2723) */
		reached[1][2718] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2722, 2723) */
		reached[1][2722] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1878: // STATE 2719 - mutant_243.pml:231 - [((_pid>1))] (2723:0:0 - 1)
		IfNotBlocked
		reached[1][2719] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2720, 2723) */
		reached[1][2720] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2722, 2723) */
		reached[1][2722] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1879: // STATE 2723 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2723] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1880: // STATE 2724 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2852:1 - 1)
		IfNotBlocked
		reached[1][2724] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2852, 2729, 2852) */
		reached[1][2729] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1881: // STATE 2727 - mutant_243.pml:312 - [(1)] (2852:0:1 - 1)
		IfNotBlocked
		reached[1][2727] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2852, 2729, 2852) */
		reached[1][2729] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1882: // STATE 2731 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2731] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1883: // STATE 2732 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2766:0:1 - 1)
		IfNotBlocked
		reached[1][2732] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2766, 2733, 2766) */
		reached[1][2733] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2766, 2734, 2766) */
		reached[1][2734] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1884: // STATE 2750 - mutant_243.pml:336 - [.(goto)] (0:2766:0 - 6)
		IfNotBlocked
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1885: // STATE 2735 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2766:0:1 - 1)
		IfNotBlocked
		reached[1][2735] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2766, 2736, 2766) */
		reached[1][2736] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2766, 2737, 2766) */
		reached[1][2737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1886: // STATE 2738 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2766:0:1 - 1)
		IfNotBlocked
		reached[1][2738] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2766, 2739, 2766) */
		reached[1][2739] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2766, 2740, 2766) */
		reached[1][2740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1887: // STATE 2741 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2766:0:1 - 1)
		IfNotBlocked
		reached[1][2741] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2766, 2742, 2766) */
		reached[1][2742] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2766, 2743, 2766) */
		reached[1][2743] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1888: // STATE 2744 - mutant_243.pml:330 - [((PAUSE==ABORT))] (2766:0:1 - 1)
		IfNotBlocked
		reached[1][2744] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2766, 2745, 2766) */
		reached[1][2745] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2766, 2746, 2766) */
		reached[1][2746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1889: // STATE 2748 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2766:0 - 1)
		IfNotBlocked
		reached[1][2748] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2766, 2750, 2766) */
		reached[1][2750] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1890: // STATE 2753 - mutant_243.pml:239 - [((_pid==0))] (2761:0:0 - 1)
		IfNotBlocked
		reached[1][2753] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2754, 2761) */
		reached[1][2754] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2760, 2761) */
		reached[1][2760] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1891: // STATE 2755 - mutant_243.pml:241 - [((_pid==1))] (2761:0:0 - 1)
		IfNotBlocked
		reached[1][2755] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2756, 2761) */
		reached[1][2756] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2760, 2761) */
		reached[1][2760] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1892: // STATE 2757 - mutant_243.pml:243 - [((_pid>1))] (2761:0:0 - 1)
		IfNotBlocked
		reached[1][2757] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2758, 2761) */
		reached[1][2758] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2760, 2761) */
		reached[1][2760] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1893: // STATE 2761 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2761] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1894: // STATE 2762 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2852:1 - 1)
		IfNotBlocked
		reached[1][2762] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2852, 2767, 2852) */
		reached[1][2767] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1895: // STATE 2765 - mutant_243.pml:341 - [(1)] (2852:0:1 - 1)
		IfNotBlocked
		reached[1][2765] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2852, 2767, 2852) */
		reached[1][2767] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1896: // STATE 2769 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2769] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1897: // STATE 2770 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2804:0:1 - 1)
		IfNotBlocked
		reached[1][2770] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2804, 2771, 2804) */
		reached[1][2771] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2804, 2772, 2804) */
		reached[1][2772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1898: // STATE 2788 - mutant_243.pml:365 - [.(goto)] (0:2804:0 - 6)
		IfNotBlocked
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1899: // STATE 2773 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2804:0:1 - 1)
		IfNotBlocked
		reached[1][2773] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2804, 2774, 2804) */
		reached[1][2774] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2804, 2775, 2804) */
		reached[1][2775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1900: // STATE 2776 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2804:0:1 - 1)
		IfNotBlocked
		reached[1][2776] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2804, 2777, 2804) */
		reached[1][2777] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2804, 2778, 2804) */
		reached[1][2778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1901: // STATE 2779 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2804:0:1 - 1)
		IfNotBlocked
		reached[1][2779] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2804, 2780, 2804) */
		reached[1][2780] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2804, 2781, 2804) */
		reached[1][2781] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1902: // STATE 2782 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (2804:0:1 - 1)
		IfNotBlocked
		reached[1][2782] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2804, 2783, 2804) */
		reached[1][2783] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2804, 2784, 2804) */
		reached[1][2784] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1903: // STATE 2786 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2804:0 - 1)
		IfNotBlocked
		reached[1][2786] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2804, 2788, 2804) */
		reached[1][2788] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1904: // STATE 2791 - mutant_243.pml:251 - [((_pid==0))] (2799:0:0 - 1)
		IfNotBlocked
		reached[1][2791] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2792, 2799) */
		reached[1][2792] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2798, 2799) */
		reached[1][2798] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1905: // STATE 2793 - mutant_243.pml:253 - [((_pid==1))] (2799:0:0 - 1)
		IfNotBlocked
		reached[1][2793] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2794, 2799) */
		reached[1][2794] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2798, 2799) */
		reached[1][2798] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1906: // STATE 2795 - mutant_243.pml:255 - [((_pid>1))] (2799:0:0 - 1)
		IfNotBlocked
		reached[1][2795] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2796, 2799) */
		reached[1][2796] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2798, 2799) */
		reached[1][2798] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1907: // STATE 2799 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2799] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1908: // STATE 2800 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2852:1 - 1)
		IfNotBlocked
		reached[1][2800] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2852, 2805, 2852) */
		reached[1][2805] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1909: // STATE 2803 - mutant_243.pml:370 - [(1)] (2852:0:1 - 1)
		IfNotBlocked
		reached[1][2803] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2852, 2805, 2852) */
		reached[1][2805] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1910: // STATE 2807 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2807] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1911: // STATE 2808 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2842:0:1 - 1)
		IfNotBlocked
		reached[1][2808] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2842, 2809, 2842) */
		reached[1][2809] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2842, 2810, 2842) */
		reached[1][2810] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1912: // STATE 2826 - mutant_243.pml:394 - [.(goto)] (0:2842:0 - 6)
		IfNotBlocked
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1913: // STATE 2811 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2842:0:1 - 1)
		IfNotBlocked
		reached[1][2811] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2842, 2812, 2842) */
		reached[1][2812] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2842, 2813, 2842) */
		reached[1][2813] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1914: // STATE 2814 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2842:0:1 - 1)
		IfNotBlocked
		reached[1][2814] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2842, 2815, 2842) */
		reached[1][2815] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2842, 2816, 2842) */
		reached[1][2816] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1915: // STATE 2817 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2842:0:1 - 1)
		IfNotBlocked
		reached[1][2817] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2842, 2818, 2842) */
		reached[1][2818] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2842, 2819, 2842) */
		reached[1][2819] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1916: // STATE 2820 - mutant_243.pml:388 - [((STOP==ABORT))] (2842:0:1 - 1)
		IfNotBlocked
		reached[1][2820] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2842, 2821, 2842) */
		reached[1][2821] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2842, 2822, 2842) */
		reached[1][2822] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1917: // STATE 2824 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2842:0 - 1)
		IfNotBlocked
		reached[1][2824] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2842, 2826, 2842) */
		reached[1][2826] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1918: // STATE 2829 - mutant_243.pml:263 - [((_pid==0))] (2837:0:0 - 1)
		IfNotBlocked
		reached[1][2829] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2830, 2837) */
		reached[1][2830] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2836, 2837) */
		reached[1][2836] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1919: // STATE 2831 - mutant_243.pml:265 - [((_pid==1))] (2837:0:0 - 1)
		IfNotBlocked
		reached[1][2831] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2832, 2837) */
		reached[1][2832] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2836, 2837) */
		reached[1][2836] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1920: // STATE 2833 - mutant_243.pml:267 - [((_pid>1))] (2837:0:0 - 1)
		IfNotBlocked
		reached[1][2833] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2834, 2837) */
		reached[1][2834] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2836, 2837) */
		reached[1][2836] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1921: // STATE 2837 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2837] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1922: // STATE 2838 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2852:1 - 1)
		IfNotBlocked
		reached[1][2838] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2852, 2843, 2852) */
		reached[1][2843] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1923: // STATE 2841 - mutant_243.pml:399 - [(1)] (2852:0:1 - 1)
		IfNotBlocked
		reached[1][2841] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2852, 2843, 2852) */
		reached[1][2843] = 1;
		;
		/* merge: .(goto)(2852, 2846, 2852) */
		reached[1][2846] = 1;
		;
		/* merge: j = (j+1)(2852, 2848, 2852) */
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1924: // STATE 2848 - mutant_243.pml:435 - [j = (j+1)] (0:2852:1 - 13)
		IfNotBlocked
		reached[1][2848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2853, 2852) */
		reached[1][2853] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1925: // STATE 2850 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2850] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1926: // STATE 2856 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2856] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1927: // STATE 2857 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2857] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1928: // STATE 2858 - mutant_243.pml:227 - [((_pid==0))] (2866:0:0 - 1)
		IfNotBlocked
		reached[1][2858] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2859, 2866) */
		reached[1][2859] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2865, 2866) */
		reached[1][2865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1929: // STATE 2860 - mutant_243.pml:229 - [((_pid==1))] (2866:0:0 - 1)
		IfNotBlocked
		reached[1][2860] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2861, 2866) */
		reached[1][2861] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2865, 2866) */
		reached[1][2865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1930: // STATE 2862 - mutant_243.pml:231 - [((_pid>1))] (2866:0:0 - 1)
		IfNotBlocked
		reached[1][2862] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2863, 2866) */
		reached[1][2863] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2865, 2866) */
		reached[1][2865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1931: // STATE 2866 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2866] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1932: // STATE 2867 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:2911:1 - 1)
		IfNotBlocked
		reached[1][2867] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2911, 2906, 2911) */
		reached[1][2906] = 1;
		;
		/* merge: j = (j+1)(2911, 2907, 2911) */
		reached[1][2907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2912, 2911) */
		reached[1][2912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1933: // STATE 2869 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2869] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1934: // STATE 2870 - mutant_243.pml:251 - [((_pid==0))] (2878:0:0 - 1)
		IfNotBlocked
		reached[1][2870] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2871, 2878) */
		reached[1][2871] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2877, 2878) */
		reached[1][2877] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1935: // STATE 2872 - mutant_243.pml:253 - [((_pid==1))] (2878:0:0 - 1)
		IfNotBlocked
		reached[1][2872] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 2873, 2878) */
		reached[1][2873] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2877, 2878) */
		reached[1][2877] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1936: // STATE 2874 - mutant_243.pml:255 - [((_pid>1))] (2878:0:0 - 1)
		IfNotBlocked
		reached[1][2874] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 2875, 2878) */
		reached[1][2875] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2877, 2878) */
		reached[1][2877] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1937: // STATE 2878 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2878] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1938: // STATE 2879 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:2911:1 - 1)
		IfNotBlocked
		reached[1][2879] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2911, 2906, 2911) */
		reached[1][2906] = 1;
		;
		/* merge: j = (j+1)(2911, 2907, 2911) */
		reached[1][2907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2912, 2911) */
		reached[1][2912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1939: // STATE 2881 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2881] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1940: // STATE 2882 - mutant_243.pml:239 - [((_pid==0))] (2890:0:0 - 1)
		IfNotBlocked
		reached[1][2882] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2883, 2890) */
		reached[1][2883] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2889, 2890) */
		reached[1][2889] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1941: // STATE 2884 - mutant_243.pml:241 - [((_pid==1))] (2890:0:0 - 1)
		IfNotBlocked
		reached[1][2884] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2885, 2890) */
		reached[1][2885] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2889, 2890) */
		reached[1][2889] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1942: // STATE 2886 - mutant_243.pml:243 - [((_pid>1))] (2890:0:0 - 1)
		IfNotBlocked
		reached[1][2886] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2887, 2890) */
		reached[1][2887] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2889, 2890) */
		reached[1][2889] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1943: // STATE 2890 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2890] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1944: // STATE 2891 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:2911:1 - 1)
		IfNotBlocked
		reached[1][2891] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2911, 2906, 2911) */
		reached[1][2906] = 1;
		;
		/* merge: j = (j+1)(2911, 2907, 2911) */
		reached[1][2907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2912, 2911) */
		reached[1][2912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1945: // STATE 2893 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2893] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1946: // STATE 2894 - mutant_243.pml:263 - [((_pid==0))] (2902:0:0 - 1)
		IfNotBlocked
		reached[1][2894] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 2895, 2902) */
		reached[1][2895] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2901, 2902) */
		reached[1][2901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1947: // STATE 2896 - mutant_243.pml:265 - [((_pid==1))] (2902:0:0 - 1)
		IfNotBlocked
		reached[1][2896] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 2897, 2902) */
		reached[1][2897] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2901, 2902) */
		reached[1][2901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1948: // STATE 2898 - mutant_243.pml:267 - [((_pid>1))] (2902:0:0 - 1)
		IfNotBlocked
		reached[1][2898] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 2899, 2902) */
		reached[1][2899] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2901, 2902) */
		reached[1][2901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1949: // STATE 2902 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2902] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1950: // STATE 2903 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:2911:1 - 1)
		IfNotBlocked
		reached[1][2903] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(2911, 2906, 2911) */
		reached[1][2906] = 1;
		;
		/* merge: j = (j+1)(2911, 2907, 2911) */
		reached[1][2907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2912, 2911) */
		reached[1][2912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1951: // STATE 2907 - mutant_243.pml:475 - [j = (j+1)] (0:2911:1 - 5)
		IfNotBlocked
		reached[1][2907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2912, 2911) */
		reached[1][2912] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1952: // STATE 2909 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2909] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1953: // STATE 2920 - mutant_243.pml:554 - [((3==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2920] = 1;
		if (!((3==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1954: // STATE 2921 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2921] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1955: // STATE 2922 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2922] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 1956: // STATE 2923 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2923] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1957: // STATE 2925 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2925] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1958: // STATE 2926 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2926] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1959: // STATE 2927 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2927] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1960: // STATE 2928 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2928] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1961: // STATE 2929 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (2949:0:1 - 1)
		IfNotBlocked
		reached[1][2929] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(2949, 2930, 2949) */
		reached[1][2930] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(2949, 2931, 2949) */
		reached[1][2931] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1962: // STATE 2947 - mutant_243.pml:306 - [.(goto)] (0:2949:0 - 6)
		IfNotBlocked
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1963: // STATE 2932 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2949:0:1 - 1)
		IfNotBlocked
		reached[1][2932] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2949, 2933, 2949) */
		reached[1][2933] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(2949, 2934, 2949) */
		reached[1][2934] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1964: // STATE 2935 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2949:0:1 - 1)
		IfNotBlocked
		reached[1][2935] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2949, 2936, 2949) */
		reached[1][2936] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2949, 2937, 2949) */
		reached[1][2937] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1965: // STATE 2938 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2949:0:1 - 1)
		IfNotBlocked
		reached[1][2938] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2949, 2939, 2949) */
		reached[1][2939] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(2949, 2940, 2949) */
		reached[1][2940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1966: // STATE 2941 - mutant_243.pml:300 - [((START==ABORT))] (2949:0:1 - 1)
		IfNotBlocked
		reached[1][2941] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(2949, 2942, 2949) */
		reached[1][2942] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(2949, 2943, 2949) */
		reached[1][2943] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1967: // STATE 2945 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:2949:0 - 1)
		IfNotBlocked
		reached[1][2945] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(2949, 2947, 2949) */
		reached[1][2947] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1968: // STATE 2949 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2949] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1969: // STATE 2951 - mutant_243.pml:227 - [((_pid==0))] (2959:0:0 - 1)
		IfNotBlocked
		reached[1][2951] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 2952, 2959) */
		reached[1][2952] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2958, 2959) */
		reached[1][2958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1970: // STATE 2953 - mutant_243.pml:229 - [((_pid==1))] (2959:0:0 - 1)
		IfNotBlocked
		reached[1][2953] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 2954, 2959) */
		reached[1][2954] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2958, 2959) */
		reached[1][2958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1971: // STATE 2955 - mutant_243.pml:231 - [((_pid>1))] (2959:0:0 - 1)
		IfNotBlocked
		reached[1][2955] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 2956, 2959) */
		reached[1][2956] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2958, 2959) */
		reached[1][2958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1972: // STATE 2959 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2959] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1973: // STATE 2960 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3088:1 - 1)
		IfNotBlocked
		reached[1][2960] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3088, 2965, 3088) */
		reached[1][2965] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1974: // STATE 2963 - mutant_243.pml:312 - [(1)] (3088:0:1 - 1)
		IfNotBlocked
		reached[1][2963] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3088, 2965, 3088) */
		reached[1][2965] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1975: // STATE 2967 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2967] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1976: // STATE 2968 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3002:0:1 - 1)
		IfNotBlocked
		reached[1][2968] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3002, 2969, 3002) */
		reached[1][2969] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3002, 2970, 3002) */
		reached[1][2970] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1977: // STATE 2986 - mutant_243.pml:336 - [.(goto)] (0:3002:0 - 6)
		IfNotBlocked
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1978: // STATE 2971 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3002:0:1 - 1)
		IfNotBlocked
		reached[1][2971] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3002, 2972, 3002) */
		reached[1][2972] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3002, 2973, 3002) */
		reached[1][2973] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1979: // STATE 2974 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3002:0:1 - 1)
		IfNotBlocked
		reached[1][2974] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3002, 2975, 3002) */
		reached[1][2975] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3002, 2976, 3002) */
		reached[1][2976] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1980: // STATE 2977 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3002:0:1 - 1)
		IfNotBlocked
		reached[1][2977] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3002, 2978, 3002) */
		reached[1][2978] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3002, 2979, 3002) */
		reached[1][2979] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1981: // STATE 2980 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3002:0:1 - 1)
		IfNotBlocked
		reached[1][2980] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3002, 2981, 3002) */
		reached[1][2981] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3002, 2982, 3002) */
		reached[1][2982] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1982: // STATE 2984 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3002:0 - 1)
		IfNotBlocked
		reached[1][2984] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3002, 2986, 3002) */
		reached[1][2986] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1983: // STATE 2989 - mutant_243.pml:239 - [((_pid==0))] (2997:0:0 - 1)
		IfNotBlocked
		reached[1][2989] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2990, 2997) */
		reached[1][2990] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2996, 2997) */
		reached[1][2996] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1984: // STATE 2991 - mutant_243.pml:241 - [((_pid==1))] (2997:0:0 - 1)
		IfNotBlocked
		reached[1][2991] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 2992, 2997) */
		reached[1][2992] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2996, 2997) */
		reached[1][2996] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1985: // STATE 2993 - mutant_243.pml:243 - [((_pid>1))] (2997:0:0 - 1)
		IfNotBlocked
		reached[1][2993] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 2994, 2997) */
		reached[1][2994] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 2996, 2997) */
		reached[1][2996] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1986: // STATE 2997 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][2997] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1987: // STATE 2998 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3088:1 - 1)
		IfNotBlocked
		reached[1][2998] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3088, 3003, 3088) */
		reached[1][3003] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1988: // STATE 3001 - mutant_243.pml:341 - [(1)] (3088:0:1 - 1)
		IfNotBlocked
		reached[1][3001] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3088, 3003, 3088) */
		reached[1][3003] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1989: // STATE 3005 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3005] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1990: // STATE 3006 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3040:0:1 - 1)
		IfNotBlocked
		reached[1][3006] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3040, 3007, 3040) */
		reached[1][3007] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3040, 3008, 3040) */
		reached[1][3008] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1991: // STATE 3024 - mutant_243.pml:365 - [.(goto)] (0:3040:0 - 6)
		IfNotBlocked
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1992: // STATE 3009 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3040:0:1 - 1)
		IfNotBlocked
		reached[1][3009] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3040, 3010, 3040) */
		reached[1][3010] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3040, 3011, 3040) */
		reached[1][3011] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1993: // STATE 3012 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3040:0:1 - 1)
		IfNotBlocked
		reached[1][3012] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3040, 3013, 3040) */
		reached[1][3013] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3040, 3014, 3040) */
		reached[1][3014] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1994: // STATE 3015 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3040:0:1 - 1)
		IfNotBlocked
		reached[1][3015] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3040, 3016, 3040) */
		reached[1][3016] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3040, 3017, 3040) */
		reached[1][3017] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1995: // STATE 3018 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3040:0:1 - 1)
		IfNotBlocked
		reached[1][3018] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3040, 3019, 3040) */
		reached[1][3019] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3040, 3020, 3040) */
		reached[1][3020] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1996: // STATE 3022 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3040:0 - 1)
		IfNotBlocked
		reached[1][3022] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3040, 3024, 3040) */
		reached[1][3024] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1997: // STATE 3027 - mutant_243.pml:251 - [((_pid==0))] (3035:0:0 - 1)
		IfNotBlocked
		reached[1][3027] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3028, 3035) */
		reached[1][3028] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3034, 3035) */
		reached[1][3034] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1998: // STATE 3029 - mutant_243.pml:253 - [((_pid==1))] (3035:0:0 - 1)
		IfNotBlocked
		reached[1][3029] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3030, 3035) */
		reached[1][3030] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3034, 3035) */
		reached[1][3034] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 1999: // STATE 3031 - mutant_243.pml:255 - [((_pid>1))] (3035:0:0 - 1)
		IfNotBlocked
		reached[1][3031] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3032, 3035) */
		reached[1][3032] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3034, 3035) */
		reached[1][3034] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2000: // STATE 3035 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3035] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2001: // STATE 3036 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3088:1 - 1)
		IfNotBlocked
		reached[1][3036] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3088, 3041, 3088) */
		reached[1][3041] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2002: // STATE 3039 - mutant_243.pml:370 - [(1)] (3088:0:1 - 1)
		IfNotBlocked
		reached[1][3039] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3088, 3041, 3088) */
		reached[1][3041] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2003: // STATE 3043 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3043] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2004: // STATE 3044 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3078:0:1 - 1)
		IfNotBlocked
		reached[1][3044] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3078, 3045, 3078) */
		reached[1][3045] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3078, 3046, 3078) */
		reached[1][3046] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2005: // STATE 3062 - mutant_243.pml:394 - [.(goto)] (0:3078:0 - 6)
		IfNotBlocked
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2006: // STATE 3047 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3078:0:1 - 1)
		IfNotBlocked
		reached[1][3047] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3078, 3048, 3078) */
		reached[1][3048] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3078, 3049, 3078) */
		reached[1][3049] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2007: // STATE 3050 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3078:0:1 - 1)
		IfNotBlocked
		reached[1][3050] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3078, 3051, 3078) */
		reached[1][3051] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3078, 3052, 3078) */
		reached[1][3052] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2008: // STATE 3053 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3078:0:1 - 1)
		IfNotBlocked
		reached[1][3053] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3078, 3054, 3078) */
		reached[1][3054] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3078, 3055, 3078) */
		reached[1][3055] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2009: // STATE 3056 - mutant_243.pml:388 - [((STOP==ABORT))] (3078:0:1 - 1)
		IfNotBlocked
		reached[1][3056] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3078, 3057, 3078) */
		reached[1][3057] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3078, 3058, 3078) */
		reached[1][3058] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2010: // STATE 3060 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3078:0 - 1)
		IfNotBlocked
		reached[1][3060] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3078, 3062, 3078) */
		reached[1][3062] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2011: // STATE 3065 - mutant_243.pml:263 - [((_pid==0))] (3073:0:0 - 1)
		IfNotBlocked
		reached[1][3065] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3066, 3073) */
		reached[1][3066] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3072, 3073) */
		reached[1][3072] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2012: // STATE 3067 - mutant_243.pml:265 - [((_pid==1))] (3073:0:0 - 1)
		IfNotBlocked
		reached[1][3067] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3068, 3073) */
		reached[1][3068] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3072, 3073) */
		reached[1][3072] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2013: // STATE 3069 - mutant_243.pml:267 - [((_pid>1))] (3073:0:0 - 1)
		IfNotBlocked
		reached[1][3069] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3070, 3073) */
		reached[1][3070] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3072, 3073) */
		reached[1][3072] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2014: // STATE 3073 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3073] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2015: // STATE 3074 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3088:1 - 1)
		IfNotBlocked
		reached[1][3074] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3088, 3079, 3088) */
		reached[1][3079] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2016: // STATE 3077 - mutant_243.pml:399 - [(1)] (3088:0:1 - 1)
		IfNotBlocked
		reached[1][3077] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3088, 3079, 3088) */
		reached[1][3079] = 1;
		;
		/* merge: .(goto)(3088, 3082, 3088) */
		reached[1][3082] = 1;
		;
		/* merge: j = (j+1)(3088, 3084, 3088) */
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2017: // STATE 3084 - mutant_243.pml:435 - [j = (j+1)] (0:3088:1 - 13)
		IfNotBlocked
		reached[1][3084] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3089, 3088) */
		reached[1][3089] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2018: // STATE 3086 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3086] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2019: // STATE 3093 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3093] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2020: // STATE 3094 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3094] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2021: // STATE 3095 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3095] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2022: // STATE 3096 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (3116:0:1 - 1)
		IfNotBlocked
		reached[1][3096] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3116, 3097, 3116) */
		reached[1][3097] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3116, 3098, 3116) */
		reached[1][3098] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2023: // STATE 3114 - mutant_243.pml:306 - [.(goto)] (0:3116:0 - 6)
		IfNotBlocked
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2024: // STATE 3099 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3116:0:1 - 1)
		IfNotBlocked
		reached[1][3099] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3116, 3100, 3116) */
		reached[1][3100] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3116, 3101, 3116) */
		reached[1][3101] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2025: // STATE 3102 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3116:0:1 - 1)
		IfNotBlocked
		reached[1][3102] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3116, 3103, 3116) */
		reached[1][3103] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3116, 3104, 3116) */
		reached[1][3104] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2026: // STATE 3105 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3116:0:1 - 1)
		IfNotBlocked
		reached[1][3105] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3116, 3106, 3116) */
		reached[1][3106] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3116, 3107, 3116) */
		reached[1][3107] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2027: // STATE 3108 - mutant_243.pml:300 - [((START==ABORT))] (3116:0:1 - 1)
		IfNotBlocked
		reached[1][3108] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3116, 3109, 3116) */
		reached[1][3109] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3116, 3110, 3116) */
		reached[1][3110] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2028: // STATE 3112 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3116:0 - 1)
		IfNotBlocked
		reached[1][3112] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3116, 3114, 3116) */
		reached[1][3114] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2029: // STATE 3116 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3116] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2030: // STATE 3118 - mutant_243.pml:227 - [((_pid==0))] (3126:0:0 - 1)
		IfNotBlocked
		reached[1][3118] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3119, 3126) */
		reached[1][3119] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3125, 3126) */
		reached[1][3125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2031: // STATE 3120 - mutant_243.pml:229 - [((_pid==1))] (3126:0:0 - 1)
		IfNotBlocked
		reached[1][3120] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3121, 3126) */
		reached[1][3121] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3125, 3126) */
		reached[1][3125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2032: // STATE 3122 - mutant_243.pml:231 - [((_pid>1))] (3126:0:0 - 1)
		IfNotBlocked
		reached[1][3122] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3123, 3126) */
		reached[1][3123] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3125, 3126) */
		reached[1][3125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2033: // STATE 3126 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3126] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2034: // STATE 3127 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3255:1 - 1)
		IfNotBlocked
		reached[1][3127] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3255, 3132, 3255) */
		reached[1][3132] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2035: // STATE 3130 - mutant_243.pml:312 - [(1)] (3255:0:1 - 1)
		IfNotBlocked
		reached[1][3130] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3255, 3132, 3255) */
		reached[1][3132] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2036: // STATE 3134 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3134] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2037: // STATE 3135 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3169:0:1 - 1)
		IfNotBlocked
		reached[1][3135] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3169, 3136, 3169) */
		reached[1][3136] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3169, 3137, 3169) */
		reached[1][3137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2038: // STATE 3153 - mutant_243.pml:336 - [.(goto)] (0:3169:0 - 6)
		IfNotBlocked
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2039: // STATE 3138 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3169:0:1 - 1)
		IfNotBlocked
		reached[1][3138] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3169, 3139, 3169) */
		reached[1][3139] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3169, 3140, 3169) */
		reached[1][3140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2040: // STATE 3141 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3169:0:1 - 1)
		IfNotBlocked
		reached[1][3141] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3169, 3142, 3169) */
		reached[1][3142] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3169, 3143, 3169) */
		reached[1][3143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2041: // STATE 3144 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3169:0:1 - 1)
		IfNotBlocked
		reached[1][3144] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3169, 3145, 3169) */
		reached[1][3145] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3169, 3146, 3169) */
		reached[1][3146] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2042: // STATE 3147 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3169:0:1 - 1)
		IfNotBlocked
		reached[1][3147] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3169, 3148, 3169) */
		reached[1][3148] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3169, 3149, 3169) */
		reached[1][3149] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2043: // STATE 3151 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3169:0 - 1)
		IfNotBlocked
		reached[1][3151] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3169, 3153, 3169) */
		reached[1][3153] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2044: // STATE 3156 - mutant_243.pml:239 - [((_pid==0))] (3164:0:0 - 1)
		IfNotBlocked
		reached[1][3156] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3157, 3164) */
		reached[1][3157] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3163, 3164) */
		reached[1][3163] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2045: // STATE 3158 - mutant_243.pml:241 - [((_pid==1))] (3164:0:0 - 1)
		IfNotBlocked
		reached[1][3158] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3159, 3164) */
		reached[1][3159] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3163, 3164) */
		reached[1][3163] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2046: // STATE 3160 - mutant_243.pml:243 - [((_pid>1))] (3164:0:0 - 1)
		IfNotBlocked
		reached[1][3160] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3161, 3164) */
		reached[1][3161] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3163, 3164) */
		reached[1][3163] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2047: // STATE 3164 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3164] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2048: // STATE 3165 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3255:1 - 1)
		IfNotBlocked
		reached[1][3165] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3255, 3170, 3255) */
		reached[1][3170] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2049: // STATE 3168 - mutant_243.pml:341 - [(1)] (3255:0:1 - 1)
		IfNotBlocked
		reached[1][3168] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3255, 3170, 3255) */
		reached[1][3170] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2050: // STATE 3172 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3172] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2051: // STATE 3173 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3207:0:1 - 1)
		IfNotBlocked
		reached[1][3173] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3207, 3174, 3207) */
		reached[1][3174] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3207, 3175, 3207) */
		reached[1][3175] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2052: // STATE 3191 - mutant_243.pml:365 - [.(goto)] (0:3207:0 - 6)
		IfNotBlocked
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2053: // STATE 3176 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3207:0:1 - 1)
		IfNotBlocked
		reached[1][3176] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3207, 3177, 3207) */
		reached[1][3177] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3207, 3178, 3207) */
		reached[1][3178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2054: // STATE 3179 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3207:0:1 - 1)
		IfNotBlocked
		reached[1][3179] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3207, 3180, 3207) */
		reached[1][3180] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3207, 3181, 3207) */
		reached[1][3181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2055: // STATE 3182 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3207:0:1 - 1)
		IfNotBlocked
		reached[1][3182] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3207, 3183, 3207) */
		reached[1][3183] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3207, 3184, 3207) */
		reached[1][3184] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2056: // STATE 3185 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3207:0:1 - 1)
		IfNotBlocked
		reached[1][3185] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3207, 3186, 3207) */
		reached[1][3186] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3207, 3187, 3207) */
		reached[1][3187] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2057: // STATE 3189 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3207:0 - 1)
		IfNotBlocked
		reached[1][3189] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3207, 3191, 3207) */
		reached[1][3191] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2058: // STATE 3194 - mutant_243.pml:251 - [((_pid==0))] (3202:0:0 - 1)
		IfNotBlocked
		reached[1][3194] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3195, 3202) */
		reached[1][3195] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3201, 3202) */
		reached[1][3201] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2059: // STATE 3196 - mutant_243.pml:253 - [((_pid==1))] (3202:0:0 - 1)
		IfNotBlocked
		reached[1][3196] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3197, 3202) */
		reached[1][3197] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3201, 3202) */
		reached[1][3201] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2060: // STATE 3198 - mutant_243.pml:255 - [((_pid>1))] (3202:0:0 - 1)
		IfNotBlocked
		reached[1][3198] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3199, 3202) */
		reached[1][3199] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3201, 3202) */
		reached[1][3201] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2061: // STATE 3202 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3202] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2062: // STATE 3203 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3255:1 - 1)
		IfNotBlocked
		reached[1][3203] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3255, 3208, 3255) */
		reached[1][3208] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2063: // STATE 3206 - mutant_243.pml:370 - [(1)] (3255:0:1 - 1)
		IfNotBlocked
		reached[1][3206] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3255, 3208, 3255) */
		reached[1][3208] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2064: // STATE 3210 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3210] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2065: // STATE 3211 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3245:0:1 - 1)
		IfNotBlocked
		reached[1][3211] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3245, 3212, 3245) */
		reached[1][3212] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3245, 3213, 3245) */
		reached[1][3213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2066: // STATE 3229 - mutant_243.pml:394 - [.(goto)] (0:3245:0 - 6)
		IfNotBlocked
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2067: // STATE 3214 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3245:0:1 - 1)
		IfNotBlocked
		reached[1][3214] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3245, 3215, 3245) */
		reached[1][3215] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3245, 3216, 3245) */
		reached[1][3216] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2068: // STATE 3217 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3245:0:1 - 1)
		IfNotBlocked
		reached[1][3217] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3245, 3218, 3245) */
		reached[1][3218] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3245, 3219, 3245) */
		reached[1][3219] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2069: // STATE 3220 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3245:0:1 - 1)
		IfNotBlocked
		reached[1][3220] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3245, 3221, 3245) */
		reached[1][3221] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3245, 3222, 3245) */
		reached[1][3222] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2070: // STATE 3223 - mutant_243.pml:388 - [((STOP==ABORT))] (3245:0:1 - 1)
		IfNotBlocked
		reached[1][3223] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3245, 3224, 3245) */
		reached[1][3224] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3245, 3225, 3245) */
		reached[1][3225] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2071: // STATE 3227 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3245:0 - 1)
		IfNotBlocked
		reached[1][3227] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3245, 3229, 3245) */
		reached[1][3229] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2072: // STATE 3232 - mutant_243.pml:263 - [((_pid==0))] (3240:0:0 - 1)
		IfNotBlocked
		reached[1][3232] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3233, 3240) */
		reached[1][3233] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3239, 3240) */
		reached[1][3239] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2073: // STATE 3234 - mutant_243.pml:265 - [((_pid==1))] (3240:0:0 - 1)
		IfNotBlocked
		reached[1][3234] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3235, 3240) */
		reached[1][3235] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3239, 3240) */
		reached[1][3239] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2074: // STATE 3236 - mutant_243.pml:267 - [((_pid>1))] (3240:0:0 - 1)
		IfNotBlocked
		reached[1][3236] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3237, 3240) */
		reached[1][3237] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3239, 3240) */
		reached[1][3239] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2075: // STATE 3240 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3240] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2076: // STATE 3241 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3255:1 - 1)
		IfNotBlocked
		reached[1][3241] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3255, 3246, 3255) */
		reached[1][3246] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2077: // STATE 3244 - mutant_243.pml:399 - [(1)] (3255:0:1 - 1)
		IfNotBlocked
		reached[1][3244] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3255, 3246, 3255) */
		reached[1][3246] = 1;
		;
		/* merge: .(goto)(3255, 3249, 3255) */
		reached[1][3249] = 1;
		;
		/* merge: j = (j-1)(3255, 3251, 3255) */
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2078: // STATE 3251 - mutant_243.pml:446 - [j = (j-1)] (0:3255:1 - 13)
		IfNotBlocked
		reached[1][3251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3256, 3255) */
		reached[1][3256] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2079: // STATE 3253 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3253] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2080: // STATE 3263 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3263] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 2081: // STATE 3264 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3264] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2082: // STATE 3265 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3265] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2083: // STATE 3266 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (3286:0:1 - 1)
		IfNotBlocked
		reached[1][3266] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3286, 3267, 3286) */
		reached[1][3267] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3286, 3268, 3286) */
		reached[1][3268] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2084: // STATE 3284 - mutant_243.pml:306 - [.(goto)] (0:3286:0 - 6)
		IfNotBlocked
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2085: // STATE 3269 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3286:0:1 - 1)
		IfNotBlocked
		reached[1][3269] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3286, 3270, 3286) */
		reached[1][3270] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3286, 3271, 3286) */
		reached[1][3271] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2086: // STATE 3272 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3286:0:1 - 1)
		IfNotBlocked
		reached[1][3272] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3286, 3273, 3286) */
		reached[1][3273] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3286, 3274, 3286) */
		reached[1][3274] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2087: // STATE 3275 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3286:0:1 - 1)
		IfNotBlocked
		reached[1][3275] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3286, 3276, 3286) */
		reached[1][3276] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3286, 3277, 3286) */
		reached[1][3277] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2088: // STATE 3278 - mutant_243.pml:300 - [((START==ABORT))] (3286:0:1 - 1)
		IfNotBlocked
		reached[1][3278] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3286, 3279, 3286) */
		reached[1][3279] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3286, 3280, 3286) */
		reached[1][3280] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2089: // STATE 3282 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3286:0 - 1)
		IfNotBlocked
		reached[1][3282] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3286, 3284, 3286) */
		reached[1][3284] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2090: // STATE 3286 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3286] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2091: // STATE 3288 - mutant_243.pml:227 - [((_pid==0))] (3296:0:0 - 1)
		IfNotBlocked
		reached[1][3288] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3289, 3296) */
		reached[1][3289] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3295, 3296) */
		reached[1][3295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2092: // STATE 3290 - mutant_243.pml:229 - [((_pid==1))] (3296:0:0 - 1)
		IfNotBlocked
		reached[1][3290] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3291, 3296) */
		reached[1][3291] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3295, 3296) */
		reached[1][3295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2093: // STATE 3292 - mutant_243.pml:231 - [((_pid>1))] (3296:0:0 - 1)
		IfNotBlocked
		reached[1][3292] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3293, 3296) */
		reached[1][3293] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3295, 3296) */
		reached[1][3295] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2094: // STATE 3296 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3296] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2095: // STATE 3297 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3425:1 - 1)
		IfNotBlocked
		reached[1][3297] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3425, 3302, 3425) */
		reached[1][3302] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2096: // STATE 3300 - mutant_243.pml:312 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3300] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3302, 3425) */
		reached[1][3302] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2097: // STATE 3304 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3304] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2098: // STATE 3305 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3339:0:1 - 1)
		IfNotBlocked
		reached[1][3305] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3339, 3306, 3339) */
		reached[1][3306] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3339, 3307, 3339) */
		reached[1][3307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2099: // STATE 3323 - mutant_243.pml:336 - [.(goto)] (0:3339:0 - 6)
		IfNotBlocked
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2100: // STATE 3308 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3339:0:1 - 1)
		IfNotBlocked
		reached[1][3308] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3339, 3309, 3339) */
		reached[1][3309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3339, 3310, 3339) */
		reached[1][3310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2101: // STATE 3311 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3339:0:1 - 1)
		IfNotBlocked
		reached[1][3311] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3339, 3312, 3339) */
		reached[1][3312] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3339, 3313, 3339) */
		reached[1][3313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2102: // STATE 3314 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3339:0:1 - 1)
		IfNotBlocked
		reached[1][3314] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3339, 3315, 3339) */
		reached[1][3315] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3339, 3316, 3339) */
		reached[1][3316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2103: // STATE 3317 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3339:0:1 - 1)
		IfNotBlocked
		reached[1][3317] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3339, 3318, 3339) */
		reached[1][3318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3339, 3319, 3339) */
		reached[1][3319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2104: // STATE 3321 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3339:0 - 1)
		IfNotBlocked
		reached[1][3321] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3339, 3323, 3339) */
		reached[1][3323] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2105: // STATE 3326 - mutant_243.pml:239 - [((_pid==0))] (3334:0:0 - 1)
		IfNotBlocked
		reached[1][3326] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3327, 3334) */
		reached[1][3327] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3333, 3334) */
		reached[1][3333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2106: // STATE 3328 - mutant_243.pml:241 - [((_pid==1))] (3334:0:0 - 1)
		IfNotBlocked
		reached[1][3328] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3329, 3334) */
		reached[1][3329] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3333, 3334) */
		reached[1][3333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2107: // STATE 3330 - mutant_243.pml:243 - [((_pid>1))] (3334:0:0 - 1)
		IfNotBlocked
		reached[1][3330] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3331, 3334) */
		reached[1][3331] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3333, 3334) */
		reached[1][3333] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2108: // STATE 3334 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3334] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2109: // STATE 3335 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3425:1 - 1)
		IfNotBlocked
		reached[1][3335] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3425, 3340, 3425) */
		reached[1][3340] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2110: // STATE 3338 - mutant_243.pml:341 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3338] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3340, 3425) */
		reached[1][3340] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2111: // STATE 3342 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3342] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2112: // STATE 3343 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3377:0:1 - 1)
		IfNotBlocked
		reached[1][3343] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3377, 3344, 3377) */
		reached[1][3344] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3377, 3345, 3377) */
		reached[1][3345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2113: // STATE 3361 - mutant_243.pml:365 - [.(goto)] (0:3377:0 - 6)
		IfNotBlocked
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2114: // STATE 3346 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3377:0:1 - 1)
		IfNotBlocked
		reached[1][3346] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3377, 3347, 3377) */
		reached[1][3347] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3377, 3348, 3377) */
		reached[1][3348] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2115: // STATE 3349 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3377:0:1 - 1)
		IfNotBlocked
		reached[1][3349] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3377, 3350, 3377) */
		reached[1][3350] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3377, 3351, 3377) */
		reached[1][3351] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2116: // STATE 3352 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3377:0:1 - 1)
		IfNotBlocked
		reached[1][3352] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3377, 3353, 3377) */
		reached[1][3353] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3377, 3354, 3377) */
		reached[1][3354] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2117: // STATE 3355 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3377:0:1 - 1)
		IfNotBlocked
		reached[1][3355] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3377, 3356, 3377) */
		reached[1][3356] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3377, 3357, 3377) */
		reached[1][3357] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2118: // STATE 3359 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3377:0 - 1)
		IfNotBlocked
		reached[1][3359] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3377, 3361, 3377) */
		reached[1][3361] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2119: // STATE 3364 - mutant_243.pml:251 - [((_pid==0))] (3372:0:0 - 1)
		IfNotBlocked
		reached[1][3364] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3365, 3372) */
		reached[1][3365] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3371, 3372) */
		reached[1][3371] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2120: // STATE 3366 - mutant_243.pml:253 - [((_pid==1))] (3372:0:0 - 1)
		IfNotBlocked
		reached[1][3366] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3367, 3372) */
		reached[1][3367] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3371, 3372) */
		reached[1][3371] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2121: // STATE 3368 - mutant_243.pml:255 - [((_pid>1))] (3372:0:0 - 1)
		IfNotBlocked
		reached[1][3368] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3369, 3372) */
		reached[1][3369] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3371, 3372) */
		reached[1][3371] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2122: // STATE 3372 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3372] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2123: // STATE 3373 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3425:1 - 1)
		IfNotBlocked
		reached[1][3373] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3425, 3378, 3425) */
		reached[1][3378] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2124: // STATE 3376 - mutant_243.pml:370 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3376] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3378, 3425) */
		reached[1][3378] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2125: // STATE 3380 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3380] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2126: // STATE 3381 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3381] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3415, 3382, 3415) */
		reached[1][3382] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3415, 3383, 3415) */
		reached[1][3383] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2127: // STATE 3399 - mutant_243.pml:394 - [.(goto)] (0:3415:0 - 6)
		IfNotBlocked
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2128: // STATE 3384 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3384] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3415, 3385, 3415) */
		reached[1][3385] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3415, 3386, 3415) */
		reached[1][3386] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2129: // STATE 3387 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3387] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3415, 3388, 3415) */
		reached[1][3388] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3415, 3389, 3415) */
		reached[1][3389] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2130: // STATE 3390 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3390] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3415, 3391, 3415) */
		reached[1][3391] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3415, 3392, 3415) */
		reached[1][3392] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2131: // STATE 3393 - mutant_243.pml:388 - [((STOP==ABORT))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3393] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3415, 3394, 3415) */
		reached[1][3394] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3415, 3395, 3415) */
		reached[1][3395] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2132: // STATE 3397 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3415:0 - 1)
		IfNotBlocked
		reached[1][3397] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3415, 3399, 3415) */
		reached[1][3399] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2133: // STATE 3402 - mutant_243.pml:263 - [((_pid==0))] (3410:0:0 - 1)
		IfNotBlocked
		reached[1][3402] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3403, 3410) */
		reached[1][3403] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3409, 3410) */
		reached[1][3409] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2134: // STATE 3404 - mutant_243.pml:265 - [((_pid==1))] (3410:0:0 - 1)
		IfNotBlocked
		reached[1][3404] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3405, 3410) */
		reached[1][3405] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3409, 3410) */
		reached[1][3409] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2135: // STATE 3406 - mutant_243.pml:267 - [((_pid>1))] (3410:0:0 - 1)
		IfNotBlocked
		reached[1][3406] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3407, 3410) */
		reached[1][3407] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3409, 3410) */
		reached[1][3409] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2136: // STATE 3410 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3410] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2137: // STATE 3411 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3425:1 - 1)
		IfNotBlocked
		reached[1][3411] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3425, 3416, 3425) */
		reached[1][3416] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2138: // STATE 3414 - mutant_243.pml:399 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3414] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3416, 3425) */
		reached[1][3416] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2139: // STATE 3421 - mutant_243.pml:435 - [j = (j+1)] (0:3425:1 - 13)
		IfNotBlocked
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2140: // STATE 3423 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3423] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2141: // STATE 3429 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3429] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2142: // STATE 3430 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3430] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2143: // STATE 3431 - mutant_243.pml:227 - [((_pid==0))] (3439:0:0 - 1)
		IfNotBlocked
		reached[1][3431] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3432, 3439) */
		reached[1][3432] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3438, 3439) */
		reached[1][3438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2144: // STATE 3433 - mutant_243.pml:229 - [((_pid==1))] (3439:0:0 - 1)
		IfNotBlocked
		reached[1][3433] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3434, 3439) */
		reached[1][3434] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3438, 3439) */
		reached[1][3438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2145: // STATE 3435 - mutant_243.pml:231 - [((_pid>1))] (3439:0:0 - 1)
		IfNotBlocked
		reached[1][3435] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3436, 3439) */
		reached[1][3436] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3438, 3439) */
		reached[1][3438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2146: // STATE 3439 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3439] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2147: // STATE 3440 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3484:1 - 1)
		IfNotBlocked
		reached[1][3440] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3484, 3479, 3484) */
		reached[1][3479] = 1;
		;
		/* merge: j = (j+1)(3484, 3480, 3484) */
		reached[1][3480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3485, 3484) */
		reached[1][3485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2148: // STATE 3442 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3442] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2149: // STATE 3443 - mutant_243.pml:251 - [((_pid==0))] (3451:0:0 - 1)
		IfNotBlocked
		reached[1][3443] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3444, 3451) */
		reached[1][3444] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3450, 3451) */
		reached[1][3450] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2150: // STATE 3445 - mutant_243.pml:253 - [((_pid==1))] (3451:0:0 - 1)
		IfNotBlocked
		reached[1][3445] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3446, 3451) */
		reached[1][3446] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3450, 3451) */
		reached[1][3450] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2151: // STATE 3447 - mutant_243.pml:255 - [((_pid>1))] (3451:0:0 - 1)
		IfNotBlocked
		reached[1][3447] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3448, 3451) */
		reached[1][3448] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3450, 3451) */
		reached[1][3450] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2152: // STATE 3451 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3451] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2153: // STATE 3452 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3484:1 - 1)
		IfNotBlocked
		reached[1][3452] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3484, 3479, 3484) */
		reached[1][3479] = 1;
		;
		/* merge: j = (j+1)(3484, 3480, 3484) */
		reached[1][3480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3485, 3484) */
		reached[1][3485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2154: // STATE 3454 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3454] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2155: // STATE 3455 - mutant_243.pml:239 - [((_pid==0))] (3463:0:0 - 1)
		IfNotBlocked
		reached[1][3455] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3456, 3463) */
		reached[1][3456] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3462, 3463) */
		reached[1][3462] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2156: // STATE 3457 - mutant_243.pml:241 - [((_pid==1))] (3463:0:0 - 1)
		IfNotBlocked
		reached[1][3457] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3458, 3463) */
		reached[1][3458] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3462, 3463) */
		reached[1][3462] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2157: // STATE 3459 - mutant_243.pml:243 - [((_pid>1))] (3463:0:0 - 1)
		IfNotBlocked
		reached[1][3459] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3460, 3463) */
		reached[1][3460] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3462, 3463) */
		reached[1][3462] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2158: // STATE 3463 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3463] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2159: // STATE 3464 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3484:1 - 1)
		IfNotBlocked
		reached[1][3464] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3484, 3479, 3484) */
		reached[1][3479] = 1;
		;
		/* merge: j = (j+1)(3484, 3480, 3484) */
		reached[1][3480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3485, 3484) */
		reached[1][3485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2160: // STATE 3466 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3466] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2161: // STATE 3467 - mutant_243.pml:263 - [((_pid==0))] (3475:0:0 - 1)
		IfNotBlocked
		reached[1][3467] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3468, 3475) */
		reached[1][3468] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3474, 3475) */
		reached[1][3474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2162: // STATE 3469 - mutant_243.pml:265 - [((_pid==1))] (3475:0:0 - 1)
		IfNotBlocked
		reached[1][3469] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3470, 3475) */
		reached[1][3470] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3474, 3475) */
		reached[1][3474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2163: // STATE 3471 - mutant_243.pml:267 - [((_pid>1))] (3475:0:0 - 1)
		IfNotBlocked
		reached[1][3471] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3472, 3475) */
		reached[1][3472] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3474, 3475) */
		reached[1][3474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2164: // STATE 3475 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3475] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2165: // STATE 3476 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3484:1 - 1)
		IfNotBlocked
		reached[1][3476] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3484, 3479, 3484) */
		reached[1][3479] = 1;
		;
		/* merge: j = (j+1)(3484, 3480, 3484) */
		reached[1][3480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3485, 3484) */
		reached[1][3485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2166: // STATE 3480 - mutant_243.pml:475 - [j = (j+1)] (0:3484:1 - 5)
		IfNotBlocked
		reached[1][3480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3485, 3484) */
		reached[1][3485] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2167: // STATE 3482 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3482] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2168: // STATE 3493 - mutant_243.pml:556 - [(((3==ABORTING)||(3==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3493] = 1;
		if (!(((3==10)||(3==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2169: // STATE 3494 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3494] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2170: // STATE 3495 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3495] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 2171: // STATE 3496 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3496] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2172: // STATE 3498 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3498] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2173: // STATE 3499 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3499] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2174: // STATE 3500 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3500] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2175: // STATE 3501 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3501] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2176: // STATE 3502 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (3522:0:1 - 1)
		IfNotBlocked
		reached[1][3502] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3522, 3503, 3522) */
		reached[1][3503] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3522, 3504, 3522) */
		reached[1][3504] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2177: // STATE 3520 - mutant_243.pml:306 - [.(goto)] (0:3522:0 - 6)
		IfNotBlocked
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2178: // STATE 3505 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3522:0:1 - 1)
		IfNotBlocked
		reached[1][3505] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3522, 3506, 3522) */
		reached[1][3506] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3522, 3507, 3522) */
		reached[1][3507] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2179: // STATE 3508 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3522:0:1 - 1)
		IfNotBlocked
		reached[1][3508] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3522, 3509, 3522) */
		reached[1][3509] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3522, 3510, 3522) */
		reached[1][3510] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2180: // STATE 3511 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3522:0:1 - 1)
		IfNotBlocked
		reached[1][3511] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3522, 3512, 3522) */
		reached[1][3512] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3522, 3513, 3522) */
		reached[1][3513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2181: // STATE 3514 - mutant_243.pml:300 - [((START==ABORT))] (3522:0:1 - 1)
		IfNotBlocked
		reached[1][3514] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3522, 3515, 3522) */
		reached[1][3515] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3522, 3516, 3522) */
		reached[1][3516] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2182: // STATE 3518 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3522:0 - 1)
		IfNotBlocked
		reached[1][3518] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3522, 3520, 3522) */
		reached[1][3520] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2183: // STATE 3522 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3522] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2184: // STATE 3524 - mutant_243.pml:227 - [((_pid==0))] (3532:0:0 - 1)
		IfNotBlocked
		reached[1][3524] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3525, 3532) */
		reached[1][3525] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3531, 3532) */
		reached[1][3531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2185: // STATE 3526 - mutant_243.pml:229 - [((_pid==1))] (3532:0:0 - 1)
		IfNotBlocked
		reached[1][3526] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3527, 3532) */
		reached[1][3527] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3531, 3532) */
		reached[1][3531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2186: // STATE 3528 - mutant_243.pml:231 - [((_pid>1))] (3532:0:0 - 1)
		IfNotBlocked
		reached[1][3528] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3529, 3532) */
		reached[1][3529] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3531, 3532) */
		reached[1][3531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2187: // STATE 3532 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3532] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2188: // STATE 3533 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3661:1 - 1)
		IfNotBlocked
		reached[1][3533] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3661, 3538, 3661) */
		reached[1][3538] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2189: // STATE 3536 - mutant_243.pml:312 - [(1)] (3661:0:1 - 1)
		IfNotBlocked
		reached[1][3536] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3661, 3538, 3661) */
		reached[1][3538] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2190: // STATE 3540 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3540] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2191: // STATE 3541 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3575:0:1 - 1)
		IfNotBlocked
		reached[1][3541] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3575, 3542, 3575) */
		reached[1][3542] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3575, 3543, 3575) */
		reached[1][3543] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2192: // STATE 3559 - mutant_243.pml:336 - [.(goto)] (0:3575:0 - 6)
		IfNotBlocked
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2193: // STATE 3544 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3575:0:1 - 1)
		IfNotBlocked
		reached[1][3544] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3575, 3545, 3575) */
		reached[1][3545] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3575, 3546, 3575) */
		reached[1][3546] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2194: // STATE 3547 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3575:0:1 - 1)
		IfNotBlocked
		reached[1][3547] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3575, 3548, 3575) */
		reached[1][3548] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3575, 3549, 3575) */
		reached[1][3549] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2195: // STATE 3550 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3575:0:1 - 1)
		IfNotBlocked
		reached[1][3550] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3575, 3551, 3575) */
		reached[1][3551] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3575, 3552, 3575) */
		reached[1][3552] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2196: // STATE 3553 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3575:0:1 - 1)
		IfNotBlocked
		reached[1][3553] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3575, 3554, 3575) */
		reached[1][3554] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3575, 3555, 3575) */
		reached[1][3555] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2197: // STATE 3557 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3575:0 - 1)
		IfNotBlocked
		reached[1][3557] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3575, 3559, 3575) */
		reached[1][3559] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2198: // STATE 3562 - mutant_243.pml:239 - [((_pid==0))] (3570:0:0 - 1)
		IfNotBlocked
		reached[1][3562] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3563, 3570) */
		reached[1][3563] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3569, 3570) */
		reached[1][3569] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2199: // STATE 3564 - mutant_243.pml:241 - [((_pid==1))] (3570:0:0 - 1)
		IfNotBlocked
		reached[1][3564] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3565, 3570) */
		reached[1][3565] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3569, 3570) */
		reached[1][3569] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2200: // STATE 3566 - mutant_243.pml:243 - [((_pid>1))] (3570:0:0 - 1)
		IfNotBlocked
		reached[1][3566] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3567, 3570) */
		reached[1][3567] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3569, 3570) */
		reached[1][3569] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2201: // STATE 3570 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3570] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2202: // STATE 3571 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3661:1 - 1)
		IfNotBlocked
		reached[1][3571] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3661, 3576, 3661) */
		reached[1][3576] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2203: // STATE 3574 - mutant_243.pml:341 - [(1)] (3661:0:1 - 1)
		IfNotBlocked
		reached[1][3574] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3661, 3576, 3661) */
		reached[1][3576] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2204: // STATE 3578 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3578] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2205: // STATE 3579 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3613:0:1 - 1)
		IfNotBlocked
		reached[1][3579] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3613, 3580, 3613) */
		reached[1][3580] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3613, 3581, 3613) */
		reached[1][3581] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2206: // STATE 3597 - mutant_243.pml:365 - [.(goto)] (0:3613:0 - 6)
		IfNotBlocked
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2207: // STATE 3582 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3613:0:1 - 1)
		IfNotBlocked
		reached[1][3582] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3613, 3583, 3613) */
		reached[1][3583] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3613, 3584, 3613) */
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2208: // STATE 3585 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3613:0:1 - 1)
		IfNotBlocked
		reached[1][3585] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3613, 3586, 3613) */
		reached[1][3586] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3613, 3587, 3613) */
		reached[1][3587] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2209: // STATE 3588 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3613:0:1 - 1)
		IfNotBlocked
		reached[1][3588] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3613, 3589, 3613) */
		reached[1][3589] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3613, 3590, 3613) */
		reached[1][3590] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2210: // STATE 3591 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3613:0:1 - 1)
		IfNotBlocked
		reached[1][3591] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3613, 3592, 3613) */
		reached[1][3592] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3613, 3593, 3613) */
		reached[1][3593] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2211: // STATE 3595 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3613:0 - 1)
		IfNotBlocked
		reached[1][3595] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3613, 3597, 3613) */
		reached[1][3597] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2212: // STATE 3600 - mutant_243.pml:251 - [((_pid==0))] (3608:0:0 - 1)
		IfNotBlocked
		reached[1][3600] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3601, 3608) */
		reached[1][3601] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3607, 3608) */
		reached[1][3607] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2213: // STATE 3602 - mutant_243.pml:253 - [((_pid==1))] (3608:0:0 - 1)
		IfNotBlocked
		reached[1][3602] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3603, 3608) */
		reached[1][3603] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3607, 3608) */
		reached[1][3607] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2214: // STATE 3604 - mutant_243.pml:255 - [((_pid>1))] (3608:0:0 - 1)
		IfNotBlocked
		reached[1][3604] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3605, 3608) */
		reached[1][3605] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3607, 3608) */
		reached[1][3607] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2215: // STATE 3608 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3608] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2216: // STATE 3609 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3661:1 - 1)
		IfNotBlocked
		reached[1][3609] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3661, 3614, 3661) */
		reached[1][3614] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2217: // STATE 3612 - mutant_243.pml:370 - [(1)] (3661:0:1 - 1)
		IfNotBlocked
		reached[1][3612] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3661, 3614, 3661) */
		reached[1][3614] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2218: // STATE 3616 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3616] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2219: // STATE 3617 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3617] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3651, 3618, 3651) */
		reached[1][3618] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3651, 3619, 3651) */
		reached[1][3619] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2220: // STATE 3635 - mutant_243.pml:394 - [.(goto)] (0:3651:0 - 6)
		IfNotBlocked
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2221: // STATE 3620 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3620] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3651, 3621, 3651) */
		reached[1][3621] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3651, 3622, 3651) */
		reached[1][3622] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2222: // STATE 3623 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3623] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3651, 3624, 3651) */
		reached[1][3624] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3651, 3625, 3651) */
		reached[1][3625] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2223: // STATE 3626 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3626] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3651, 3627, 3651) */
		reached[1][3627] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3651, 3628, 3651) */
		reached[1][3628] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2224: // STATE 3629 - mutant_243.pml:388 - [((STOP==ABORT))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3629] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3651, 3630, 3651) */
		reached[1][3630] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3651, 3631, 3651) */
		reached[1][3631] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2225: // STATE 3633 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3651:0 - 1)
		IfNotBlocked
		reached[1][3633] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3651, 3635, 3651) */
		reached[1][3635] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2226: // STATE 3638 - mutant_243.pml:263 - [((_pid==0))] (3646:0:0 - 1)
		IfNotBlocked
		reached[1][3638] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3639, 3646) */
		reached[1][3639] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3645, 3646) */
		reached[1][3645] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2227: // STATE 3640 - mutant_243.pml:265 - [((_pid==1))] (3646:0:0 - 1)
		IfNotBlocked
		reached[1][3640] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3641, 3646) */
		reached[1][3641] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3645, 3646) */
		reached[1][3645] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2228: // STATE 3642 - mutant_243.pml:267 - [((_pid>1))] (3646:0:0 - 1)
		IfNotBlocked
		reached[1][3642] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3643, 3646) */
		reached[1][3643] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3645, 3646) */
		reached[1][3645] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2229: // STATE 3646 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3646] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2230: // STATE 3647 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3661:1 - 1)
		IfNotBlocked
		reached[1][3647] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3661, 3652, 3661) */
		reached[1][3652] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2231: // STATE 3650 - mutant_243.pml:399 - [(1)] (3661:0:1 - 1)
		IfNotBlocked
		reached[1][3650] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3661, 3652, 3661) */
		reached[1][3652] = 1;
		;
		/* merge: .(goto)(3661, 3655, 3661) */
		reached[1][3655] = 1;
		;
		/* merge: j = (j+1)(3661, 3657, 3661) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2232: // STATE 3657 - mutant_243.pml:435 - [j = (j+1)] (0:3661:1 - 13)
		IfNotBlocked
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3662, 3661) */
		reached[1][3662] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2233: // STATE 3659 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3659] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2234: // STATE 3666 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3666] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2235: // STATE 3667 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3667] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2236: // STATE 3668 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3668] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2237: // STATE 3669 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (3689:0:1 - 1)
		IfNotBlocked
		reached[1][3669] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3689, 3670, 3689) */
		reached[1][3670] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3689, 3671, 3689) */
		reached[1][3671] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2238: // STATE 3687 - mutant_243.pml:306 - [.(goto)] (0:3689:0 - 6)
		IfNotBlocked
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2239: // STATE 3672 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3689:0:1 - 1)
		IfNotBlocked
		reached[1][3672] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3689, 3673, 3689) */
		reached[1][3673] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3689, 3674, 3689) */
		reached[1][3674] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2240: // STATE 3675 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3689:0:1 - 1)
		IfNotBlocked
		reached[1][3675] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3689, 3676, 3689) */
		reached[1][3676] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3689, 3677, 3689) */
		reached[1][3677] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2241: // STATE 3678 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3689:0:1 - 1)
		IfNotBlocked
		reached[1][3678] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3689, 3679, 3689) */
		reached[1][3679] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3689, 3680, 3689) */
		reached[1][3680] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2242: // STATE 3681 - mutant_243.pml:300 - [((START==ABORT))] (3689:0:1 - 1)
		IfNotBlocked
		reached[1][3681] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3689, 3682, 3689) */
		reached[1][3682] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3689, 3683, 3689) */
		reached[1][3683] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2243: // STATE 3685 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3689:0 - 1)
		IfNotBlocked
		reached[1][3685] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3689, 3687, 3689) */
		reached[1][3687] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2244: // STATE 3689 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3689] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2245: // STATE 3691 - mutant_243.pml:227 - [((_pid==0))] (3699:0:0 - 1)
		IfNotBlocked
		reached[1][3691] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3692, 3699) */
		reached[1][3692] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3698, 3699) */
		reached[1][3698] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2246: // STATE 3693 - mutant_243.pml:229 - [((_pid==1))] (3699:0:0 - 1)
		IfNotBlocked
		reached[1][3693] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3694, 3699) */
		reached[1][3694] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3698, 3699) */
		reached[1][3698] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2247: // STATE 3695 - mutant_243.pml:231 - [((_pid>1))] (3699:0:0 - 1)
		IfNotBlocked
		reached[1][3695] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3696, 3699) */
		reached[1][3696] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3698, 3699) */
		reached[1][3698] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2248: // STATE 3699 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3699] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2249: // STATE 3700 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3828:1 - 1)
		IfNotBlocked
		reached[1][3700] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3828, 3705, 3828) */
		reached[1][3705] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2250: // STATE 3703 - mutant_243.pml:312 - [(1)] (3828:0:1 - 1)
		IfNotBlocked
		reached[1][3703] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3828, 3705, 3828) */
		reached[1][3705] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2251: // STATE 3707 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3707] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2252: // STATE 3708 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3742:0:1 - 1)
		IfNotBlocked
		reached[1][3708] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3742, 3709, 3742) */
		reached[1][3709] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3742, 3710, 3742) */
		reached[1][3710] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2253: // STATE 3726 - mutant_243.pml:336 - [.(goto)] (0:3742:0 - 6)
		IfNotBlocked
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2254: // STATE 3711 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3742:0:1 - 1)
		IfNotBlocked
		reached[1][3711] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3742, 3712, 3742) */
		reached[1][3712] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3742, 3713, 3742) */
		reached[1][3713] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2255: // STATE 3714 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3742:0:1 - 1)
		IfNotBlocked
		reached[1][3714] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3742, 3715, 3742) */
		reached[1][3715] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3742, 3716, 3742) */
		reached[1][3716] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2256: // STATE 3717 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3742:0:1 - 1)
		IfNotBlocked
		reached[1][3717] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3742, 3718, 3742) */
		reached[1][3718] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3742, 3719, 3742) */
		reached[1][3719] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2257: // STATE 3720 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3742:0:1 - 1)
		IfNotBlocked
		reached[1][3720] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3742, 3721, 3742) */
		reached[1][3721] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3742, 3722, 3742) */
		reached[1][3722] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2258: // STATE 3724 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3742:0 - 1)
		IfNotBlocked
		reached[1][3724] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3742, 3726, 3742) */
		reached[1][3726] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2259: // STATE 3729 - mutant_243.pml:239 - [((_pid==0))] (3737:0:0 - 1)
		IfNotBlocked
		reached[1][3729] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3730, 3737) */
		reached[1][3730] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3736, 3737) */
		reached[1][3736] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2260: // STATE 3731 - mutant_243.pml:241 - [((_pid==1))] (3737:0:0 - 1)
		IfNotBlocked
		reached[1][3731] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3732, 3737) */
		reached[1][3732] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3736, 3737) */
		reached[1][3736] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2261: // STATE 3733 - mutant_243.pml:243 - [((_pid>1))] (3737:0:0 - 1)
		IfNotBlocked
		reached[1][3733] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3734, 3737) */
		reached[1][3734] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3736, 3737) */
		reached[1][3736] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2262: // STATE 3737 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3737] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2263: // STATE 3738 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3828:1 - 1)
		IfNotBlocked
		reached[1][3738] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3828, 3743, 3828) */
		reached[1][3743] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2264: // STATE 3741 - mutant_243.pml:341 - [(1)] (3828:0:1 - 1)
		IfNotBlocked
		reached[1][3741] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3828, 3743, 3828) */
		reached[1][3743] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2265: // STATE 3745 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3745] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2266: // STATE 3746 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3780:0:1 - 1)
		IfNotBlocked
		reached[1][3746] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3780, 3747, 3780) */
		reached[1][3747] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3780, 3748, 3780) */
		reached[1][3748] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2267: // STATE 3764 - mutant_243.pml:365 - [.(goto)] (0:3780:0 - 6)
		IfNotBlocked
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2268: // STATE 3749 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3780:0:1 - 1)
		IfNotBlocked
		reached[1][3749] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3780, 3750, 3780) */
		reached[1][3750] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3780, 3751, 3780) */
		reached[1][3751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2269: // STATE 3752 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3780:0:1 - 1)
		IfNotBlocked
		reached[1][3752] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3780, 3753, 3780) */
		reached[1][3753] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3780, 3754, 3780) */
		reached[1][3754] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2270: // STATE 3755 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3780:0:1 - 1)
		IfNotBlocked
		reached[1][3755] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3780, 3756, 3780) */
		reached[1][3756] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3780, 3757, 3780) */
		reached[1][3757] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2271: // STATE 3758 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3780:0:1 - 1)
		IfNotBlocked
		reached[1][3758] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3780, 3759, 3780) */
		reached[1][3759] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3780, 3760, 3780) */
		reached[1][3760] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2272: // STATE 3762 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3780:0 - 1)
		IfNotBlocked
		reached[1][3762] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3780, 3764, 3780) */
		reached[1][3764] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2273: // STATE 3767 - mutant_243.pml:251 - [((_pid==0))] (3775:0:0 - 1)
		IfNotBlocked
		reached[1][3767] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3768, 3775) */
		reached[1][3768] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3774, 3775) */
		reached[1][3774] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2274: // STATE 3769 - mutant_243.pml:253 - [((_pid==1))] (3775:0:0 - 1)
		IfNotBlocked
		reached[1][3769] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3770, 3775) */
		reached[1][3770] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3774, 3775) */
		reached[1][3774] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2275: // STATE 3771 - mutant_243.pml:255 - [((_pid>1))] (3775:0:0 - 1)
		IfNotBlocked
		reached[1][3771] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3772, 3775) */
		reached[1][3772] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3774, 3775) */
		reached[1][3774] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2276: // STATE 3775 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3775] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2277: // STATE 3776 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3828:1 - 1)
		IfNotBlocked
		reached[1][3776] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3828, 3781, 3828) */
		reached[1][3781] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2278: // STATE 3779 - mutant_243.pml:370 - [(1)] (3828:0:1 - 1)
		IfNotBlocked
		reached[1][3779] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3828, 3781, 3828) */
		reached[1][3781] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2279: // STATE 3783 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3783] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2280: // STATE 3784 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3818:0:1 - 1)
		IfNotBlocked
		reached[1][3784] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3818, 3785, 3818) */
		reached[1][3785] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3818, 3786, 3818) */
		reached[1][3786] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2281: // STATE 3802 - mutant_243.pml:394 - [.(goto)] (0:3818:0 - 6)
		IfNotBlocked
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2282: // STATE 3787 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3818:0:1 - 1)
		IfNotBlocked
		reached[1][3787] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3818, 3788, 3818) */
		reached[1][3788] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3818, 3789, 3818) */
		reached[1][3789] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2283: // STATE 3790 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3818:0:1 - 1)
		IfNotBlocked
		reached[1][3790] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3818, 3791, 3818) */
		reached[1][3791] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3818, 3792, 3818) */
		reached[1][3792] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2284: // STATE 3793 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3818:0:1 - 1)
		IfNotBlocked
		reached[1][3793] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3818, 3794, 3818) */
		reached[1][3794] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3818, 3795, 3818) */
		reached[1][3795] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2285: // STATE 3796 - mutant_243.pml:388 - [((STOP==ABORT))] (3818:0:1 - 1)
		IfNotBlocked
		reached[1][3796] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3818, 3797, 3818) */
		reached[1][3797] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3818, 3798, 3818) */
		reached[1][3798] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2286: // STATE 3800 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3818:0 - 1)
		IfNotBlocked
		reached[1][3800] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3818, 3802, 3818) */
		reached[1][3802] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2287: // STATE 3805 - mutant_243.pml:263 - [((_pid==0))] (3813:0:0 - 1)
		IfNotBlocked
		reached[1][3805] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3806, 3813) */
		reached[1][3806] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3812, 3813) */
		reached[1][3812] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2288: // STATE 3807 - mutant_243.pml:265 - [((_pid==1))] (3813:0:0 - 1)
		IfNotBlocked
		reached[1][3807] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3808, 3813) */
		reached[1][3808] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3812, 3813) */
		reached[1][3812] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2289: // STATE 3809 - mutant_243.pml:267 - [((_pid>1))] (3813:0:0 - 1)
		IfNotBlocked
		reached[1][3809] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3810, 3813) */
		reached[1][3810] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3812, 3813) */
		reached[1][3812] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2290: // STATE 3813 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3813] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2291: // STATE 3814 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3828:1 - 1)
		IfNotBlocked
		reached[1][3814] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3828, 3819, 3828) */
		reached[1][3819] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2292: // STATE 3817 - mutant_243.pml:399 - [(1)] (3828:0:1 - 1)
		IfNotBlocked
		reached[1][3817] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3828, 3819, 3828) */
		reached[1][3819] = 1;
		;
		/* merge: .(goto)(3828, 3822, 3828) */
		reached[1][3822] = 1;
		;
		/* merge: j = (j-1)(3828, 3824, 3828) */
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2293: // STATE 3824 - mutant_243.pml:446 - [j = (j-1)] (0:3828:1 - 13)
		IfNotBlocked
		reached[1][3824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3829, 3828) */
		reached[1][3829] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2294: // STATE 3826 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3826] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2295: // STATE 3836 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3836] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 2296: // STATE 3837 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3837] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2297: // STATE 3838 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3838] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2298: // STATE 3839 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (3859:0:1 - 1)
		IfNotBlocked
		reached[1][3839] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3859, 3840, 3859) */
		reached[1][3840] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3859, 3841, 3859) */
		reached[1][3841] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2299: // STATE 3857 - mutant_243.pml:306 - [.(goto)] (0:3859:0 - 6)
		IfNotBlocked
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2300: // STATE 3842 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3859:0:1 - 1)
		IfNotBlocked
		reached[1][3842] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3859, 3843, 3859) */
		reached[1][3843] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3859, 3844, 3859) */
		reached[1][3844] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2301: // STATE 3845 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3859:0:1 - 1)
		IfNotBlocked
		reached[1][3845] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3859, 3846, 3859) */
		reached[1][3846] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3859, 3847, 3859) */
		reached[1][3847] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2302: // STATE 3848 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3859:0:1 - 1)
		IfNotBlocked
		reached[1][3848] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3859, 3849, 3859) */
		reached[1][3849] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3859, 3850, 3859) */
		reached[1][3850] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2303: // STATE 3851 - mutant_243.pml:300 - [((START==ABORT))] (3859:0:1 - 1)
		IfNotBlocked
		reached[1][3851] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3859, 3852, 3859) */
		reached[1][3852] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3859, 3853, 3859) */
		reached[1][3853] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2304: // STATE 3855 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3859:0 - 1)
		IfNotBlocked
		reached[1][3855] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3859, 3857, 3859) */
		reached[1][3857] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2305: // STATE 3859 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3859] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2306: // STATE 3861 - mutant_243.pml:227 - [((_pid==0))] (3869:0:0 - 1)
		IfNotBlocked
		reached[1][3861] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 3862, 3869) */
		reached[1][3862] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3868, 3869) */
		reached[1][3868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2307: // STATE 3863 - mutant_243.pml:229 - [((_pid==1))] (3869:0:0 - 1)
		IfNotBlocked
		reached[1][3863] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 3864, 3869) */
		reached[1][3864] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3868, 3869) */
		reached[1][3868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2308: // STATE 3865 - mutant_243.pml:231 - [((_pid>1))] (3869:0:0 - 1)
		IfNotBlocked
		reached[1][3865] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 3866, 3869) */
		reached[1][3866] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3868, 3869) */
		reached[1][3868] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2309: // STATE 3869 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3869] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2310: // STATE 3870 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:3998:1 - 1)
		IfNotBlocked
		reached[1][3870] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3998, 3875, 3998) */
		reached[1][3875] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2311: // STATE 3873 - mutant_243.pml:312 - [(1)] (3998:0:1 - 1)
		IfNotBlocked
		reached[1][3873] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3998, 3875, 3998) */
		reached[1][3875] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2312: // STATE 3877 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3877] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2313: // STATE 3878 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3878] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3912, 3879, 3912) */
		reached[1][3879] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3912, 3880, 3912) */
		reached[1][3880] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2314: // STATE 3896 - mutant_243.pml:336 - [.(goto)] (0:3912:0 - 6)
		IfNotBlocked
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2315: // STATE 3881 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3881] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3912, 3882, 3912) */
		reached[1][3882] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3912, 3883, 3912) */
		reached[1][3883] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2316: // STATE 3884 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3884] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3912, 3885, 3912) */
		reached[1][3885] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3912, 3886, 3912) */
		reached[1][3886] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2317: // STATE 3887 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3887] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3912, 3888, 3912) */
		reached[1][3888] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3912, 3889, 3912) */
		reached[1][3889] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2318: // STATE 3890 - mutant_243.pml:330 - [((PAUSE==ABORT))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3890] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3912, 3891, 3912) */
		reached[1][3891] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3912, 3892, 3912) */
		reached[1][3892] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2319: // STATE 3894 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3912:0 - 1)
		IfNotBlocked
		reached[1][3894] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3912, 3896, 3912) */
		reached[1][3896] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2320: // STATE 3899 - mutant_243.pml:239 - [((_pid==0))] (3907:0:0 - 1)
		IfNotBlocked
		reached[1][3899] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3900, 3907) */
		reached[1][3900] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3906, 3907) */
		reached[1][3906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2321: // STATE 3901 - mutant_243.pml:241 - [((_pid==1))] (3907:0:0 - 1)
		IfNotBlocked
		reached[1][3901] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 3902, 3907) */
		reached[1][3902] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3906, 3907) */
		reached[1][3906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2322: // STATE 3903 - mutant_243.pml:243 - [((_pid>1))] (3907:0:0 - 1)
		IfNotBlocked
		reached[1][3903] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 3904, 3907) */
		reached[1][3904] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3906, 3907) */
		reached[1][3906] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2323: // STATE 3907 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3907] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2324: // STATE 3908 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:3998:1 - 1)
		IfNotBlocked
		reached[1][3908] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3998, 3913, 3998) */
		reached[1][3913] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2325: // STATE 3911 - mutant_243.pml:341 - [(1)] (3998:0:1 - 1)
		IfNotBlocked
		reached[1][3911] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3998, 3913, 3998) */
		reached[1][3913] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2326: // STATE 3915 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3915] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2327: // STATE 3916 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3950:0:1 - 1)
		IfNotBlocked
		reached[1][3916] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3950, 3917, 3950) */
		reached[1][3917] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3950, 3918, 3950) */
		reached[1][3918] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2328: // STATE 3934 - mutant_243.pml:365 - [.(goto)] (0:3950:0 - 6)
		IfNotBlocked
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2329: // STATE 3919 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3950:0:1 - 1)
		IfNotBlocked
		reached[1][3919] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3950, 3920, 3950) */
		reached[1][3920] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3950, 3921, 3950) */
		reached[1][3921] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2330: // STATE 3922 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3950:0:1 - 1)
		IfNotBlocked
		reached[1][3922] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3950, 3923, 3950) */
		reached[1][3923] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3950, 3924, 3950) */
		reached[1][3924] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2331: // STATE 3925 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3950:0:1 - 1)
		IfNotBlocked
		reached[1][3925] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3950, 3926, 3950) */
		reached[1][3926] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3950, 3927, 3950) */
		reached[1][3927] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2332: // STATE 3928 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (3950:0:1 - 1)
		IfNotBlocked
		reached[1][3928] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3950, 3929, 3950) */
		reached[1][3929] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3950, 3930, 3950) */
		reached[1][3930] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2333: // STATE 3932 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3950:0 - 1)
		IfNotBlocked
		reached[1][3932] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3950, 3934, 3950) */
		reached[1][3934] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2334: // STATE 3937 - mutant_243.pml:251 - [((_pid==0))] (3945:0:0 - 1)
		IfNotBlocked
		reached[1][3937] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3938, 3945) */
		reached[1][3938] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3944, 3945) */
		reached[1][3944] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2335: // STATE 3939 - mutant_243.pml:253 - [((_pid==1))] (3945:0:0 - 1)
		IfNotBlocked
		reached[1][3939] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 3940, 3945) */
		reached[1][3940] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3944, 3945) */
		reached[1][3944] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2336: // STATE 3941 - mutant_243.pml:255 - [((_pid>1))] (3945:0:0 - 1)
		IfNotBlocked
		reached[1][3941] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 3942, 3945) */
		reached[1][3942] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3944, 3945) */
		reached[1][3944] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2337: // STATE 3945 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3945] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2338: // STATE 3946 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:3998:1 - 1)
		IfNotBlocked
		reached[1][3946] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3998, 3951, 3998) */
		reached[1][3951] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2339: // STATE 3949 - mutant_243.pml:370 - [(1)] (3998:0:1 - 1)
		IfNotBlocked
		reached[1][3949] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3998, 3951, 3998) */
		reached[1][3951] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2340: // STATE 3953 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3953] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2341: // STATE 3954 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3988:0:1 - 1)
		IfNotBlocked
		reached[1][3954] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(3988, 3955, 3988) */
		reached[1][3955] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(3988, 3956, 3988) */
		reached[1][3956] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2342: // STATE 3972 - mutant_243.pml:394 - [.(goto)] (0:3988:0 - 6)
		IfNotBlocked
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2343: // STATE 3957 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3988:0:1 - 1)
		IfNotBlocked
		reached[1][3957] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3988, 3958, 3988) */
		reached[1][3958] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(3988, 3959, 3988) */
		reached[1][3959] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2344: // STATE 3960 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3988:0:1 - 1)
		IfNotBlocked
		reached[1][3960] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3988, 3961, 3988) */
		reached[1][3961] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3988, 3962, 3988) */
		reached[1][3962] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2345: // STATE 3963 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3988:0:1 - 1)
		IfNotBlocked
		reached[1][3963] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3988, 3964, 3988) */
		reached[1][3964] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(3988, 3965, 3988) */
		reached[1][3965] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2346: // STATE 3966 - mutant_243.pml:388 - [((STOP==ABORT))] (3988:0:1 - 1)
		IfNotBlocked
		reached[1][3966] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(3988, 3967, 3988) */
		reached[1][3967] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(3988, 3968, 3988) */
		reached[1][3968] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2347: // STATE 3970 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:3988:0 - 1)
		IfNotBlocked
		reached[1][3970] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(3988, 3972, 3988) */
		reached[1][3972] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2348: // STATE 3975 - mutant_243.pml:263 - [((_pid==0))] (3983:0:0 - 1)
		IfNotBlocked
		reached[1][3975] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 3976, 3983) */
		reached[1][3976] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3982, 3983) */
		reached[1][3982] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2349: // STATE 3977 - mutant_243.pml:265 - [((_pid==1))] (3983:0:0 - 1)
		IfNotBlocked
		reached[1][3977] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 3978, 3983) */
		reached[1][3978] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3982, 3983) */
		reached[1][3982] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2350: // STATE 3979 - mutant_243.pml:267 - [((_pid>1))] (3983:0:0 - 1)
		IfNotBlocked
		reached[1][3979] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 3980, 3983) */
		reached[1][3980] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 3982, 3983) */
		reached[1][3982] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2351: // STATE 3983 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][3983] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2352: // STATE 3984 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:3998:1 - 1)
		IfNotBlocked
		reached[1][3984] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(3998, 3989, 3998) */
		reached[1][3989] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2353: // STATE 3987 - mutant_243.pml:399 - [(1)] (3998:0:1 - 1)
		IfNotBlocked
		reached[1][3987] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3998, 3989, 3998) */
		reached[1][3989] = 1;
		;
		/* merge: .(goto)(3998, 3992, 3998) */
		reached[1][3992] = 1;
		;
		/* merge: j = (j+1)(3998, 3994, 3998) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2354: // STATE 3994 - mutant_243.pml:435 - [j = (j+1)] (0:3998:1 - 13)
		IfNotBlocked
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3999, 3998) */
		reached[1][3999] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2355: // STATE 3996 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3996] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2356: // STATE 4002 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4002] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2357: // STATE 4003 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4003] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2358: // STATE 4004 - mutant_243.pml:227 - [((_pid==0))] (4012:0:0 - 1)
		IfNotBlocked
		reached[1][4004] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4005, 4012) */
		reached[1][4005] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4011, 4012) */
		reached[1][4011] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2359: // STATE 4006 - mutant_243.pml:229 - [((_pid==1))] (4012:0:0 - 1)
		IfNotBlocked
		reached[1][4006] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4007, 4012) */
		reached[1][4007] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4011, 4012) */
		reached[1][4011] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2360: // STATE 4008 - mutant_243.pml:231 - [((_pid>1))] (4012:0:0 - 1)
		IfNotBlocked
		reached[1][4008] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4009, 4012) */
		reached[1][4009] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4011, 4012) */
		reached[1][4011] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2361: // STATE 4012 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4012] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2362: // STATE 4013 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4057:1 - 1)
		IfNotBlocked
		reached[1][4013] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4057, 4052, 4057) */
		reached[1][4052] = 1;
		;
		/* merge: j = (j+1)(4057, 4053, 4057) */
		reached[1][4053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4058, 4057) */
		reached[1][4058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2363: // STATE 4015 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4015] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2364: // STATE 4016 - mutant_243.pml:251 - [((_pid==0))] (4024:0:0 - 1)
		IfNotBlocked
		reached[1][4016] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4017, 4024) */
		reached[1][4017] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4023, 4024) */
		reached[1][4023] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2365: // STATE 4018 - mutant_243.pml:253 - [((_pid==1))] (4024:0:0 - 1)
		IfNotBlocked
		reached[1][4018] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4019, 4024) */
		reached[1][4019] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4023, 4024) */
		reached[1][4023] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2366: // STATE 4020 - mutant_243.pml:255 - [((_pid>1))] (4024:0:0 - 1)
		IfNotBlocked
		reached[1][4020] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4021, 4024) */
		reached[1][4021] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4023, 4024) */
		reached[1][4023] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2367: // STATE 4024 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4024] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2368: // STATE 4025 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4057:1 - 1)
		IfNotBlocked
		reached[1][4025] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4057, 4052, 4057) */
		reached[1][4052] = 1;
		;
		/* merge: j = (j+1)(4057, 4053, 4057) */
		reached[1][4053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4058, 4057) */
		reached[1][4058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2369: // STATE 4027 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4027] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2370: // STATE 4028 - mutant_243.pml:239 - [((_pid==0))] (4036:0:0 - 1)
		IfNotBlocked
		reached[1][4028] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4029, 4036) */
		reached[1][4029] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4035, 4036) */
		reached[1][4035] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2371: // STATE 4030 - mutant_243.pml:241 - [((_pid==1))] (4036:0:0 - 1)
		IfNotBlocked
		reached[1][4030] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4031, 4036) */
		reached[1][4031] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4035, 4036) */
		reached[1][4035] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2372: // STATE 4032 - mutant_243.pml:243 - [((_pid>1))] (4036:0:0 - 1)
		IfNotBlocked
		reached[1][4032] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4033, 4036) */
		reached[1][4033] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4035, 4036) */
		reached[1][4035] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2373: // STATE 4036 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4036] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2374: // STATE 4037 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4057:1 - 1)
		IfNotBlocked
		reached[1][4037] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4057, 4052, 4057) */
		reached[1][4052] = 1;
		;
		/* merge: j = (j+1)(4057, 4053, 4057) */
		reached[1][4053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4058, 4057) */
		reached[1][4058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2375: // STATE 4039 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4039] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2376: // STATE 4040 - mutant_243.pml:263 - [((_pid==0))] (4048:0:0 - 1)
		IfNotBlocked
		reached[1][4040] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4041, 4048) */
		reached[1][4041] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4047, 4048) */
		reached[1][4047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2377: // STATE 4042 - mutant_243.pml:265 - [((_pid==1))] (4048:0:0 - 1)
		IfNotBlocked
		reached[1][4042] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4043, 4048) */
		reached[1][4043] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4047, 4048) */
		reached[1][4047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2378: // STATE 4044 - mutant_243.pml:267 - [((_pid>1))] (4048:0:0 - 1)
		IfNotBlocked
		reached[1][4044] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4045, 4048) */
		reached[1][4045] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4047, 4048) */
		reached[1][4047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2379: // STATE 4048 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4048] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2380: // STATE 4049 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4057:1 - 1)
		IfNotBlocked
		reached[1][4049] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4057, 4052, 4057) */
		reached[1][4052] = 1;
		;
		/* merge: j = (j+1)(4057, 4053, 4057) */
		reached[1][4053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4058, 4057) */
		reached[1][4058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2381: // STATE 4053 - mutant_243.pml:475 - [j = (j+1)] (0:4057:1 - 5)
		IfNotBlocked
		reached[1][4053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4058, 4057) */
		reached[1][4058] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2382: // STATE 4055 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4055] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2383: // STATE 4072 - mutant_243.pml:635 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4072] = 1;
		if (!((now.states[0]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2384: // STATE 4073 - mutant_243.pml:5 - [(((0==0)&&(6==0)))] (4084:0:0 - 1)
		IfNotBlocked
		reached[1][4073] = 1;
		if (!(((0==0)&&(6==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',4,3)(0, 4074, 4084) */
		reached[1][4074] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 4, 3);
		/* merge: .(goto)(0, 4082, 4084) */
		reached[1][4082] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2385: // STATE 4075 - mutant_243.pml:7 - [(((0==0)&&(6>0)))] (4084:0:0 - 1)
		IfNotBlocked
		reached[1][4075] = 1;
		if (!(((0==0)&&(6>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',4,6,3)(0, 4076, 4084) */
		reached[1][4076] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 4, 6, 3);
		/* merge: .(goto)(0, 4082, 4084) */
		reached[1][4082] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2386: // STATE 4077 - mutant_243.pml:9 - [(((0>0)&&(6==0)))] (4084:0:0 - 1)
		IfNotBlocked
		reached[1][4077] = 1;
		if (!(((0>0)&&(6==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,4,3)(0, 4078, 4084) */
		reached[1][4078] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 4, 3);
		/* merge: .(goto)(0, 4082, 4084) */
		reached[1][4082] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2387: // STATE 4079 - mutant_243.pml:11 - [(((0>0)&&(6>0)))] (4084:0:0 - 1)
		IfNotBlocked
		reached[1][4079] = 1;
		if (!(((0>0)&&(6>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,4,6,3)(0, 4080, 4084) */
		reached[1][4080] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 4, 6, 3);
		/* merge: .(goto)(0, 4082, 4084) */
		reached[1][4082] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2388: // STATE 4084 - mutant_243.pml:564 - [states[0] = 3] (0:0:1 - 5)
		IfNotBlocked
		reached[1][4084] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 3;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2389: // STATE 4085 - mutant_243.pml:552 - [((3==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4085] = 1;
		if (!((3==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2390: // STATE 4086 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4086] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2391: // STATE 4087 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4087] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 2392: // STATE 4088 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4088] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2393: // STATE 4090 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4090] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2394: // STATE 4091 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4091] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2395: // STATE 4092 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4092] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2396: // STATE 4093 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4093] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2397: // STATE 4094 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (4114:0:1 - 1)
		IfNotBlocked
		reached[1][4094] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4114, 4095, 4114) */
		reached[1][4095] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4114, 4096, 4114) */
		reached[1][4096] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2398: // STATE 4112 - mutant_243.pml:306 - [.(goto)] (0:4114:0 - 6)
		IfNotBlocked
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2399: // STATE 4097 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4114:0:1 - 1)
		IfNotBlocked
		reached[1][4097] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4114, 4098, 4114) */
		reached[1][4098] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4114, 4099, 4114) */
		reached[1][4099] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2400: // STATE 4100 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4114:0:1 - 1)
		IfNotBlocked
		reached[1][4100] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4114, 4101, 4114) */
		reached[1][4101] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4114, 4102, 4114) */
		reached[1][4102] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2401: // STATE 4103 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4114:0:1 - 1)
		IfNotBlocked
		reached[1][4103] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4114, 4104, 4114) */
		reached[1][4104] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4114, 4105, 4114) */
		reached[1][4105] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2402: // STATE 4106 - mutant_243.pml:300 - [((START==ABORT))] (4114:0:1 - 1)
		IfNotBlocked
		reached[1][4106] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4114, 4107, 4114) */
		reached[1][4107] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4114, 4108, 4114) */
		reached[1][4108] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2403: // STATE 4110 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4114:0 - 1)
		IfNotBlocked
		reached[1][4110] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4114, 4112, 4114) */
		reached[1][4112] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2404: // STATE 4114 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4114] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2405: // STATE 4116 - mutant_243.pml:227 - [((_pid==0))] (4124:0:0 - 1)
		IfNotBlocked
		reached[1][4116] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4117, 4124) */
		reached[1][4117] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4123, 4124) */
		reached[1][4123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2406: // STATE 4118 - mutant_243.pml:229 - [((_pid==1))] (4124:0:0 - 1)
		IfNotBlocked
		reached[1][4118] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4119, 4124) */
		reached[1][4119] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4123, 4124) */
		reached[1][4123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2407: // STATE 4120 - mutant_243.pml:231 - [((_pid>1))] (4124:0:0 - 1)
		IfNotBlocked
		reached[1][4120] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4121, 4124) */
		reached[1][4121] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4123, 4124) */
		reached[1][4123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2408: // STATE 4124 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4124] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2409: // STATE 4125 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4253:1 - 1)
		IfNotBlocked
		reached[1][4125] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4253, 4130, 4253) */
		reached[1][4130] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2410: // STATE 4128 - mutant_243.pml:312 - [(1)] (4253:0:1 - 1)
		IfNotBlocked
		reached[1][4128] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4253, 4130, 4253) */
		reached[1][4130] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2411: // STATE 4132 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4132] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2412: // STATE 4133 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4167:0:1 - 1)
		IfNotBlocked
		reached[1][4133] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4167, 4134, 4167) */
		reached[1][4134] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4167, 4135, 4167) */
		reached[1][4135] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2413: // STATE 4151 - mutant_243.pml:336 - [.(goto)] (0:4167:0 - 6)
		IfNotBlocked
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2414: // STATE 4136 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4167:0:1 - 1)
		IfNotBlocked
		reached[1][4136] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4167, 4137, 4167) */
		reached[1][4137] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4167, 4138, 4167) */
		reached[1][4138] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2415: // STATE 4139 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4167:0:1 - 1)
		IfNotBlocked
		reached[1][4139] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4167, 4140, 4167) */
		reached[1][4140] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4167, 4141, 4167) */
		reached[1][4141] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2416: // STATE 4142 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4167:0:1 - 1)
		IfNotBlocked
		reached[1][4142] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4167, 4143, 4167) */
		reached[1][4143] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4167, 4144, 4167) */
		reached[1][4144] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2417: // STATE 4145 - mutant_243.pml:330 - [((PAUSE==ABORT))] (4167:0:1 - 1)
		IfNotBlocked
		reached[1][4145] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4167, 4146, 4167) */
		reached[1][4146] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4167, 4147, 4167) */
		reached[1][4147] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2418: // STATE 4149 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4167:0 - 1)
		IfNotBlocked
		reached[1][4149] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4167, 4151, 4167) */
		reached[1][4151] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2419: // STATE 4154 - mutant_243.pml:239 - [((_pid==0))] (4162:0:0 - 1)
		IfNotBlocked
		reached[1][4154] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4155, 4162) */
		reached[1][4155] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4161, 4162) */
		reached[1][4161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2420: // STATE 4156 - mutant_243.pml:241 - [((_pid==1))] (4162:0:0 - 1)
		IfNotBlocked
		reached[1][4156] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4157, 4162) */
		reached[1][4157] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4161, 4162) */
		reached[1][4161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2421: // STATE 4158 - mutant_243.pml:243 - [((_pid>1))] (4162:0:0 - 1)
		IfNotBlocked
		reached[1][4158] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4159, 4162) */
		reached[1][4159] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4161, 4162) */
		reached[1][4161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2422: // STATE 4162 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4162] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2423: // STATE 4163 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4253:1 - 1)
		IfNotBlocked
		reached[1][4163] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4253, 4168, 4253) */
		reached[1][4168] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2424: // STATE 4166 - mutant_243.pml:341 - [(1)] (4253:0:1 - 1)
		IfNotBlocked
		reached[1][4166] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4253, 4168, 4253) */
		reached[1][4168] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2425: // STATE 4170 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4170] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2426: // STATE 4171 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4205:0:1 - 1)
		IfNotBlocked
		reached[1][4171] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4205, 4172, 4205) */
		reached[1][4172] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4205, 4173, 4205) */
		reached[1][4173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2427: // STATE 4189 - mutant_243.pml:365 - [.(goto)] (0:4205:0 - 6)
		IfNotBlocked
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2428: // STATE 4174 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4205:0:1 - 1)
		IfNotBlocked
		reached[1][4174] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4205, 4175, 4205) */
		reached[1][4175] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4205, 4176, 4205) */
		reached[1][4176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2429: // STATE 4177 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4205:0:1 - 1)
		IfNotBlocked
		reached[1][4177] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4205, 4178, 4205) */
		reached[1][4178] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4205, 4179, 4205) */
		reached[1][4179] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2430: // STATE 4180 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4205:0:1 - 1)
		IfNotBlocked
		reached[1][4180] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4205, 4181, 4205) */
		reached[1][4181] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4205, 4182, 4205) */
		reached[1][4182] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2431: // STATE 4183 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (4205:0:1 - 1)
		IfNotBlocked
		reached[1][4183] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4205, 4184, 4205) */
		reached[1][4184] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4205, 4185, 4205) */
		reached[1][4185] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2432: // STATE 4187 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4205:0 - 1)
		IfNotBlocked
		reached[1][4187] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4205, 4189, 4205) */
		reached[1][4189] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2433: // STATE 4192 - mutant_243.pml:251 - [((_pid==0))] (4200:0:0 - 1)
		IfNotBlocked
		reached[1][4192] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4193, 4200) */
		reached[1][4193] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4199, 4200) */
		reached[1][4199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2434: // STATE 4194 - mutant_243.pml:253 - [((_pid==1))] (4200:0:0 - 1)
		IfNotBlocked
		reached[1][4194] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4195, 4200) */
		reached[1][4195] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4199, 4200) */
		reached[1][4199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2435: // STATE 4196 - mutant_243.pml:255 - [((_pid>1))] (4200:0:0 - 1)
		IfNotBlocked
		reached[1][4196] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4197, 4200) */
		reached[1][4197] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4199, 4200) */
		reached[1][4199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2436: // STATE 4200 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4200] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2437: // STATE 4201 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4253:1 - 1)
		IfNotBlocked
		reached[1][4201] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4253, 4206, 4253) */
		reached[1][4206] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2438: // STATE 4204 - mutant_243.pml:370 - [(1)] (4253:0:1 - 1)
		IfNotBlocked
		reached[1][4204] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4253, 4206, 4253) */
		reached[1][4206] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2439: // STATE 4208 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4208] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2440: // STATE 4209 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4243:0:1 - 1)
		IfNotBlocked
		reached[1][4209] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4243, 4210, 4243) */
		reached[1][4210] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4243, 4211, 4243) */
		reached[1][4211] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2441: // STATE 4227 - mutant_243.pml:394 - [.(goto)] (0:4243:0 - 6)
		IfNotBlocked
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2442: // STATE 4212 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4243:0:1 - 1)
		IfNotBlocked
		reached[1][4212] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4243, 4213, 4243) */
		reached[1][4213] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4243, 4214, 4243) */
		reached[1][4214] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2443: // STATE 4215 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4243:0:1 - 1)
		IfNotBlocked
		reached[1][4215] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4243, 4216, 4243) */
		reached[1][4216] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4243, 4217, 4243) */
		reached[1][4217] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2444: // STATE 4218 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4243:0:1 - 1)
		IfNotBlocked
		reached[1][4218] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4243, 4219, 4243) */
		reached[1][4219] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4243, 4220, 4243) */
		reached[1][4220] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2445: // STATE 4221 - mutant_243.pml:388 - [((STOP==ABORT))] (4243:0:1 - 1)
		IfNotBlocked
		reached[1][4221] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4243, 4222, 4243) */
		reached[1][4222] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4243, 4223, 4243) */
		reached[1][4223] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2446: // STATE 4225 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4243:0 - 1)
		IfNotBlocked
		reached[1][4225] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4243, 4227, 4243) */
		reached[1][4227] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2447: // STATE 4230 - mutant_243.pml:263 - [((_pid==0))] (4238:0:0 - 1)
		IfNotBlocked
		reached[1][4230] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4231, 4238) */
		reached[1][4231] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4237, 4238) */
		reached[1][4237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2448: // STATE 4232 - mutant_243.pml:265 - [((_pid==1))] (4238:0:0 - 1)
		IfNotBlocked
		reached[1][4232] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4233, 4238) */
		reached[1][4233] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4237, 4238) */
		reached[1][4237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2449: // STATE 4234 - mutant_243.pml:267 - [((_pid>1))] (4238:0:0 - 1)
		IfNotBlocked
		reached[1][4234] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4235, 4238) */
		reached[1][4235] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4237, 4238) */
		reached[1][4237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2450: // STATE 4238 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4238] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2451: // STATE 4239 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4253:1 - 1)
		IfNotBlocked
		reached[1][4239] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4253, 4244, 4253) */
		reached[1][4244] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2452: // STATE 4242 - mutant_243.pml:399 - [(1)] (4253:0:1 - 1)
		IfNotBlocked
		reached[1][4242] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4253, 4244, 4253) */
		reached[1][4244] = 1;
		;
		/* merge: .(goto)(4253, 4247, 4253) */
		reached[1][4247] = 1;
		;
		/* merge: j = (j+1)(4253, 4249, 4253) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2453: // STATE 4249 - mutant_243.pml:435 - [j = (j+1)] (0:4253:1 - 13)
		IfNotBlocked
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4254, 4253) */
		reached[1][4254] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2454: // STATE 4251 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2455: // STATE 4258 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4258] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2456: // STATE 4259 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4259] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2457: // STATE 4260 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4260] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2458: // STATE 4261 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (4281:0:1 - 1)
		IfNotBlocked
		reached[1][4261] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4281, 4262, 4281) */
		reached[1][4262] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4281, 4263, 4281) */
		reached[1][4263] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2459: // STATE 4279 - mutant_243.pml:306 - [.(goto)] (0:4281:0 - 6)
		IfNotBlocked
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2460: // STATE 4264 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4281:0:1 - 1)
		IfNotBlocked
		reached[1][4264] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4281, 4265, 4281) */
		reached[1][4265] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4281, 4266, 4281) */
		reached[1][4266] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2461: // STATE 4267 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4281:0:1 - 1)
		IfNotBlocked
		reached[1][4267] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4281, 4268, 4281) */
		reached[1][4268] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4281, 4269, 4281) */
		reached[1][4269] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2462: // STATE 4270 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4281:0:1 - 1)
		IfNotBlocked
		reached[1][4270] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4281, 4271, 4281) */
		reached[1][4271] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4281, 4272, 4281) */
		reached[1][4272] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2463: // STATE 4273 - mutant_243.pml:300 - [((START==ABORT))] (4281:0:1 - 1)
		IfNotBlocked
		reached[1][4273] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4281, 4274, 4281) */
		reached[1][4274] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4281, 4275, 4281) */
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2464: // STATE 4277 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4281:0 - 1)
		IfNotBlocked
		reached[1][4277] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4281, 4279, 4281) */
		reached[1][4279] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2465: // STATE 4281 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4281] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2466: // STATE 4283 - mutant_243.pml:227 - [((_pid==0))] (4291:0:0 - 1)
		IfNotBlocked
		reached[1][4283] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4284, 4291) */
		reached[1][4284] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4290, 4291) */
		reached[1][4290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2467: // STATE 4285 - mutant_243.pml:229 - [((_pid==1))] (4291:0:0 - 1)
		IfNotBlocked
		reached[1][4285] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4286, 4291) */
		reached[1][4286] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4290, 4291) */
		reached[1][4290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2468: // STATE 4287 - mutant_243.pml:231 - [((_pid>1))] (4291:0:0 - 1)
		IfNotBlocked
		reached[1][4287] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4288, 4291) */
		reached[1][4288] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4290, 4291) */
		reached[1][4290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2469: // STATE 4291 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4291] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2470: // STATE 4292 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4420:1 - 1)
		IfNotBlocked
		reached[1][4292] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4420, 4297, 4420) */
		reached[1][4297] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2471: // STATE 4295 - mutant_243.pml:312 - [(1)] (4420:0:1 - 1)
		IfNotBlocked
		reached[1][4295] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4420, 4297, 4420) */
		reached[1][4297] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2472: // STATE 4299 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4299] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2473: // STATE 4300 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4334:0:1 - 1)
		IfNotBlocked
		reached[1][4300] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4334, 4301, 4334) */
		reached[1][4301] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4334, 4302, 4334) */
		reached[1][4302] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2474: // STATE 4318 - mutant_243.pml:336 - [.(goto)] (0:4334:0 - 6)
		IfNotBlocked
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2475: // STATE 4303 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4334:0:1 - 1)
		IfNotBlocked
		reached[1][4303] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4334, 4304, 4334) */
		reached[1][4304] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4334, 4305, 4334) */
		reached[1][4305] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2476: // STATE 4306 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4334:0:1 - 1)
		IfNotBlocked
		reached[1][4306] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4334, 4307, 4334) */
		reached[1][4307] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4334, 4308, 4334) */
		reached[1][4308] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2477: // STATE 4309 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4334:0:1 - 1)
		IfNotBlocked
		reached[1][4309] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4334, 4310, 4334) */
		reached[1][4310] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4334, 4311, 4334) */
		reached[1][4311] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2478: // STATE 4312 - mutant_243.pml:330 - [((PAUSE==ABORT))] (4334:0:1 - 1)
		IfNotBlocked
		reached[1][4312] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4334, 4313, 4334) */
		reached[1][4313] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4334, 4314, 4334) */
		reached[1][4314] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2479: // STATE 4316 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4334:0 - 1)
		IfNotBlocked
		reached[1][4316] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4334, 4318, 4334) */
		reached[1][4318] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2480: // STATE 4321 - mutant_243.pml:239 - [((_pid==0))] (4329:0:0 - 1)
		IfNotBlocked
		reached[1][4321] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4322, 4329) */
		reached[1][4322] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4328, 4329) */
		reached[1][4328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2481: // STATE 4323 - mutant_243.pml:241 - [((_pid==1))] (4329:0:0 - 1)
		IfNotBlocked
		reached[1][4323] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4324, 4329) */
		reached[1][4324] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4328, 4329) */
		reached[1][4328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2482: // STATE 4325 - mutant_243.pml:243 - [((_pid>1))] (4329:0:0 - 1)
		IfNotBlocked
		reached[1][4325] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4326, 4329) */
		reached[1][4326] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4328, 4329) */
		reached[1][4328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2483: // STATE 4329 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4329] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2484: // STATE 4330 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4420:1 - 1)
		IfNotBlocked
		reached[1][4330] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4420, 4335, 4420) */
		reached[1][4335] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2485: // STATE 4333 - mutant_243.pml:341 - [(1)] (4420:0:1 - 1)
		IfNotBlocked
		reached[1][4333] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4420, 4335, 4420) */
		reached[1][4335] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2486: // STATE 4337 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4337] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2487: // STATE 4338 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4372:0:1 - 1)
		IfNotBlocked
		reached[1][4338] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4372, 4339, 4372) */
		reached[1][4339] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4372, 4340, 4372) */
		reached[1][4340] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2488: // STATE 4356 - mutant_243.pml:365 - [.(goto)] (0:4372:0 - 6)
		IfNotBlocked
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2489: // STATE 4341 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4372:0:1 - 1)
		IfNotBlocked
		reached[1][4341] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4372, 4342, 4372) */
		reached[1][4342] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4372, 4343, 4372) */
		reached[1][4343] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2490: // STATE 4344 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4372:0:1 - 1)
		IfNotBlocked
		reached[1][4344] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4372, 4345, 4372) */
		reached[1][4345] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4372, 4346, 4372) */
		reached[1][4346] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2491: // STATE 4347 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4372:0:1 - 1)
		IfNotBlocked
		reached[1][4347] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4372, 4348, 4372) */
		reached[1][4348] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4372, 4349, 4372) */
		reached[1][4349] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2492: // STATE 4350 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (4372:0:1 - 1)
		IfNotBlocked
		reached[1][4350] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4372, 4351, 4372) */
		reached[1][4351] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4372, 4352, 4372) */
		reached[1][4352] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2493: // STATE 4354 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4372:0 - 1)
		IfNotBlocked
		reached[1][4354] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4372, 4356, 4372) */
		reached[1][4356] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2494: // STATE 4359 - mutant_243.pml:251 - [((_pid==0))] (4367:0:0 - 1)
		IfNotBlocked
		reached[1][4359] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4360, 4367) */
		reached[1][4360] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4366, 4367) */
		reached[1][4366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2495: // STATE 4361 - mutant_243.pml:253 - [((_pid==1))] (4367:0:0 - 1)
		IfNotBlocked
		reached[1][4361] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4362, 4367) */
		reached[1][4362] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4366, 4367) */
		reached[1][4366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2496: // STATE 4363 - mutant_243.pml:255 - [((_pid>1))] (4367:0:0 - 1)
		IfNotBlocked
		reached[1][4363] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4364, 4367) */
		reached[1][4364] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4366, 4367) */
		reached[1][4366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2497: // STATE 4367 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4367] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2498: // STATE 4368 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4420:1 - 1)
		IfNotBlocked
		reached[1][4368] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4420, 4373, 4420) */
		reached[1][4373] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2499: // STATE 4371 - mutant_243.pml:370 - [(1)] (4420:0:1 - 1)
		IfNotBlocked
		reached[1][4371] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4420, 4373, 4420) */
		reached[1][4373] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2500: // STATE 4375 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4375] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2501: // STATE 4376 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4410:0:1 - 1)
		IfNotBlocked
		reached[1][4376] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4410, 4377, 4410) */
		reached[1][4377] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4410, 4378, 4410) */
		reached[1][4378] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2502: // STATE 4394 - mutant_243.pml:394 - [.(goto)] (0:4410:0 - 6)
		IfNotBlocked
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2503: // STATE 4379 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4410:0:1 - 1)
		IfNotBlocked
		reached[1][4379] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4410, 4380, 4410) */
		reached[1][4380] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4410, 4381, 4410) */
		reached[1][4381] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2504: // STATE 4382 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4410:0:1 - 1)
		IfNotBlocked
		reached[1][4382] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4410, 4383, 4410) */
		reached[1][4383] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4410, 4384, 4410) */
		reached[1][4384] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2505: // STATE 4385 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4410:0:1 - 1)
		IfNotBlocked
		reached[1][4385] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4410, 4386, 4410) */
		reached[1][4386] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4410, 4387, 4410) */
		reached[1][4387] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2506: // STATE 4388 - mutant_243.pml:388 - [((STOP==ABORT))] (4410:0:1 - 1)
		IfNotBlocked
		reached[1][4388] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4410, 4389, 4410) */
		reached[1][4389] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4410, 4390, 4410) */
		reached[1][4390] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2507: // STATE 4392 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4410:0 - 1)
		IfNotBlocked
		reached[1][4392] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4410, 4394, 4410) */
		reached[1][4394] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2508: // STATE 4397 - mutant_243.pml:263 - [((_pid==0))] (4405:0:0 - 1)
		IfNotBlocked
		reached[1][4397] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4398, 4405) */
		reached[1][4398] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4404, 4405) */
		reached[1][4404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2509: // STATE 4399 - mutant_243.pml:265 - [((_pid==1))] (4405:0:0 - 1)
		IfNotBlocked
		reached[1][4399] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4400, 4405) */
		reached[1][4400] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4404, 4405) */
		reached[1][4404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2510: // STATE 4401 - mutant_243.pml:267 - [((_pid>1))] (4405:0:0 - 1)
		IfNotBlocked
		reached[1][4401] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4402, 4405) */
		reached[1][4402] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4404, 4405) */
		reached[1][4404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2511: // STATE 4405 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4405] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2512: // STATE 4406 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4420:1 - 1)
		IfNotBlocked
		reached[1][4406] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4420, 4411, 4420) */
		reached[1][4411] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2513: // STATE 4409 - mutant_243.pml:399 - [(1)] (4420:0:1 - 1)
		IfNotBlocked
		reached[1][4409] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4420, 4411, 4420) */
		reached[1][4411] = 1;
		;
		/* merge: .(goto)(4420, 4414, 4420) */
		reached[1][4414] = 1;
		;
		/* merge: j = (j-1)(4420, 4416, 4420) */
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2514: // STATE 4416 - mutant_243.pml:446 - [j = (j-1)] (0:4420:1 - 13)
		IfNotBlocked
		reached[1][4416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4421, 4420) */
		reached[1][4421] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2515: // STATE 4418 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2516: // STATE 4428 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4428] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 2517: // STATE 4429 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4429] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2518: // STATE 4430 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4430] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2519: // STATE 4431 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (4451:0:1 - 1)
		IfNotBlocked
		reached[1][4431] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4451, 4432, 4451) */
		reached[1][4432] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4451, 4433, 4451) */
		reached[1][4433] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2520: // STATE 4449 - mutant_243.pml:306 - [.(goto)] (0:4451:0 - 6)
		IfNotBlocked
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2521: // STATE 4434 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4451:0:1 - 1)
		IfNotBlocked
		reached[1][4434] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4451, 4435, 4451) */
		reached[1][4435] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4451, 4436, 4451) */
		reached[1][4436] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2522: // STATE 4437 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4451:0:1 - 1)
		IfNotBlocked
		reached[1][4437] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4451, 4438, 4451) */
		reached[1][4438] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4451, 4439, 4451) */
		reached[1][4439] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2523: // STATE 4440 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4451:0:1 - 1)
		IfNotBlocked
		reached[1][4440] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4451, 4441, 4451) */
		reached[1][4441] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4451, 4442, 4451) */
		reached[1][4442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2524: // STATE 4443 - mutant_243.pml:300 - [((START==ABORT))] (4451:0:1 - 1)
		IfNotBlocked
		reached[1][4443] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4451, 4444, 4451) */
		reached[1][4444] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4451, 4445, 4451) */
		reached[1][4445] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2525: // STATE 4447 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4451:0 - 1)
		IfNotBlocked
		reached[1][4447] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4451, 4449, 4451) */
		reached[1][4449] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2526: // STATE 4451 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4451] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2527: // STATE 4453 - mutant_243.pml:227 - [((_pid==0))] (4461:0:0 - 1)
		IfNotBlocked
		reached[1][4453] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4454, 4461) */
		reached[1][4454] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4460, 4461) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2528: // STATE 4455 - mutant_243.pml:229 - [((_pid==1))] (4461:0:0 - 1)
		IfNotBlocked
		reached[1][4455] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4456, 4461) */
		reached[1][4456] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4460, 4461) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2529: // STATE 4457 - mutant_243.pml:231 - [((_pid>1))] (4461:0:0 - 1)
		IfNotBlocked
		reached[1][4457] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4458, 4461) */
		reached[1][4458] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4460, 4461) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2530: // STATE 4461 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4461] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2531: // STATE 4462 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4590:1 - 1)
		IfNotBlocked
		reached[1][4462] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4590, 4467, 4590) */
		reached[1][4467] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2532: // STATE 4465 - mutant_243.pml:312 - [(1)] (4590:0:1 - 1)
		IfNotBlocked
		reached[1][4465] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4590, 4467, 4590) */
		reached[1][4467] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2533: // STATE 4469 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4469] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2534: // STATE 4470 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4504:0:1 - 1)
		IfNotBlocked
		reached[1][4470] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4504, 4471, 4504) */
		reached[1][4471] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4504, 4472, 4504) */
		reached[1][4472] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2535: // STATE 4488 - mutant_243.pml:336 - [.(goto)] (0:4504:0 - 6)
		IfNotBlocked
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2536: // STATE 4473 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4504:0:1 - 1)
		IfNotBlocked
		reached[1][4473] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4504, 4474, 4504) */
		reached[1][4474] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4504, 4475, 4504) */
		reached[1][4475] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2537: // STATE 4476 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4504:0:1 - 1)
		IfNotBlocked
		reached[1][4476] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4504, 4477, 4504) */
		reached[1][4477] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4504, 4478, 4504) */
		reached[1][4478] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2538: // STATE 4479 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4504:0:1 - 1)
		IfNotBlocked
		reached[1][4479] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4504, 4480, 4504) */
		reached[1][4480] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4504, 4481, 4504) */
		reached[1][4481] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2539: // STATE 4482 - mutant_243.pml:330 - [((PAUSE==ABORT))] (4504:0:1 - 1)
		IfNotBlocked
		reached[1][4482] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4504, 4483, 4504) */
		reached[1][4483] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4504, 4484, 4504) */
		reached[1][4484] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2540: // STATE 4486 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4504:0 - 1)
		IfNotBlocked
		reached[1][4486] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4504, 4488, 4504) */
		reached[1][4488] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2541: // STATE 4491 - mutant_243.pml:239 - [((_pid==0))] (4499:0:0 - 1)
		IfNotBlocked
		reached[1][4491] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4492, 4499) */
		reached[1][4492] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4498, 4499) */
		reached[1][4498] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2542: // STATE 4493 - mutant_243.pml:241 - [((_pid==1))] (4499:0:0 - 1)
		IfNotBlocked
		reached[1][4493] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4494, 4499) */
		reached[1][4494] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4498, 4499) */
		reached[1][4498] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2543: // STATE 4495 - mutant_243.pml:243 - [((_pid>1))] (4499:0:0 - 1)
		IfNotBlocked
		reached[1][4495] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4496, 4499) */
		reached[1][4496] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4498, 4499) */
		reached[1][4498] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2544: // STATE 4499 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4499] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2545: // STATE 4500 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4590:1 - 1)
		IfNotBlocked
		reached[1][4500] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4590, 4505, 4590) */
		reached[1][4505] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2546: // STATE 4503 - mutant_243.pml:341 - [(1)] (4590:0:1 - 1)
		IfNotBlocked
		reached[1][4503] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4590, 4505, 4590) */
		reached[1][4505] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2547: // STATE 4507 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4507] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2548: // STATE 4508 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4542:0:1 - 1)
		IfNotBlocked
		reached[1][4508] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4542, 4509, 4542) */
		reached[1][4509] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4542, 4510, 4542) */
		reached[1][4510] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2549: // STATE 4526 - mutant_243.pml:365 - [.(goto)] (0:4542:0 - 6)
		IfNotBlocked
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2550: // STATE 4511 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4542:0:1 - 1)
		IfNotBlocked
		reached[1][4511] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4542, 4512, 4542) */
		reached[1][4512] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4542, 4513, 4542) */
		reached[1][4513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2551: // STATE 4514 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4542:0:1 - 1)
		IfNotBlocked
		reached[1][4514] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4542, 4515, 4542) */
		reached[1][4515] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4542, 4516, 4542) */
		reached[1][4516] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2552: // STATE 4517 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4542:0:1 - 1)
		IfNotBlocked
		reached[1][4517] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4542, 4518, 4542) */
		reached[1][4518] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4542, 4519, 4542) */
		reached[1][4519] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2553: // STATE 4520 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (4542:0:1 - 1)
		IfNotBlocked
		reached[1][4520] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4542, 4521, 4542) */
		reached[1][4521] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4542, 4522, 4542) */
		reached[1][4522] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2554: // STATE 4524 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4542:0 - 1)
		IfNotBlocked
		reached[1][4524] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4542, 4526, 4542) */
		reached[1][4526] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2555: // STATE 4529 - mutant_243.pml:251 - [((_pid==0))] (4537:0:0 - 1)
		IfNotBlocked
		reached[1][4529] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4530, 4537) */
		reached[1][4530] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4536, 4537) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2556: // STATE 4531 - mutant_243.pml:253 - [((_pid==1))] (4537:0:0 - 1)
		IfNotBlocked
		reached[1][4531] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4532, 4537) */
		reached[1][4532] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4536, 4537) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2557: // STATE 4533 - mutant_243.pml:255 - [((_pid>1))] (4537:0:0 - 1)
		IfNotBlocked
		reached[1][4533] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4534, 4537) */
		reached[1][4534] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4536, 4537) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2558: // STATE 4537 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4537] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2559: // STATE 4538 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4590:1 - 1)
		IfNotBlocked
		reached[1][4538] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4590, 4543, 4590) */
		reached[1][4543] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2560: // STATE 4541 - mutant_243.pml:370 - [(1)] (4590:0:1 - 1)
		IfNotBlocked
		reached[1][4541] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4590, 4543, 4590) */
		reached[1][4543] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2561: // STATE 4545 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4545] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2562: // STATE 4546 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4580:0:1 - 1)
		IfNotBlocked
		reached[1][4546] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4580, 4547, 4580) */
		reached[1][4547] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4580, 4548, 4580) */
		reached[1][4548] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2563: // STATE 4564 - mutant_243.pml:394 - [.(goto)] (0:4580:0 - 6)
		IfNotBlocked
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2564: // STATE 4549 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4580:0:1 - 1)
		IfNotBlocked
		reached[1][4549] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4580, 4550, 4580) */
		reached[1][4550] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4580, 4551, 4580) */
		reached[1][4551] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2565: // STATE 4552 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4580:0:1 - 1)
		IfNotBlocked
		reached[1][4552] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4580, 4553, 4580) */
		reached[1][4553] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4580, 4554, 4580) */
		reached[1][4554] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2566: // STATE 4555 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4580:0:1 - 1)
		IfNotBlocked
		reached[1][4555] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4580, 4556, 4580) */
		reached[1][4556] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4580, 4557, 4580) */
		reached[1][4557] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2567: // STATE 4558 - mutant_243.pml:388 - [((STOP==ABORT))] (4580:0:1 - 1)
		IfNotBlocked
		reached[1][4558] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4580, 4559, 4580) */
		reached[1][4559] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4580, 4560, 4580) */
		reached[1][4560] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2568: // STATE 4562 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4580:0 - 1)
		IfNotBlocked
		reached[1][4562] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4580, 4564, 4580) */
		reached[1][4564] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2569: // STATE 4567 - mutant_243.pml:263 - [((_pid==0))] (4575:0:0 - 1)
		IfNotBlocked
		reached[1][4567] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4568, 4575) */
		reached[1][4568] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4574, 4575) */
		reached[1][4574] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2570: // STATE 4569 - mutant_243.pml:265 - [((_pid==1))] (4575:0:0 - 1)
		IfNotBlocked
		reached[1][4569] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4570, 4575) */
		reached[1][4570] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4574, 4575) */
		reached[1][4574] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2571: // STATE 4571 - mutant_243.pml:267 - [((_pid>1))] (4575:0:0 - 1)
		IfNotBlocked
		reached[1][4571] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4572, 4575) */
		reached[1][4572] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4574, 4575) */
		reached[1][4574] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2572: // STATE 4575 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4575] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2573: // STATE 4576 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4590:1 - 1)
		IfNotBlocked
		reached[1][4576] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4590, 4581, 4590) */
		reached[1][4581] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2574: // STATE 4579 - mutant_243.pml:399 - [(1)] (4590:0:1 - 1)
		IfNotBlocked
		reached[1][4579] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4590, 4581, 4590) */
		reached[1][4581] = 1;
		;
		/* merge: .(goto)(4590, 4584, 4590) */
		reached[1][4584] = 1;
		;
		/* merge: j = (j+1)(4590, 4586, 4590) */
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2575: // STATE 4586 - mutant_243.pml:435 - [j = (j+1)] (0:4590:1 - 13)
		IfNotBlocked
		reached[1][4586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4591, 4590) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2576: // STATE 4588 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4588] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2577: // STATE 4594 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4594] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2578: // STATE 4595 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4595] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2579: // STATE 4596 - mutant_243.pml:227 - [((_pid==0))] (4604:0:0 - 1)
		IfNotBlocked
		reached[1][4596] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4597, 4604) */
		reached[1][4597] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4603, 4604) */
		reached[1][4603] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2580: // STATE 4598 - mutant_243.pml:229 - [((_pid==1))] (4604:0:0 - 1)
		IfNotBlocked
		reached[1][4598] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4599, 4604) */
		reached[1][4599] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4603, 4604) */
		reached[1][4603] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2581: // STATE 4600 - mutant_243.pml:231 - [((_pid>1))] (4604:0:0 - 1)
		IfNotBlocked
		reached[1][4600] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4601, 4604) */
		reached[1][4601] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4603, 4604) */
		reached[1][4603] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2582: // STATE 4604 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4604] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2583: // STATE 4605 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4649:1 - 1)
		IfNotBlocked
		reached[1][4605] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4649, 4644, 4649) */
		reached[1][4644] = 1;
		;
		/* merge: j = (j+1)(4649, 4645, 4649) */
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4650, 4649) */
		reached[1][4650] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2584: // STATE 4607 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4607] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2585: // STATE 4608 - mutant_243.pml:251 - [((_pid==0))] (4616:0:0 - 1)
		IfNotBlocked
		reached[1][4608] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4609, 4616) */
		reached[1][4609] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4615, 4616) */
		reached[1][4615] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2586: // STATE 4610 - mutant_243.pml:253 - [((_pid==1))] (4616:0:0 - 1)
		IfNotBlocked
		reached[1][4610] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4611, 4616) */
		reached[1][4611] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4615, 4616) */
		reached[1][4615] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2587: // STATE 4612 - mutant_243.pml:255 - [((_pid>1))] (4616:0:0 - 1)
		IfNotBlocked
		reached[1][4612] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4613, 4616) */
		reached[1][4613] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4615, 4616) */
		reached[1][4615] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2588: // STATE 4616 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4616] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2589: // STATE 4617 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4649:1 - 1)
		IfNotBlocked
		reached[1][4617] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4649, 4644, 4649) */
		reached[1][4644] = 1;
		;
		/* merge: j = (j+1)(4649, 4645, 4649) */
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4650, 4649) */
		reached[1][4650] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2590: // STATE 4619 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4619] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2591: // STATE 4620 - mutant_243.pml:239 - [((_pid==0))] (4628:0:0 - 1)
		IfNotBlocked
		reached[1][4620] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4621, 4628) */
		reached[1][4621] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4627, 4628) */
		reached[1][4627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2592: // STATE 4622 - mutant_243.pml:241 - [((_pid==1))] (4628:0:0 - 1)
		IfNotBlocked
		reached[1][4622] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4623, 4628) */
		reached[1][4623] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4627, 4628) */
		reached[1][4627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2593: // STATE 4624 - mutant_243.pml:243 - [((_pid>1))] (4628:0:0 - 1)
		IfNotBlocked
		reached[1][4624] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4625, 4628) */
		reached[1][4625] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4627, 4628) */
		reached[1][4627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2594: // STATE 4628 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4628] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2595: // STATE 4629 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4649:1 - 1)
		IfNotBlocked
		reached[1][4629] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4649, 4644, 4649) */
		reached[1][4644] = 1;
		;
		/* merge: j = (j+1)(4649, 4645, 4649) */
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4650, 4649) */
		reached[1][4650] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2596: // STATE 4631 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4631] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2597: // STATE 4632 - mutant_243.pml:263 - [((_pid==0))] (4640:0:0 - 1)
		IfNotBlocked
		reached[1][4632] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4633, 4640) */
		reached[1][4633] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4639, 4640) */
		reached[1][4639] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2598: // STATE 4634 - mutant_243.pml:265 - [((_pid==1))] (4640:0:0 - 1)
		IfNotBlocked
		reached[1][4634] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4635, 4640) */
		reached[1][4635] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4639, 4640) */
		reached[1][4639] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2599: // STATE 4636 - mutant_243.pml:267 - [((_pid>1))] (4640:0:0 - 1)
		IfNotBlocked
		reached[1][4636] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4637, 4640) */
		reached[1][4637] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4639, 4640) */
		reached[1][4639] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2600: // STATE 4640 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4640] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2601: // STATE 4641 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4649:1 - 1)
		IfNotBlocked
		reached[1][4641] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4649, 4644, 4649) */
		reached[1][4644] = 1;
		;
		/* merge: j = (j+1)(4649, 4645, 4649) */
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4650, 4649) */
		reached[1][4650] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2602: // STATE 4645 - mutant_243.pml:475 - [j = (j+1)] (0:4649:1 - 5)
		IfNotBlocked
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4650, 4649) */
		reached[1][4650] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2603: // STATE 4647 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4647] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2604: // STATE 4658 - mutant_243.pml:554 - [((3==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4658] = 1;
		if (!((3==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2605: // STATE 4659 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4659] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2606: // STATE 4660 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4660] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 2607: // STATE 4661 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4661] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2608: // STATE 4663 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4663] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2609: // STATE 4664 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4664] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2610: // STATE 4665 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4665] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2611: // STATE 4666 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4666] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2612: // STATE 4667 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (4687:0:1 - 1)
		IfNotBlocked
		reached[1][4667] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4687, 4668, 4687) */
		reached[1][4668] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4687, 4669, 4687) */
		reached[1][4669] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2613: // STATE 4685 - mutant_243.pml:306 - [.(goto)] (0:4687:0 - 6)
		IfNotBlocked
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2614: // STATE 4670 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4687:0:1 - 1)
		IfNotBlocked
		reached[1][4670] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4687, 4671, 4687) */
		reached[1][4671] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4687, 4672, 4687) */
		reached[1][4672] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2615: // STATE 4673 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4687:0:1 - 1)
		IfNotBlocked
		reached[1][4673] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4687, 4674, 4687) */
		reached[1][4674] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4687, 4675, 4687) */
		reached[1][4675] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2616: // STATE 4676 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4687:0:1 - 1)
		IfNotBlocked
		reached[1][4676] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4687, 4677, 4687) */
		reached[1][4677] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4687, 4678, 4687) */
		reached[1][4678] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2617: // STATE 4679 - mutant_243.pml:300 - [((START==ABORT))] (4687:0:1 - 1)
		IfNotBlocked
		reached[1][4679] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4687, 4680, 4687) */
		reached[1][4680] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4687, 4681, 4687) */
		reached[1][4681] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2618: // STATE 4683 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4687:0 - 1)
		IfNotBlocked
		reached[1][4683] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4687, 4685, 4687) */
		reached[1][4685] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2619: // STATE 4687 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4687] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2620: // STATE 4689 - mutant_243.pml:227 - [((_pid==0))] (4697:0:0 - 1)
		IfNotBlocked
		reached[1][4689] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4690, 4697) */
		reached[1][4690] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4696, 4697) */
		reached[1][4696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2621: // STATE 4691 - mutant_243.pml:229 - [((_pid==1))] (4697:0:0 - 1)
		IfNotBlocked
		reached[1][4691] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4692, 4697) */
		reached[1][4692] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4696, 4697) */
		reached[1][4696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2622: // STATE 4693 - mutant_243.pml:231 - [((_pid>1))] (4697:0:0 - 1)
		IfNotBlocked
		reached[1][4693] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4694, 4697) */
		reached[1][4694] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4696, 4697) */
		reached[1][4696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2623: // STATE 4697 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4697] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2624: // STATE 4698 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4826:1 - 1)
		IfNotBlocked
		reached[1][4698] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4826, 4703, 4826) */
		reached[1][4703] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2625: // STATE 4701 - mutant_243.pml:312 - [(1)] (4826:0:1 - 1)
		IfNotBlocked
		reached[1][4701] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4826, 4703, 4826) */
		reached[1][4703] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2626: // STATE 4705 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4705] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2627: // STATE 4706 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4740:0:1 - 1)
		IfNotBlocked
		reached[1][4706] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4740, 4707, 4740) */
		reached[1][4707] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4740, 4708, 4740) */
		reached[1][4708] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2628: // STATE 4724 - mutant_243.pml:336 - [.(goto)] (0:4740:0 - 6)
		IfNotBlocked
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2629: // STATE 4709 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4740:0:1 - 1)
		IfNotBlocked
		reached[1][4709] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4740, 4710, 4740) */
		reached[1][4710] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4740, 4711, 4740) */
		reached[1][4711] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2630: // STATE 4712 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4740:0:1 - 1)
		IfNotBlocked
		reached[1][4712] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4740, 4713, 4740) */
		reached[1][4713] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4740, 4714, 4740) */
		reached[1][4714] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2631: // STATE 4715 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4740:0:1 - 1)
		IfNotBlocked
		reached[1][4715] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4740, 4716, 4740) */
		reached[1][4716] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4740, 4717, 4740) */
		reached[1][4717] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2632: // STATE 4718 - mutant_243.pml:330 - [((PAUSE==ABORT))] (4740:0:1 - 1)
		IfNotBlocked
		reached[1][4718] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4740, 4719, 4740) */
		reached[1][4719] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4740, 4720, 4740) */
		reached[1][4720] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2633: // STATE 4722 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4740:0 - 1)
		IfNotBlocked
		reached[1][4722] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4740, 4724, 4740) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2634: // STATE 4727 - mutant_243.pml:239 - [((_pid==0))] (4735:0:0 - 1)
		IfNotBlocked
		reached[1][4727] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4728, 4735) */
		reached[1][4728] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4734, 4735) */
		reached[1][4734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2635: // STATE 4729 - mutant_243.pml:241 - [((_pid==1))] (4735:0:0 - 1)
		IfNotBlocked
		reached[1][4729] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4730, 4735) */
		reached[1][4730] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4734, 4735) */
		reached[1][4734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2636: // STATE 4731 - mutant_243.pml:243 - [((_pid>1))] (4735:0:0 - 1)
		IfNotBlocked
		reached[1][4731] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4732, 4735) */
		reached[1][4732] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4734, 4735) */
		reached[1][4734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2637: // STATE 4735 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4735] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2638: // STATE 4736 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4826:1 - 1)
		IfNotBlocked
		reached[1][4736] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4826, 4741, 4826) */
		reached[1][4741] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2639: // STATE 4739 - mutant_243.pml:341 - [(1)] (4826:0:1 - 1)
		IfNotBlocked
		reached[1][4739] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4826, 4741, 4826) */
		reached[1][4741] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2640: // STATE 4743 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4743] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2641: // STATE 4744 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4778:0:1 - 1)
		IfNotBlocked
		reached[1][4744] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4778, 4745, 4778) */
		reached[1][4745] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4778, 4746, 4778) */
		reached[1][4746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2642: // STATE 4762 - mutant_243.pml:365 - [.(goto)] (0:4778:0 - 6)
		IfNotBlocked
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2643: // STATE 4747 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4778:0:1 - 1)
		IfNotBlocked
		reached[1][4747] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4778, 4748, 4778) */
		reached[1][4748] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4778, 4749, 4778) */
		reached[1][4749] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2644: // STATE 4750 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4778:0:1 - 1)
		IfNotBlocked
		reached[1][4750] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4778, 4751, 4778) */
		reached[1][4751] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4778, 4752, 4778) */
		reached[1][4752] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2645: // STATE 4753 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4778:0:1 - 1)
		IfNotBlocked
		reached[1][4753] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4778, 4754, 4778) */
		reached[1][4754] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4778, 4755, 4778) */
		reached[1][4755] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2646: // STATE 4756 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (4778:0:1 - 1)
		IfNotBlocked
		reached[1][4756] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4778, 4757, 4778) */
		reached[1][4757] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4778, 4758, 4778) */
		reached[1][4758] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2647: // STATE 4760 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4778:0 - 1)
		IfNotBlocked
		reached[1][4760] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4778, 4762, 4778) */
		reached[1][4762] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2648: // STATE 4765 - mutant_243.pml:251 - [((_pid==0))] (4773:0:0 - 1)
		IfNotBlocked
		reached[1][4765] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4766, 4773) */
		reached[1][4766] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4772, 4773) */
		reached[1][4772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2649: // STATE 4767 - mutant_243.pml:253 - [((_pid==1))] (4773:0:0 - 1)
		IfNotBlocked
		reached[1][4767] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4768, 4773) */
		reached[1][4768] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4772, 4773) */
		reached[1][4772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2650: // STATE 4769 - mutant_243.pml:255 - [((_pid>1))] (4773:0:0 - 1)
		IfNotBlocked
		reached[1][4769] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4770, 4773) */
		reached[1][4770] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4772, 4773) */
		reached[1][4772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2651: // STATE 4773 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4773] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2652: // STATE 4774 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4826:1 - 1)
		IfNotBlocked
		reached[1][4774] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4826, 4779, 4826) */
		reached[1][4779] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2653: // STATE 4777 - mutant_243.pml:370 - [(1)] (4826:0:1 - 1)
		IfNotBlocked
		reached[1][4777] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4826, 4779, 4826) */
		reached[1][4779] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2654: // STATE 4781 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4781] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2655: // STATE 4782 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4816:0:1 - 1)
		IfNotBlocked
		reached[1][4782] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4816, 4783, 4816) */
		reached[1][4783] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4816, 4784, 4816) */
		reached[1][4784] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2656: // STATE 4800 - mutant_243.pml:394 - [.(goto)] (0:4816:0 - 6)
		IfNotBlocked
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2657: // STATE 4785 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4816:0:1 - 1)
		IfNotBlocked
		reached[1][4785] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4816, 4786, 4816) */
		reached[1][4786] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4816, 4787, 4816) */
		reached[1][4787] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2658: // STATE 4788 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4816:0:1 - 1)
		IfNotBlocked
		reached[1][4788] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4816, 4789, 4816) */
		reached[1][4789] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4816, 4790, 4816) */
		reached[1][4790] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2659: // STATE 4791 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4816:0:1 - 1)
		IfNotBlocked
		reached[1][4791] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4816, 4792, 4816) */
		reached[1][4792] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4816, 4793, 4816) */
		reached[1][4793] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2660: // STATE 4794 - mutant_243.pml:388 - [((STOP==ABORT))] (4816:0:1 - 1)
		IfNotBlocked
		reached[1][4794] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4816, 4795, 4816) */
		reached[1][4795] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4816, 4796, 4816) */
		reached[1][4796] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2661: // STATE 4798 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4816:0 - 1)
		IfNotBlocked
		reached[1][4798] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4816, 4800, 4816) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2662: // STATE 4803 - mutant_243.pml:263 - [((_pid==0))] (4811:0:0 - 1)
		IfNotBlocked
		reached[1][4803] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4804, 4811) */
		reached[1][4804] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4810, 4811) */
		reached[1][4810] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2663: // STATE 4805 - mutant_243.pml:265 - [((_pid==1))] (4811:0:0 - 1)
		IfNotBlocked
		reached[1][4805] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4806, 4811) */
		reached[1][4806] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4810, 4811) */
		reached[1][4810] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2664: // STATE 4807 - mutant_243.pml:267 - [((_pid>1))] (4811:0:0 - 1)
		IfNotBlocked
		reached[1][4807] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4808, 4811) */
		reached[1][4808] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4810, 4811) */
		reached[1][4810] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2665: // STATE 4811 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4811] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2666: // STATE 4812 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4826:1 - 1)
		IfNotBlocked
		reached[1][4812] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4826, 4817, 4826) */
		reached[1][4817] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2667: // STATE 4815 - mutant_243.pml:399 - [(1)] (4826:0:1 - 1)
		IfNotBlocked
		reached[1][4815] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4826, 4817, 4826) */
		reached[1][4817] = 1;
		;
		/* merge: .(goto)(4826, 4820, 4826) */
		reached[1][4820] = 1;
		;
		/* merge: j = (j+1)(4826, 4822, 4826) */
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2668: // STATE 4822 - mutant_243.pml:435 - [j = (j+1)] (0:4826:1 - 13)
		IfNotBlocked
		reached[1][4822] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4827, 4826) */
		reached[1][4827] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2669: // STATE 4824 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4824] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2670: // STATE 4831 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4831] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2671: // STATE 4832 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4832] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2672: // STATE 4833 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4833] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2673: // STATE 4834 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (4854:0:1 - 1)
		IfNotBlocked
		reached[1][4834] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4854, 4835, 4854) */
		reached[1][4835] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4854, 4836, 4854) */
		reached[1][4836] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2674: // STATE 4852 - mutant_243.pml:306 - [.(goto)] (0:4854:0 - 6)
		IfNotBlocked
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2675: // STATE 4837 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4854:0:1 - 1)
		IfNotBlocked
		reached[1][4837] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4854, 4838, 4854) */
		reached[1][4838] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4854, 4839, 4854) */
		reached[1][4839] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2676: // STATE 4840 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4854:0:1 - 1)
		IfNotBlocked
		reached[1][4840] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4854, 4841, 4854) */
		reached[1][4841] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4854, 4842, 4854) */
		reached[1][4842] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2677: // STATE 4843 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4854:0:1 - 1)
		IfNotBlocked
		reached[1][4843] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4854, 4844, 4854) */
		reached[1][4844] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4854, 4845, 4854) */
		reached[1][4845] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2678: // STATE 4846 - mutant_243.pml:300 - [((START==ABORT))] (4854:0:1 - 1)
		IfNotBlocked
		reached[1][4846] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4854, 4847, 4854) */
		reached[1][4847] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4854, 4848, 4854) */
		reached[1][4848] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2679: // STATE 4850 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4854:0 - 1)
		IfNotBlocked
		reached[1][4850] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4854, 4852, 4854) */
		reached[1][4852] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2680: // STATE 4854 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4854] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2681: // STATE 4856 - mutant_243.pml:227 - [((_pid==0))] (4864:0:0 - 1)
		IfNotBlocked
		reached[1][4856] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 4857, 4864) */
		reached[1][4857] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4863, 4864) */
		reached[1][4863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2682: // STATE 4858 - mutant_243.pml:229 - [((_pid==1))] (4864:0:0 - 1)
		IfNotBlocked
		reached[1][4858] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 4859, 4864) */
		reached[1][4859] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4863, 4864) */
		reached[1][4863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2683: // STATE 4860 - mutant_243.pml:231 - [((_pid>1))] (4864:0:0 - 1)
		IfNotBlocked
		reached[1][4860] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 4861, 4864) */
		reached[1][4861] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4863, 4864) */
		reached[1][4863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2684: // STATE 4864 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4864] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2685: // STATE 4865 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:4993:1 - 1)
		IfNotBlocked
		reached[1][4865] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4993, 4870, 4993) */
		reached[1][4870] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2686: // STATE 4868 - mutant_243.pml:312 - [(1)] (4993:0:1 - 1)
		IfNotBlocked
		reached[1][4868] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4993, 4870, 4993) */
		reached[1][4870] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2687: // STATE 4872 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4872] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2688: // STATE 4873 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4907:0:1 - 1)
		IfNotBlocked
		reached[1][4873] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4907, 4874, 4907) */
		reached[1][4874] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4907, 4875, 4907) */
		reached[1][4875] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2689: // STATE 4891 - mutant_243.pml:336 - [.(goto)] (0:4907:0 - 6)
		IfNotBlocked
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2690: // STATE 4876 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4907:0:1 - 1)
		IfNotBlocked
		reached[1][4876] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4907, 4877, 4907) */
		reached[1][4877] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4907, 4878, 4907) */
		reached[1][4878] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2691: // STATE 4879 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4907:0:1 - 1)
		IfNotBlocked
		reached[1][4879] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4907, 4880, 4907) */
		reached[1][4880] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4907, 4881, 4907) */
		reached[1][4881] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2692: // STATE 4882 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4907:0:1 - 1)
		IfNotBlocked
		reached[1][4882] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4907, 4883, 4907) */
		reached[1][4883] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4907, 4884, 4907) */
		reached[1][4884] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2693: // STATE 4885 - mutant_243.pml:330 - [((PAUSE==ABORT))] (4907:0:1 - 1)
		IfNotBlocked
		reached[1][4885] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4907, 4886, 4907) */
		reached[1][4886] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4907, 4887, 4907) */
		reached[1][4887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2694: // STATE 4889 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4907:0 - 1)
		IfNotBlocked
		reached[1][4889] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4907, 4891, 4907) */
		reached[1][4891] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2695: // STATE 4894 - mutant_243.pml:239 - [((_pid==0))] (4902:0:0 - 1)
		IfNotBlocked
		reached[1][4894] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4895, 4902) */
		reached[1][4895] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4901, 4902) */
		reached[1][4901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2696: // STATE 4896 - mutant_243.pml:241 - [((_pid==1))] (4902:0:0 - 1)
		IfNotBlocked
		reached[1][4896] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 4897, 4902) */
		reached[1][4897] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4901, 4902) */
		reached[1][4901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2697: // STATE 4898 - mutant_243.pml:243 - [((_pid>1))] (4902:0:0 - 1)
		IfNotBlocked
		reached[1][4898] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 4899, 4902) */
		reached[1][4899] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4901, 4902) */
		reached[1][4901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2698: // STATE 4902 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4902] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2699: // STATE 4903 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:4993:1 - 1)
		IfNotBlocked
		reached[1][4903] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4993, 4908, 4993) */
		reached[1][4908] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2700: // STATE 4906 - mutant_243.pml:341 - [(1)] (4993:0:1 - 1)
		IfNotBlocked
		reached[1][4906] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4993, 4908, 4993) */
		reached[1][4908] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2701: // STATE 4910 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4910] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2702: // STATE 4911 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4945:0:1 - 1)
		IfNotBlocked
		reached[1][4911] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4945, 4912, 4945) */
		reached[1][4912] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4945, 4913, 4945) */
		reached[1][4913] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2703: // STATE 4929 - mutant_243.pml:365 - [.(goto)] (0:4945:0 - 6)
		IfNotBlocked
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2704: // STATE 4914 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4945:0:1 - 1)
		IfNotBlocked
		reached[1][4914] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4945, 4915, 4945) */
		reached[1][4915] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4945, 4916, 4945) */
		reached[1][4916] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2705: // STATE 4917 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4945:0:1 - 1)
		IfNotBlocked
		reached[1][4917] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4945, 4918, 4945) */
		reached[1][4918] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4945, 4919, 4945) */
		reached[1][4919] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2706: // STATE 4920 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4945:0:1 - 1)
		IfNotBlocked
		reached[1][4920] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4945, 4921, 4945) */
		reached[1][4921] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4945, 4922, 4945) */
		reached[1][4922] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2707: // STATE 4923 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (4945:0:1 - 1)
		IfNotBlocked
		reached[1][4923] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4945, 4924, 4945) */
		reached[1][4924] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4945, 4925, 4945) */
		reached[1][4925] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2708: // STATE 4927 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4945:0 - 1)
		IfNotBlocked
		reached[1][4927] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4945, 4929, 4945) */
		reached[1][4929] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2709: // STATE 4932 - mutant_243.pml:251 - [((_pid==0))] (4940:0:0 - 1)
		IfNotBlocked
		reached[1][4932] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4933, 4940) */
		reached[1][4933] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4939, 4940) */
		reached[1][4939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2710: // STATE 4934 - mutant_243.pml:253 - [((_pid==1))] (4940:0:0 - 1)
		IfNotBlocked
		reached[1][4934] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 4935, 4940) */
		reached[1][4935] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4939, 4940) */
		reached[1][4939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2711: // STATE 4936 - mutant_243.pml:255 - [((_pid>1))] (4940:0:0 - 1)
		IfNotBlocked
		reached[1][4936] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 4937, 4940) */
		reached[1][4937] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4939, 4940) */
		reached[1][4939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2712: // STATE 4940 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4940] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2713: // STATE 4941 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:4993:1 - 1)
		IfNotBlocked
		reached[1][4941] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4993, 4946, 4993) */
		reached[1][4946] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2714: // STATE 4944 - mutant_243.pml:370 - [(1)] (4993:0:1 - 1)
		IfNotBlocked
		reached[1][4944] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4993, 4946, 4993) */
		reached[1][4946] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2715: // STATE 4948 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4948] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2716: // STATE 4949 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4983:0:1 - 1)
		IfNotBlocked
		reached[1][4949] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(4983, 4950, 4983) */
		reached[1][4950] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(4983, 4951, 4983) */
		reached[1][4951] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2717: // STATE 4967 - mutant_243.pml:394 - [.(goto)] (0:4983:0 - 6)
		IfNotBlocked
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2718: // STATE 4952 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4983:0:1 - 1)
		IfNotBlocked
		reached[1][4952] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4983, 4953, 4983) */
		reached[1][4953] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(4983, 4954, 4983) */
		reached[1][4954] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2719: // STATE 4955 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4983:0:1 - 1)
		IfNotBlocked
		reached[1][4955] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4983, 4956, 4983) */
		reached[1][4956] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4983, 4957, 4983) */
		reached[1][4957] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2720: // STATE 4958 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4983:0:1 - 1)
		IfNotBlocked
		reached[1][4958] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4983, 4959, 4983) */
		reached[1][4959] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(4983, 4960, 4983) */
		reached[1][4960] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2721: // STATE 4961 - mutant_243.pml:388 - [((STOP==ABORT))] (4983:0:1 - 1)
		IfNotBlocked
		reached[1][4961] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(4983, 4962, 4983) */
		reached[1][4962] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(4983, 4963, 4983) */
		reached[1][4963] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2722: // STATE 4965 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:4983:0 - 1)
		IfNotBlocked
		reached[1][4965] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(4983, 4967, 4983) */
		reached[1][4967] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2723: // STATE 4970 - mutant_243.pml:263 - [((_pid==0))] (4978:0:0 - 1)
		IfNotBlocked
		reached[1][4970] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 4971, 4978) */
		reached[1][4971] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4977, 4978) */
		reached[1][4977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2724: // STATE 4972 - mutant_243.pml:265 - [((_pid==1))] (4978:0:0 - 1)
		IfNotBlocked
		reached[1][4972] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 4973, 4978) */
		reached[1][4973] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4977, 4978) */
		reached[1][4977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2725: // STATE 4974 - mutant_243.pml:267 - [((_pid>1))] (4978:0:0 - 1)
		IfNotBlocked
		reached[1][4974] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 4975, 4978) */
		reached[1][4975] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 4977, 4978) */
		reached[1][4977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2726: // STATE 4978 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][4978] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2727: // STATE 4979 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:4993:1 - 1)
		IfNotBlocked
		reached[1][4979] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(4993, 4984, 4993) */
		reached[1][4984] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2728: // STATE 4982 - mutant_243.pml:399 - [(1)] (4993:0:1 - 1)
		IfNotBlocked
		reached[1][4982] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4993, 4984, 4993) */
		reached[1][4984] = 1;
		;
		/* merge: .(goto)(4993, 4987, 4993) */
		reached[1][4987] = 1;
		;
		/* merge: j = (j-1)(4993, 4989, 4993) */
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2729: // STATE 4989 - mutant_243.pml:446 - [j = (j-1)] (0:4993:1 - 13)
		IfNotBlocked
		reached[1][4989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4994, 4993) */
		reached[1][4994] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2730: // STATE 4991 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2731: // STATE 5001 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5001] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 2732: // STATE 5002 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5002] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2733: // STATE 5003 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5003] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2734: // STATE 5004 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (5024:0:1 - 1)
		IfNotBlocked
		reached[1][5004] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5024, 5005, 5024) */
		reached[1][5005] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5024, 5006, 5024) */
		reached[1][5006] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2735: // STATE 5022 - mutant_243.pml:306 - [.(goto)] (0:5024:0 - 6)
		IfNotBlocked
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2736: // STATE 5007 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5024:0:1 - 1)
		IfNotBlocked
		reached[1][5007] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5024, 5008, 5024) */
		reached[1][5008] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5024, 5009, 5024) */
		reached[1][5009] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2737: // STATE 5010 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5024:0:1 - 1)
		IfNotBlocked
		reached[1][5010] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5024, 5011, 5024) */
		reached[1][5011] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5024, 5012, 5024) */
		reached[1][5012] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2738: // STATE 5013 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5024:0:1 - 1)
		IfNotBlocked
		reached[1][5013] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5024, 5014, 5024) */
		reached[1][5014] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5024, 5015, 5024) */
		reached[1][5015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2739: // STATE 5016 - mutant_243.pml:300 - [((START==ABORT))] (5024:0:1 - 1)
		IfNotBlocked
		reached[1][5016] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5024, 5017, 5024) */
		reached[1][5017] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5024, 5018, 5024) */
		reached[1][5018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2740: // STATE 5020 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5024:0 - 1)
		IfNotBlocked
		reached[1][5020] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5024, 5022, 5024) */
		reached[1][5022] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2741: // STATE 5024 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5024] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2742: // STATE 5026 - mutant_243.pml:227 - [((_pid==0))] (5034:0:0 - 1)
		IfNotBlocked
		reached[1][5026] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5027, 5034) */
		reached[1][5027] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5033, 5034) */
		reached[1][5033] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2743: // STATE 5028 - mutant_243.pml:229 - [((_pid==1))] (5034:0:0 - 1)
		IfNotBlocked
		reached[1][5028] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5029, 5034) */
		reached[1][5029] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5033, 5034) */
		reached[1][5033] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2744: // STATE 5030 - mutant_243.pml:231 - [((_pid>1))] (5034:0:0 - 1)
		IfNotBlocked
		reached[1][5030] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5031, 5034) */
		reached[1][5031] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5033, 5034) */
		reached[1][5033] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2745: // STATE 5034 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5034] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2746: // STATE 5035 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5163:1 - 1)
		IfNotBlocked
		reached[1][5035] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5163, 5040, 5163) */
		reached[1][5040] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2747: // STATE 5038 - mutant_243.pml:312 - [(1)] (5163:0:1 - 1)
		IfNotBlocked
		reached[1][5038] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5163, 5040, 5163) */
		reached[1][5040] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2748: // STATE 5042 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5042] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2749: // STATE 5043 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5077:0:1 - 1)
		IfNotBlocked
		reached[1][5043] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5077, 5044, 5077) */
		reached[1][5044] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5077, 5045, 5077) */
		reached[1][5045] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2750: // STATE 5061 - mutant_243.pml:336 - [.(goto)] (0:5077:0 - 6)
		IfNotBlocked
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2751: // STATE 5046 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5077:0:1 - 1)
		IfNotBlocked
		reached[1][5046] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5077, 5047, 5077) */
		reached[1][5047] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5077, 5048, 5077) */
		reached[1][5048] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2752: // STATE 5049 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5077:0:1 - 1)
		IfNotBlocked
		reached[1][5049] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5077, 5050, 5077) */
		reached[1][5050] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5077, 5051, 5077) */
		reached[1][5051] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2753: // STATE 5052 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5077:0:1 - 1)
		IfNotBlocked
		reached[1][5052] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5077, 5053, 5077) */
		reached[1][5053] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5077, 5054, 5077) */
		reached[1][5054] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2754: // STATE 5055 - mutant_243.pml:330 - [((PAUSE==ABORT))] (5077:0:1 - 1)
		IfNotBlocked
		reached[1][5055] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5077, 5056, 5077) */
		reached[1][5056] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5077, 5057, 5077) */
		reached[1][5057] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2755: // STATE 5059 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5077:0 - 1)
		IfNotBlocked
		reached[1][5059] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5077, 5061, 5077) */
		reached[1][5061] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2756: // STATE 5064 - mutant_243.pml:239 - [((_pid==0))] (5072:0:0 - 1)
		IfNotBlocked
		reached[1][5064] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5065, 5072) */
		reached[1][5065] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5071, 5072) */
		reached[1][5071] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2757: // STATE 5066 - mutant_243.pml:241 - [((_pid==1))] (5072:0:0 - 1)
		IfNotBlocked
		reached[1][5066] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5067, 5072) */
		reached[1][5067] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5071, 5072) */
		reached[1][5071] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2758: // STATE 5068 - mutant_243.pml:243 - [((_pid>1))] (5072:0:0 - 1)
		IfNotBlocked
		reached[1][5068] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5069, 5072) */
		reached[1][5069] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5071, 5072) */
		reached[1][5071] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2759: // STATE 5072 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5072] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2760: // STATE 5073 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5163:1 - 1)
		IfNotBlocked
		reached[1][5073] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5163, 5078, 5163) */
		reached[1][5078] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2761: // STATE 5076 - mutant_243.pml:341 - [(1)] (5163:0:1 - 1)
		IfNotBlocked
		reached[1][5076] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5163, 5078, 5163) */
		reached[1][5078] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2762: // STATE 5080 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5080] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2763: // STATE 5081 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5115:0:1 - 1)
		IfNotBlocked
		reached[1][5081] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5115, 5082, 5115) */
		reached[1][5082] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5115, 5083, 5115) */
		reached[1][5083] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2764: // STATE 5099 - mutant_243.pml:365 - [.(goto)] (0:5115:0 - 6)
		IfNotBlocked
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2765: // STATE 5084 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5115:0:1 - 1)
		IfNotBlocked
		reached[1][5084] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5115, 5085, 5115) */
		reached[1][5085] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5115, 5086, 5115) */
		reached[1][5086] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2766: // STATE 5087 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5115:0:1 - 1)
		IfNotBlocked
		reached[1][5087] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5115, 5088, 5115) */
		reached[1][5088] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5115, 5089, 5115) */
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2767: // STATE 5090 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5115:0:1 - 1)
		IfNotBlocked
		reached[1][5090] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5115, 5091, 5115) */
		reached[1][5091] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5115, 5092, 5115) */
		reached[1][5092] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2768: // STATE 5093 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (5115:0:1 - 1)
		IfNotBlocked
		reached[1][5093] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5115, 5094, 5115) */
		reached[1][5094] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5115, 5095, 5115) */
		reached[1][5095] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2769: // STATE 5097 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5115:0 - 1)
		IfNotBlocked
		reached[1][5097] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5115, 5099, 5115) */
		reached[1][5099] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2770: // STATE 5102 - mutant_243.pml:251 - [((_pid==0))] (5110:0:0 - 1)
		IfNotBlocked
		reached[1][5102] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5103, 5110) */
		reached[1][5103] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5109, 5110) */
		reached[1][5109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2771: // STATE 5104 - mutant_243.pml:253 - [((_pid==1))] (5110:0:0 - 1)
		IfNotBlocked
		reached[1][5104] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5105, 5110) */
		reached[1][5105] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5109, 5110) */
		reached[1][5109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2772: // STATE 5106 - mutant_243.pml:255 - [((_pid>1))] (5110:0:0 - 1)
		IfNotBlocked
		reached[1][5106] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5107, 5110) */
		reached[1][5107] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5109, 5110) */
		reached[1][5109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2773: // STATE 5110 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5110] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2774: // STATE 5111 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5163:1 - 1)
		IfNotBlocked
		reached[1][5111] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5163, 5116, 5163) */
		reached[1][5116] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2775: // STATE 5114 - mutant_243.pml:370 - [(1)] (5163:0:1 - 1)
		IfNotBlocked
		reached[1][5114] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5163, 5116, 5163) */
		reached[1][5116] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2776: // STATE 5118 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5118] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2777: // STATE 5119 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5153:0:1 - 1)
		IfNotBlocked
		reached[1][5119] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5153, 5120, 5153) */
		reached[1][5120] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5153, 5121, 5153) */
		reached[1][5121] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2778: // STATE 5137 - mutant_243.pml:394 - [.(goto)] (0:5153:0 - 6)
		IfNotBlocked
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2779: // STATE 5122 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5153:0:1 - 1)
		IfNotBlocked
		reached[1][5122] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5153, 5123, 5153) */
		reached[1][5123] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5153, 5124, 5153) */
		reached[1][5124] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2780: // STATE 5125 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5153:0:1 - 1)
		IfNotBlocked
		reached[1][5125] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5153, 5126, 5153) */
		reached[1][5126] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5153, 5127, 5153) */
		reached[1][5127] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2781: // STATE 5128 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5153:0:1 - 1)
		IfNotBlocked
		reached[1][5128] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5153, 5129, 5153) */
		reached[1][5129] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5153, 5130, 5153) */
		reached[1][5130] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2782: // STATE 5131 - mutant_243.pml:388 - [((STOP==ABORT))] (5153:0:1 - 1)
		IfNotBlocked
		reached[1][5131] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5153, 5132, 5153) */
		reached[1][5132] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5153, 5133, 5153) */
		reached[1][5133] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2783: // STATE 5135 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5153:0 - 1)
		IfNotBlocked
		reached[1][5135] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5153, 5137, 5153) */
		reached[1][5137] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2784: // STATE 5140 - mutant_243.pml:263 - [((_pid==0))] (5148:0:0 - 1)
		IfNotBlocked
		reached[1][5140] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5141, 5148) */
		reached[1][5141] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5147, 5148) */
		reached[1][5147] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2785: // STATE 5142 - mutant_243.pml:265 - [((_pid==1))] (5148:0:0 - 1)
		IfNotBlocked
		reached[1][5142] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5143, 5148) */
		reached[1][5143] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5147, 5148) */
		reached[1][5147] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2786: // STATE 5144 - mutant_243.pml:267 - [((_pid>1))] (5148:0:0 - 1)
		IfNotBlocked
		reached[1][5144] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5145, 5148) */
		reached[1][5145] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5147, 5148) */
		reached[1][5147] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2787: // STATE 5148 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5148] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2788: // STATE 5149 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5163:1 - 1)
		IfNotBlocked
		reached[1][5149] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5163, 5154, 5163) */
		reached[1][5154] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2789: // STATE 5152 - mutant_243.pml:399 - [(1)] (5163:0:1 - 1)
		IfNotBlocked
		reached[1][5152] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5163, 5154, 5163) */
		reached[1][5154] = 1;
		;
		/* merge: .(goto)(5163, 5157, 5163) */
		reached[1][5157] = 1;
		;
		/* merge: j = (j+1)(5163, 5159, 5163) */
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2790: // STATE 5159 - mutant_243.pml:435 - [j = (j+1)] (0:5163:1 - 13)
		IfNotBlocked
		reached[1][5159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5164, 5163) */
		reached[1][5164] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2791: // STATE 5161 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5161] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2792: // STATE 5167 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5167] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2793: // STATE 5168 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5168] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2794: // STATE 5169 - mutant_243.pml:227 - [((_pid==0))] (5177:0:0 - 1)
		IfNotBlocked
		reached[1][5169] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5170, 5177) */
		reached[1][5170] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5176, 5177) */
		reached[1][5176] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2795: // STATE 5171 - mutant_243.pml:229 - [((_pid==1))] (5177:0:0 - 1)
		IfNotBlocked
		reached[1][5171] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5172, 5177) */
		reached[1][5172] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5176, 5177) */
		reached[1][5176] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2796: // STATE 5173 - mutant_243.pml:231 - [((_pid>1))] (5177:0:0 - 1)
		IfNotBlocked
		reached[1][5173] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5174, 5177) */
		reached[1][5174] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5176, 5177) */
		reached[1][5176] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2797: // STATE 5177 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5177] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2798: // STATE 5178 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5222:1 - 1)
		IfNotBlocked
		reached[1][5178] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5222, 5217, 5222) */
		reached[1][5217] = 1;
		;
		/* merge: j = (j+1)(5222, 5218, 5222) */
		reached[1][5218] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5223, 5222) */
		reached[1][5223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2799: // STATE 5180 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5180] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2800: // STATE 5181 - mutant_243.pml:251 - [((_pid==0))] (5189:0:0 - 1)
		IfNotBlocked
		reached[1][5181] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5182, 5189) */
		reached[1][5182] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5188, 5189) */
		reached[1][5188] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2801: // STATE 5183 - mutant_243.pml:253 - [((_pid==1))] (5189:0:0 - 1)
		IfNotBlocked
		reached[1][5183] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5184, 5189) */
		reached[1][5184] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5188, 5189) */
		reached[1][5188] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2802: // STATE 5185 - mutant_243.pml:255 - [((_pid>1))] (5189:0:0 - 1)
		IfNotBlocked
		reached[1][5185] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5186, 5189) */
		reached[1][5186] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5188, 5189) */
		reached[1][5188] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2803: // STATE 5189 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5189] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2804: // STATE 5190 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5222:1 - 1)
		IfNotBlocked
		reached[1][5190] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5222, 5217, 5222) */
		reached[1][5217] = 1;
		;
		/* merge: j = (j+1)(5222, 5218, 5222) */
		reached[1][5218] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5223, 5222) */
		reached[1][5223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2805: // STATE 5192 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5192] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2806: // STATE 5193 - mutant_243.pml:239 - [((_pid==0))] (5201:0:0 - 1)
		IfNotBlocked
		reached[1][5193] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5194, 5201) */
		reached[1][5194] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5200, 5201) */
		reached[1][5200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2807: // STATE 5195 - mutant_243.pml:241 - [((_pid==1))] (5201:0:0 - 1)
		IfNotBlocked
		reached[1][5195] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5196, 5201) */
		reached[1][5196] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5200, 5201) */
		reached[1][5200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2808: // STATE 5197 - mutant_243.pml:243 - [((_pid>1))] (5201:0:0 - 1)
		IfNotBlocked
		reached[1][5197] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5198, 5201) */
		reached[1][5198] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5200, 5201) */
		reached[1][5200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2809: // STATE 5201 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5201] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2810: // STATE 5202 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5222:1 - 1)
		IfNotBlocked
		reached[1][5202] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5222, 5217, 5222) */
		reached[1][5217] = 1;
		;
		/* merge: j = (j+1)(5222, 5218, 5222) */
		reached[1][5218] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5223, 5222) */
		reached[1][5223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2811: // STATE 5204 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5204] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2812: // STATE 5205 - mutant_243.pml:263 - [((_pid==0))] (5213:0:0 - 1)
		IfNotBlocked
		reached[1][5205] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5206, 5213) */
		reached[1][5206] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5212, 5213) */
		reached[1][5212] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2813: // STATE 5207 - mutant_243.pml:265 - [((_pid==1))] (5213:0:0 - 1)
		IfNotBlocked
		reached[1][5207] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5208, 5213) */
		reached[1][5208] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5212, 5213) */
		reached[1][5212] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2814: // STATE 5209 - mutant_243.pml:267 - [((_pid>1))] (5213:0:0 - 1)
		IfNotBlocked
		reached[1][5209] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5210, 5213) */
		reached[1][5210] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5212, 5213) */
		reached[1][5212] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2815: // STATE 5213 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5213] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2816: // STATE 5214 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5222:1 - 1)
		IfNotBlocked
		reached[1][5214] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5222, 5217, 5222) */
		reached[1][5217] = 1;
		;
		/* merge: j = (j+1)(5222, 5218, 5222) */
		reached[1][5218] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5223, 5222) */
		reached[1][5223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2817: // STATE 5218 - mutant_243.pml:475 - [j = (j+1)] (0:5222:1 - 5)
		IfNotBlocked
		reached[1][5218] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5223, 5222) */
		reached[1][5223] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2818: // STATE 5220 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5220] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2819: // STATE 5231 - mutant_243.pml:556 - [(((3==ABORTING)||(3==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5231] = 1;
		if (!(((3==10)||(3==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2820: // STATE 5232 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5232] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2821: // STATE 5233 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5233] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 2822: // STATE 5234 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5234] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2823: // STATE 5236 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5236] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2824: // STATE 5237 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5237] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2825: // STATE 5238 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5238] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2826: // STATE 5239 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5239] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2827: // STATE 5240 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (5260:0:1 - 1)
		IfNotBlocked
		reached[1][5240] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5260, 5241, 5260) */
		reached[1][5241] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5260, 5242, 5260) */
		reached[1][5242] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2828: // STATE 5258 - mutant_243.pml:306 - [.(goto)] (0:5260:0 - 6)
		IfNotBlocked
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2829: // STATE 5243 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5260:0:1 - 1)
		IfNotBlocked
		reached[1][5243] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5260, 5244, 5260) */
		reached[1][5244] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5260, 5245, 5260) */
		reached[1][5245] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2830: // STATE 5246 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5260:0:1 - 1)
		IfNotBlocked
		reached[1][5246] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5260, 5247, 5260) */
		reached[1][5247] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5260, 5248, 5260) */
		reached[1][5248] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2831: // STATE 5249 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5260:0:1 - 1)
		IfNotBlocked
		reached[1][5249] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5260, 5250, 5260) */
		reached[1][5250] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5260, 5251, 5260) */
		reached[1][5251] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2832: // STATE 5252 - mutant_243.pml:300 - [((START==ABORT))] (5260:0:1 - 1)
		IfNotBlocked
		reached[1][5252] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5260, 5253, 5260) */
		reached[1][5253] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5260, 5254, 5260) */
		reached[1][5254] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2833: // STATE 5256 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5260:0 - 1)
		IfNotBlocked
		reached[1][5256] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5260, 5258, 5260) */
		reached[1][5258] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2834: // STATE 5260 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5260] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2835: // STATE 5262 - mutant_243.pml:227 - [((_pid==0))] (5270:0:0 - 1)
		IfNotBlocked
		reached[1][5262] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5263, 5270) */
		reached[1][5263] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5269, 5270) */
		reached[1][5269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2836: // STATE 5264 - mutant_243.pml:229 - [((_pid==1))] (5270:0:0 - 1)
		IfNotBlocked
		reached[1][5264] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5265, 5270) */
		reached[1][5265] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5269, 5270) */
		reached[1][5269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2837: // STATE 5266 - mutant_243.pml:231 - [((_pid>1))] (5270:0:0 - 1)
		IfNotBlocked
		reached[1][5266] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5267, 5270) */
		reached[1][5267] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5269, 5270) */
		reached[1][5269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2838: // STATE 5270 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5270] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2839: // STATE 5271 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5399:1 - 1)
		IfNotBlocked
		reached[1][5271] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5399, 5276, 5399) */
		reached[1][5276] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2840: // STATE 5274 - mutant_243.pml:312 - [(1)] (5399:0:1 - 1)
		IfNotBlocked
		reached[1][5274] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5399, 5276, 5399) */
		reached[1][5276] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2841: // STATE 5278 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5278] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2842: // STATE 5279 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5313:0:1 - 1)
		IfNotBlocked
		reached[1][5279] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5313, 5280, 5313) */
		reached[1][5280] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5313, 5281, 5313) */
		reached[1][5281] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2843: // STATE 5297 - mutant_243.pml:336 - [.(goto)] (0:5313:0 - 6)
		IfNotBlocked
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2844: // STATE 5282 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5313:0:1 - 1)
		IfNotBlocked
		reached[1][5282] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5313, 5283, 5313) */
		reached[1][5283] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5313, 5284, 5313) */
		reached[1][5284] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2845: // STATE 5285 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5313:0:1 - 1)
		IfNotBlocked
		reached[1][5285] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5313, 5286, 5313) */
		reached[1][5286] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5313, 5287, 5313) */
		reached[1][5287] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2846: // STATE 5288 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5313:0:1 - 1)
		IfNotBlocked
		reached[1][5288] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5313, 5289, 5313) */
		reached[1][5289] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5313, 5290, 5313) */
		reached[1][5290] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2847: // STATE 5291 - mutant_243.pml:330 - [((PAUSE==ABORT))] (5313:0:1 - 1)
		IfNotBlocked
		reached[1][5291] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5313, 5292, 5313) */
		reached[1][5292] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5313, 5293, 5313) */
		reached[1][5293] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2848: // STATE 5295 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5313:0 - 1)
		IfNotBlocked
		reached[1][5295] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5313, 5297, 5313) */
		reached[1][5297] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2849: // STATE 5300 - mutant_243.pml:239 - [((_pid==0))] (5308:0:0 - 1)
		IfNotBlocked
		reached[1][5300] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5301, 5308) */
		reached[1][5301] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5307, 5308) */
		reached[1][5307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2850: // STATE 5302 - mutant_243.pml:241 - [((_pid==1))] (5308:0:0 - 1)
		IfNotBlocked
		reached[1][5302] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5303, 5308) */
		reached[1][5303] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5307, 5308) */
		reached[1][5307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2851: // STATE 5304 - mutant_243.pml:243 - [((_pid>1))] (5308:0:0 - 1)
		IfNotBlocked
		reached[1][5304] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5305, 5308) */
		reached[1][5305] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5307, 5308) */
		reached[1][5307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2852: // STATE 5308 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5308] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2853: // STATE 5309 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5399:1 - 1)
		IfNotBlocked
		reached[1][5309] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5399, 5314, 5399) */
		reached[1][5314] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2854: // STATE 5312 - mutant_243.pml:341 - [(1)] (5399:0:1 - 1)
		IfNotBlocked
		reached[1][5312] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5399, 5314, 5399) */
		reached[1][5314] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2855: // STATE 5316 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5316] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2856: // STATE 5317 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5351:0:1 - 1)
		IfNotBlocked
		reached[1][5317] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5351, 5318, 5351) */
		reached[1][5318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5351, 5319, 5351) */
		reached[1][5319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2857: // STATE 5335 - mutant_243.pml:365 - [.(goto)] (0:5351:0 - 6)
		IfNotBlocked
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2858: // STATE 5320 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5351:0:1 - 1)
		IfNotBlocked
		reached[1][5320] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5351, 5321, 5351) */
		reached[1][5321] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5351, 5322, 5351) */
		reached[1][5322] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2859: // STATE 5323 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5351:0:1 - 1)
		IfNotBlocked
		reached[1][5323] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5351, 5324, 5351) */
		reached[1][5324] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5351, 5325, 5351) */
		reached[1][5325] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2860: // STATE 5326 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5351:0:1 - 1)
		IfNotBlocked
		reached[1][5326] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5351, 5327, 5351) */
		reached[1][5327] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5351, 5328, 5351) */
		reached[1][5328] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2861: // STATE 5329 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (5351:0:1 - 1)
		IfNotBlocked
		reached[1][5329] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5351, 5330, 5351) */
		reached[1][5330] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5351, 5331, 5351) */
		reached[1][5331] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2862: // STATE 5333 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5351:0 - 1)
		IfNotBlocked
		reached[1][5333] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5351, 5335, 5351) */
		reached[1][5335] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2863: // STATE 5338 - mutant_243.pml:251 - [((_pid==0))] (5346:0:0 - 1)
		IfNotBlocked
		reached[1][5338] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5339, 5346) */
		reached[1][5339] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5345, 5346) */
		reached[1][5345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2864: // STATE 5340 - mutant_243.pml:253 - [((_pid==1))] (5346:0:0 - 1)
		IfNotBlocked
		reached[1][5340] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5341, 5346) */
		reached[1][5341] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5345, 5346) */
		reached[1][5345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2865: // STATE 5342 - mutant_243.pml:255 - [((_pid>1))] (5346:0:0 - 1)
		IfNotBlocked
		reached[1][5342] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5343, 5346) */
		reached[1][5343] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5345, 5346) */
		reached[1][5345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2866: // STATE 5346 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5346] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2867: // STATE 5347 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5399:1 - 1)
		IfNotBlocked
		reached[1][5347] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5399, 5352, 5399) */
		reached[1][5352] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2868: // STATE 5350 - mutant_243.pml:370 - [(1)] (5399:0:1 - 1)
		IfNotBlocked
		reached[1][5350] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5399, 5352, 5399) */
		reached[1][5352] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2869: // STATE 5354 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5354] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2870: // STATE 5355 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5355] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5389, 5356, 5389) */
		reached[1][5356] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5389, 5357, 5389) */
		reached[1][5357] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2871: // STATE 5373 - mutant_243.pml:394 - [.(goto)] (0:5389:0 - 6)
		IfNotBlocked
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2872: // STATE 5358 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5358] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5389, 5359, 5389) */
		reached[1][5359] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5389, 5360, 5389) */
		reached[1][5360] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2873: // STATE 5361 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5361] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5389, 5362, 5389) */
		reached[1][5362] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5389, 5363, 5389) */
		reached[1][5363] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2874: // STATE 5364 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5364] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5389, 5365, 5389) */
		reached[1][5365] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5389, 5366, 5389) */
		reached[1][5366] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2875: // STATE 5367 - mutant_243.pml:388 - [((STOP==ABORT))] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5367] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5389, 5368, 5389) */
		reached[1][5368] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5389, 5369, 5389) */
		reached[1][5369] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2876: // STATE 5371 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5389:0 - 1)
		IfNotBlocked
		reached[1][5371] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5389, 5373, 5389) */
		reached[1][5373] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2877: // STATE 5376 - mutant_243.pml:263 - [((_pid==0))] (5384:0:0 - 1)
		IfNotBlocked
		reached[1][5376] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5377, 5384) */
		reached[1][5377] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5383, 5384) */
		reached[1][5383] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2878: // STATE 5378 - mutant_243.pml:265 - [((_pid==1))] (5384:0:0 - 1)
		IfNotBlocked
		reached[1][5378] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5379, 5384) */
		reached[1][5379] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5383, 5384) */
		reached[1][5383] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2879: // STATE 5380 - mutant_243.pml:267 - [((_pid>1))] (5384:0:0 - 1)
		IfNotBlocked
		reached[1][5380] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5381, 5384) */
		reached[1][5381] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5383, 5384) */
		reached[1][5383] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2880: // STATE 5384 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5384] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2881: // STATE 5385 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5399:1 - 1)
		IfNotBlocked
		reached[1][5385] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5399, 5390, 5399) */
		reached[1][5390] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2882: // STATE 5388 - mutant_243.pml:399 - [(1)] (5399:0:1 - 1)
		IfNotBlocked
		reached[1][5388] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5399, 5390, 5399) */
		reached[1][5390] = 1;
		;
		/* merge: .(goto)(5399, 5393, 5399) */
		reached[1][5393] = 1;
		;
		/* merge: j = (j+1)(5399, 5395, 5399) */
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2883: // STATE 5395 - mutant_243.pml:435 - [j = (j+1)] (0:5399:1 - 13)
		IfNotBlocked
		reached[1][5395] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5400, 5399) */
		reached[1][5400] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2884: // STATE 5397 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5397] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2885: // STATE 5404 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5404] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2886: // STATE 5405 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5405] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2887: // STATE 5406 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5406] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2888: // STATE 5407 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (5427:0:1 - 1)
		IfNotBlocked
		reached[1][5407] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5427, 5408, 5427) */
		reached[1][5408] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5427, 5409, 5427) */
		reached[1][5409] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2889: // STATE 5425 - mutant_243.pml:306 - [.(goto)] (0:5427:0 - 6)
		IfNotBlocked
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2890: // STATE 5410 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5427:0:1 - 1)
		IfNotBlocked
		reached[1][5410] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5427, 5411, 5427) */
		reached[1][5411] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5427, 5412, 5427) */
		reached[1][5412] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2891: // STATE 5413 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5427:0:1 - 1)
		IfNotBlocked
		reached[1][5413] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5427, 5414, 5427) */
		reached[1][5414] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5427, 5415, 5427) */
		reached[1][5415] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2892: // STATE 5416 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5427:0:1 - 1)
		IfNotBlocked
		reached[1][5416] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5427, 5417, 5427) */
		reached[1][5417] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5427, 5418, 5427) */
		reached[1][5418] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2893: // STATE 5419 - mutant_243.pml:300 - [((START==ABORT))] (5427:0:1 - 1)
		IfNotBlocked
		reached[1][5419] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5427, 5420, 5427) */
		reached[1][5420] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5427, 5421, 5427) */
		reached[1][5421] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2894: // STATE 5423 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5427:0 - 1)
		IfNotBlocked
		reached[1][5423] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5427, 5425, 5427) */
		reached[1][5425] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2895: // STATE 5427 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5427] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2896: // STATE 5429 - mutant_243.pml:227 - [((_pid==0))] (5437:0:0 - 1)
		IfNotBlocked
		reached[1][5429] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5430, 5437) */
		reached[1][5430] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5436, 5437) */
		reached[1][5436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2897: // STATE 5431 - mutant_243.pml:229 - [((_pid==1))] (5437:0:0 - 1)
		IfNotBlocked
		reached[1][5431] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5432, 5437) */
		reached[1][5432] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5436, 5437) */
		reached[1][5436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2898: // STATE 5433 - mutant_243.pml:231 - [((_pid>1))] (5437:0:0 - 1)
		IfNotBlocked
		reached[1][5433] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5434, 5437) */
		reached[1][5434] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5436, 5437) */
		reached[1][5436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2899: // STATE 5437 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5437] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2900: // STATE 5438 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5566:1 - 1)
		IfNotBlocked
		reached[1][5438] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5566, 5443, 5566) */
		reached[1][5443] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2901: // STATE 5441 - mutant_243.pml:312 - [(1)] (5566:0:1 - 1)
		IfNotBlocked
		reached[1][5441] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5566, 5443, 5566) */
		reached[1][5443] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2902: // STATE 5445 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5445] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2903: // STATE 5446 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5480:0:1 - 1)
		IfNotBlocked
		reached[1][5446] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5480, 5447, 5480) */
		reached[1][5447] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5480, 5448, 5480) */
		reached[1][5448] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2904: // STATE 5464 - mutant_243.pml:336 - [.(goto)] (0:5480:0 - 6)
		IfNotBlocked
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2905: // STATE 5449 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5480:0:1 - 1)
		IfNotBlocked
		reached[1][5449] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5480, 5450, 5480) */
		reached[1][5450] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5480, 5451, 5480) */
		reached[1][5451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2906: // STATE 5452 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5480:0:1 - 1)
		IfNotBlocked
		reached[1][5452] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5480, 5453, 5480) */
		reached[1][5453] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5480, 5454, 5480) */
		reached[1][5454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2907: // STATE 5455 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5480:0:1 - 1)
		IfNotBlocked
		reached[1][5455] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5480, 5456, 5480) */
		reached[1][5456] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5480, 5457, 5480) */
		reached[1][5457] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2908: // STATE 5458 - mutant_243.pml:330 - [((PAUSE==ABORT))] (5480:0:1 - 1)
		IfNotBlocked
		reached[1][5458] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5480, 5459, 5480) */
		reached[1][5459] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5480, 5460, 5480) */
		reached[1][5460] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2909: // STATE 5462 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5480:0 - 1)
		IfNotBlocked
		reached[1][5462] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5480, 5464, 5480) */
		reached[1][5464] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2910: // STATE 5467 - mutant_243.pml:239 - [((_pid==0))] (5475:0:0 - 1)
		IfNotBlocked
		reached[1][5467] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5468, 5475) */
		reached[1][5468] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5474, 5475) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2911: // STATE 5469 - mutant_243.pml:241 - [((_pid==1))] (5475:0:0 - 1)
		IfNotBlocked
		reached[1][5469] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5470, 5475) */
		reached[1][5470] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5474, 5475) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2912: // STATE 5471 - mutant_243.pml:243 - [((_pid>1))] (5475:0:0 - 1)
		IfNotBlocked
		reached[1][5471] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5472, 5475) */
		reached[1][5472] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5474, 5475) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2913: // STATE 5475 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5475] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2914: // STATE 5476 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5566:1 - 1)
		IfNotBlocked
		reached[1][5476] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5566, 5481, 5566) */
		reached[1][5481] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2915: // STATE 5479 - mutant_243.pml:341 - [(1)] (5566:0:1 - 1)
		IfNotBlocked
		reached[1][5479] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5566, 5481, 5566) */
		reached[1][5481] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2916: // STATE 5483 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5483] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2917: // STATE 5484 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5518:0:1 - 1)
		IfNotBlocked
		reached[1][5484] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5518, 5485, 5518) */
		reached[1][5485] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5518, 5486, 5518) */
		reached[1][5486] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2918: // STATE 5502 - mutant_243.pml:365 - [.(goto)] (0:5518:0 - 6)
		IfNotBlocked
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2919: // STATE 5487 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5518:0:1 - 1)
		IfNotBlocked
		reached[1][5487] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5518, 5488, 5518) */
		reached[1][5488] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5518, 5489, 5518) */
		reached[1][5489] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2920: // STATE 5490 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5518:0:1 - 1)
		IfNotBlocked
		reached[1][5490] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5518, 5491, 5518) */
		reached[1][5491] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5518, 5492, 5518) */
		reached[1][5492] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2921: // STATE 5493 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5518:0:1 - 1)
		IfNotBlocked
		reached[1][5493] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5518, 5494, 5518) */
		reached[1][5494] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5518, 5495, 5518) */
		reached[1][5495] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2922: // STATE 5496 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (5518:0:1 - 1)
		IfNotBlocked
		reached[1][5496] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5518, 5497, 5518) */
		reached[1][5497] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5518, 5498, 5518) */
		reached[1][5498] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2923: // STATE 5500 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5518:0 - 1)
		IfNotBlocked
		reached[1][5500] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5518, 5502, 5518) */
		reached[1][5502] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2924: // STATE 5505 - mutant_243.pml:251 - [((_pid==0))] (5513:0:0 - 1)
		IfNotBlocked
		reached[1][5505] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5506, 5513) */
		reached[1][5506] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5512, 5513) */
		reached[1][5512] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2925: // STATE 5507 - mutant_243.pml:253 - [((_pid==1))] (5513:0:0 - 1)
		IfNotBlocked
		reached[1][5507] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5508, 5513) */
		reached[1][5508] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5512, 5513) */
		reached[1][5512] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2926: // STATE 5509 - mutant_243.pml:255 - [((_pid>1))] (5513:0:0 - 1)
		IfNotBlocked
		reached[1][5509] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5510, 5513) */
		reached[1][5510] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5512, 5513) */
		reached[1][5512] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2927: // STATE 5513 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5513] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2928: // STATE 5514 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5566:1 - 1)
		IfNotBlocked
		reached[1][5514] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5566, 5519, 5566) */
		reached[1][5519] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2929: // STATE 5517 - mutant_243.pml:370 - [(1)] (5566:0:1 - 1)
		IfNotBlocked
		reached[1][5517] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5566, 5519, 5566) */
		reached[1][5519] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2930: // STATE 5521 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5521] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2931: // STATE 5522 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5556:0:1 - 1)
		IfNotBlocked
		reached[1][5522] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5556, 5523, 5556) */
		reached[1][5523] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5556, 5524, 5556) */
		reached[1][5524] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2932: // STATE 5540 - mutant_243.pml:394 - [.(goto)] (0:5556:0 - 6)
		IfNotBlocked
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2933: // STATE 5525 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5556:0:1 - 1)
		IfNotBlocked
		reached[1][5525] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5556, 5526, 5556) */
		reached[1][5526] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5556, 5527, 5556) */
		reached[1][5527] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2934: // STATE 5528 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5556:0:1 - 1)
		IfNotBlocked
		reached[1][5528] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5556, 5529, 5556) */
		reached[1][5529] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5556, 5530, 5556) */
		reached[1][5530] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2935: // STATE 5531 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5556:0:1 - 1)
		IfNotBlocked
		reached[1][5531] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5556, 5532, 5556) */
		reached[1][5532] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5556, 5533, 5556) */
		reached[1][5533] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2936: // STATE 5534 - mutant_243.pml:388 - [((STOP==ABORT))] (5556:0:1 - 1)
		IfNotBlocked
		reached[1][5534] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5556, 5535, 5556) */
		reached[1][5535] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5556, 5536, 5556) */
		reached[1][5536] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2937: // STATE 5538 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5556:0 - 1)
		IfNotBlocked
		reached[1][5538] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5556, 5540, 5556) */
		reached[1][5540] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2938: // STATE 5543 - mutant_243.pml:263 - [((_pid==0))] (5551:0:0 - 1)
		IfNotBlocked
		reached[1][5543] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5544, 5551) */
		reached[1][5544] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5550, 5551) */
		reached[1][5550] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2939: // STATE 5545 - mutant_243.pml:265 - [((_pid==1))] (5551:0:0 - 1)
		IfNotBlocked
		reached[1][5545] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5546, 5551) */
		reached[1][5546] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5550, 5551) */
		reached[1][5550] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2940: // STATE 5547 - mutant_243.pml:267 - [((_pid>1))] (5551:0:0 - 1)
		IfNotBlocked
		reached[1][5547] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5548, 5551) */
		reached[1][5548] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5550, 5551) */
		reached[1][5550] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2941: // STATE 5551 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5551] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2942: // STATE 5552 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5566:1 - 1)
		IfNotBlocked
		reached[1][5552] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5566, 5557, 5566) */
		reached[1][5557] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2943: // STATE 5555 - mutant_243.pml:399 - [(1)] (5566:0:1 - 1)
		IfNotBlocked
		reached[1][5555] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5566, 5557, 5566) */
		reached[1][5557] = 1;
		;
		/* merge: .(goto)(5566, 5560, 5566) */
		reached[1][5560] = 1;
		;
		/* merge: j = (j-1)(5566, 5562, 5566) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2944: // STATE 5562 - mutant_243.pml:446 - [j = (j-1)] (0:5566:1 - 13)
		IfNotBlocked
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5567, 5566) */
		reached[1][5567] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2945: // STATE 5564 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2946: // STATE 5574 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5574] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 2947: // STATE 5575 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5575] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2948: // STATE 5576 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5576] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2949: // STATE 5577 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (5597:0:1 - 1)
		IfNotBlocked
		reached[1][5577] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5597, 5578, 5597) */
		reached[1][5578] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5597, 5579, 5597) */
		reached[1][5579] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2950: // STATE 5595 - mutant_243.pml:306 - [.(goto)] (0:5597:0 - 6)
		IfNotBlocked
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2951: // STATE 5580 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5597:0:1 - 1)
		IfNotBlocked
		reached[1][5580] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5597, 5581, 5597) */
		reached[1][5581] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5597, 5582, 5597) */
		reached[1][5582] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2952: // STATE 5583 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5597:0:1 - 1)
		IfNotBlocked
		reached[1][5583] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5597, 5584, 5597) */
		reached[1][5584] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5597, 5585, 5597) */
		reached[1][5585] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2953: // STATE 5586 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5597:0:1 - 1)
		IfNotBlocked
		reached[1][5586] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5597, 5587, 5597) */
		reached[1][5587] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5597, 5588, 5597) */
		reached[1][5588] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2954: // STATE 5589 - mutant_243.pml:300 - [((START==ABORT))] (5597:0:1 - 1)
		IfNotBlocked
		reached[1][5589] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5597, 5590, 5597) */
		reached[1][5590] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5597, 5591, 5597) */
		reached[1][5591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2955: // STATE 5593 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5597:0 - 1)
		IfNotBlocked
		reached[1][5593] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5597, 5595, 5597) */
		reached[1][5595] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2956: // STATE 5597 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5597] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2957: // STATE 5599 - mutant_243.pml:227 - [((_pid==0))] (5607:0:0 - 1)
		IfNotBlocked
		reached[1][5599] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5600, 5607) */
		reached[1][5600] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5606, 5607) */
		reached[1][5606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2958: // STATE 5601 - mutant_243.pml:229 - [((_pid==1))] (5607:0:0 - 1)
		IfNotBlocked
		reached[1][5601] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5602, 5607) */
		reached[1][5602] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5606, 5607) */
		reached[1][5606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2959: // STATE 5603 - mutant_243.pml:231 - [((_pid>1))] (5607:0:0 - 1)
		IfNotBlocked
		reached[1][5603] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5604, 5607) */
		reached[1][5604] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5606, 5607) */
		reached[1][5606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2960: // STATE 5607 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5607] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2961: // STATE 5608 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5736:1 - 1)
		IfNotBlocked
		reached[1][5608] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5736, 5613, 5736) */
		reached[1][5613] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2962: // STATE 5611 - mutant_243.pml:312 - [(1)] (5736:0:1 - 1)
		IfNotBlocked
		reached[1][5611] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5736, 5613, 5736) */
		reached[1][5613] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2963: // STATE 5615 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5615] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2964: // STATE 5616 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5650:0:1 - 1)
		IfNotBlocked
		reached[1][5616] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5650, 5617, 5650) */
		reached[1][5617] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5650, 5618, 5650) */
		reached[1][5618] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2965: // STATE 5634 - mutant_243.pml:336 - [.(goto)] (0:5650:0 - 6)
		IfNotBlocked
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2966: // STATE 5619 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5650:0:1 - 1)
		IfNotBlocked
		reached[1][5619] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5650, 5620, 5650) */
		reached[1][5620] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5650, 5621, 5650) */
		reached[1][5621] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2967: // STATE 5622 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5650:0:1 - 1)
		IfNotBlocked
		reached[1][5622] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5650, 5623, 5650) */
		reached[1][5623] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5650, 5624, 5650) */
		reached[1][5624] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2968: // STATE 5625 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5650:0:1 - 1)
		IfNotBlocked
		reached[1][5625] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5650, 5626, 5650) */
		reached[1][5626] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5650, 5627, 5650) */
		reached[1][5627] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2969: // STATE 5628 - mutant_243.pml:330 - [((PAUSE==ABORT))] (5650:0:1 - 1)
		IfNotBlocked
		reached[1][5628] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5650, 5629, 5650) */
		reached[1][5629] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5650, 5630, 5650) */
		reached[1][5630] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2970: // STATE 5632 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5650:0 - 1)
		IfNotBlocked
		reached[1][5632] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5650, 5634, 5650) */
		reached[1][5634] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2971: // STATE 5637 - mutant_243.pml:239 - [((_pid==0))] (5645:0:0 - 1)
		IfNotBlocked
		reached[1][5637] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5638, 5645) */
		reached[1][5638] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5644, 5645) */
		reached[1][5644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2972: // STATE 5639 - mutant_243.pml:241 - [((_pid==1))] (5645:0:0 - 1)
		IfNotBlocked
		reached[1][5639] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5640, 5645) */
		reached[1][5640] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5644, 5645) */
		reached[1][5644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2973: // STATE 5641 - mutant_243.pml:243 - [((_pid>1))] (5645:0:0 - 1)
		IfNotBlocked
		reached[1][5641] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5642, 5645) */
		reached[1][5642] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5644, 5645) */
		reached[1][5644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2974: // STATE 5645 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5645] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2975: // STATE 5646 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5736:1 - 1)
		IfNotBlocked
		reached[1][5646] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5736, 5651, 5736) */
		reached[1][5651] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2976: // STATE 5649 - mutant_243.pml:341 - [(1)] (5736:0:1 - 1)
		IfNotBlocked
		reached[1][5649] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5736, 5651, 5736) */
		reached[1][5651] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2977: // STATE 5653 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5653] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2978: // STATE 5654 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5688:0:1 - 1)
		IfNotBlocked
		reached[1][5654] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5688, 5655, 5688) */
		reached[1][5655] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5688, 5656, 5688) */
		reached[1][5656] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2979: // STATE 5672 - mutant_243.pml:365 - [.(goto)] (0:5688:0 - 6)
		IfNotBlocked
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2980: // STATE 5657 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5688:0:1 - 1)
		IfNotBlocked
		reached[1][5657] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5688, 5658, 5688) */
		reached[1][5658] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5688, 5659, 5688) */
		reached[1][5659] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2981: // STATE 5660 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5688:0:1 - 1)
		IfNotBlocked
		reached[1][5660] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5688, 5661, 5688) */
		reached[1][5661] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5688, 5662, 5688) */
		reached[1][5662] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2982: // STATE 5663 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5688:0:1 - 1)
		IfNotBlocked
		reached[1][5663] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5688, 5664, 5688) */
		reached[1][5664] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5688, 5665, 5688) */
		reached[1][5665] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2983: // STATE 5666 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (5688:0:1 - 1)
		IfNotBlocked
		reached[1][5666] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5688, 5667, 5688) */
		reached[1][5667] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5688, 5668, 5688) */
		reached[1][5668] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2984: // STATE 5670 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5688:0 - 1)
		IfNotBlocked
		reached[1][5670] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5688, 5672, 5688) */
		reached[1][5672] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2985: // STATE 5675 - mutant_243.pml:251 - [((_pid==0))] (5683:0:0 - 1)
		IfNotBlocked
		reached[1][5675] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5676, 5683) */
		reached[1][5676] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5682, 5683) */
		reached[1][5682] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2986: // STATE 5677 - mutant_243.pml:253 - [((_pid==1))] (5683:0:0 - 1)
		IfNotBlocked
		reached[1][5677] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5678, 5683) */
		reached[1][5678] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5682, 5683) */
		reached[1][5682] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2987: // STATE 5679 - mutant_243.pml:255 - [((_pid>1))] (5683:0:0 - 1)
		IfNotBlocked
		reached[1][5679] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5680, 5683) */
		reached[1][5680] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5682, 5683) */
		reached[1][5682] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 2988: // STATE 5683 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5683] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2989: // STATE 5684 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5736:1 - 1)
		IfNotBlocked
		reached[1][5684] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5736, 5689, 5736) */
		reached[1][5689] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2990: // STATE 5687 - mutant_243.pml:370 - [(1)] (5736:0:1 - 1)
		IfNotBlocked
		reached[1][5687] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5736, 5689, 5736) */
		reached[1][5689] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2991: // STATE 5691 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5691] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2992: // STATE 5692 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5726:0:1 - 1)
		IfNotBlocked
		reached[1][5692] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5726, 5693, 5726) */
		reached[1][5693] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5726, 5694, 5726) */
		reached[1][5694] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2993: // STATE 5710 - mutant_243.pml:394 - [.(goto)] (0:5726:0 - 6)
		IfNotBlocked
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2994: // STATE 5695 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5726:0:1 - 1)
		IfNotBlocked
		reached[1][5695] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5726, 5696, 5726) */
		reached[1][5696] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5726, 5697, 5726) */
		reached[1][5697] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2995: // STATE 5698 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5726:0:1 - 1)
		IfNotBlocked
		reached[1][5698] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5726, 5699, 5726) */
		reached[1][5699] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5726, 5700, 5726) */
		reached[1][5700] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2996: // STATE 5701 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5726:0:1 - 1)
		IfNotBlocked
		reached[1][5701] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5726, 5702, 5726) */
		reached[1][5702] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5726, 5703, 5726) */
		reached[1][5703] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2997: // STATE 5704 - mutant_243.pml:388 - [((STOP==ABORT))] (5726:0:1 - 1)
		IfNotBlocked
		reached[1][5704] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5726, 5705, 5726) */
		reached[1][5705] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5726, 5706, 5726) */
		reached[1][5706] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2998: // STATE 5708 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5726:0 - 1)
		IfNotBlocked
		reached[1][5708] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5726, 5710, 5726) */
		reached[1][5710] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2999: // STATE 5713 - mutant_243.pml:263 - [((_pid==0))] (5721:0:0 - 1)
		IfNotBlocked
		reached[1][5713] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5714, 5721) */
		reached[1][5714] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5720, 5721) */
		reached[1][5720] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3000: // STATE 5715 - mutant_243.pml:265 - [((_pid==1))] (5721:0:0 - 1)
		IfNotBlocked
		reached[1][5715] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5716, 5721) */
		reached[1][5716] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5720, 5721) */
		reached[1][5720] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3001: // STATE 5717 - mutant_243.pml:267 - [((_pid>1))] (5721:0:0 - 1)
		IfNotBlocked
		reached[1][5717] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5718, 5721) */
		reached[1][5718] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5720, 5721) */
		reached[1][5720] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3002: // STATE 5721 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5721] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3003: // STATE 5722 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5736:1 - 1)
		IfNotBlocked
		reached[1][5722] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5736, 5727, 5736) */
		reached[1][5727] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3004: // STATE 5725 - mutant_243.pml:399 - [(1)] (5736:0:1 - 1)
		IfNotBlocked
		reached[1][5725] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5736, 5727, 5736) */
		reached[1][5727] = 1;
		;
		/* merge: .(goto)(5736, 5730, 5736) */
		reached[1][5730] = 1;
		;
		/* merge: j = (j+1)(5736, 5732, 5736) */
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3005: // STATE 5732 - mutant_243.pml:435 - [j = (j+1)] (0:5736:1 - 13)
		IfNotBlocked
		reached[1][5732] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5737, 5736) */
		reached[1][5737] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3006: // STATE 5734 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5734] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3007: // STATE 5740 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5740] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3008: // STATE 5741 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5741] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3009: // STATE 5742 - mutant_243.pml:227 - [((_pid==0))] (5750:0:0 - 1)
		IfNotBlocked
		reached[1][5742] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5743, 5750) */
		reached[1][5743] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5749, 5750) */
		reached[1][5749] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3010: // STATE 5744 - mutant_243.pml:229 - [((_pid==1))] (5750:0:0 - 1)
		IfNotBlocked
		reached[1][5744] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5745, 5750) */
		reached[1][5745] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5749, 5750) */
		reached[1][5749] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3011: // STATE 5746 - mutant_243.pml:231 - [((_pid>1))] (5750:0:0 - 1)
		IfNotBlocked
		reached[1][5746] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5747, 5750) */
		reached[1][5747] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5749, 5750) */
		reached[1][5749] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3012: // STATE 5750 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5750] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3013: // STATE 5751 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:5795:1 - 1)
		IfNotBlocked
		reached[1][5751] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5795, 5790, 5795) */
		reached[1][5790] = 1;
		;
		/* merge: j = (j+1)(5795, 5791, 5795) */
		reached[1][5791] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5796, 5795) */
		reached[1][5796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3014: // STATE 5753 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5753] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3015: // STATE 5754 - mutant_243.pml:251 - [((_pid==0))] (5762:0:0 - 1)
		IfNotBlocked
		reached[1][5754] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5755, 5762) */
		reached[1][5755] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5761, 5762) */
		reached[1][5761] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3016: // STATE 5756 - mutant_243.pml:253 - [((_pid==1))] (5762:0:0 - 1)
		IfNotBlocked
		reached[1][5756] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 5757, 5762) */
		reached[1][5757] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5761, 5762) */
		reached[1][5761] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3017: // STATE 5758 - mutant_243.pml:255 - [((_pid>1))] (5762:0:0 - 1)
		IfNotBlocked
		reached[1][5758] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 5759, 5762) */
		reached[1][5759] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5761, 5762) */
		reached[1][5761] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3018: // STATE 5762 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5762] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3019: // STATE 5763 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:5795:1 - 1)
		IfNotBlocked
		reached[1][5763] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5795, 5790, 5795) */
		reached[1][5790] = 1;
		;
		/* merge: j = (j+1)(5795, 5791, 5795) */
		reached[1][5791] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5796, 5795) */
		reached[1][5796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3020: // STATE 5765 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5765] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3021: // STATE 5766 - mutant_243.pml:239 - [((_pid==0))] (5774:0:0 - 1)
		IfNotBlocked
		reached[1][5766] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5767, 5774) */
		reached[1][5767] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5773, 5774) */
		reached[1][5773] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3022: // STATE 5768 - mutant_243.pml:241 - [((_pid==1))] (5774:0:0 - 1)
		IfNotBlocked
		reached[1][5768] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5769, 5774) */
		reached[1][5769] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5773, 5774) */
		reached[1][5773] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3023: // STATE 5770 - mutant_243.pml:243 - [((_pid>1))] (5774:0:0 - 1)
		IfNotBlocked
		reached[1][5770] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5771, 5774) */
		reached[1][5771] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5773, 5774) */
		reached[1][5773] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3024: // STATE 5774 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5774] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3025: // STATE 5775 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:5795:1 - 1)
		IfNotBlocked
		reached[1][5775] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5795, 5790, 5795) */
		reached[1][5790] = 1;
		;
		/* merge: j = (j+1)(5795, 5791, 5795) */
		reached[1][5791] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5796, 5795) */
		reached[1][5796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3026: // STATE 5777 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5777] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3027: // STATE 5778 - mutant_243.pml:263 - [((_pid==0))] (5786:0:0 - 1)
		IfNotBlocked
		reached[1][5778] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 5779, 5786) */
		reached[1][5779] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5785, 5786) */
		reached[1][5785] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3028: // STATE 5780 - mutant_243.pml:265 - [((_pid==1))] (5786:0:0 - 1)
		IfNotBlocked
		reached[1][5780] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 5781, 5786) */
		reached[1][5781] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5785, 5786) */
		reached[1][5785] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3029: // STATE 5782 - mutant_243.pml:267 - [((_pid>1))] (5786:0:0 - 1)
		IfNotBlocked
		reached[1][5782] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 5783, 5786) */
		reached[1][5783] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5785, 5786) */
		reached[1][5785] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3030: // STATE 5786 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5786] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3031: // STATE 5787 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:5795:1 - 1)
		IfNotBlocked
		reached[1][5787] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(5795, 5790, 5795) */
		reached[1][5790] = 1;
		;
		/* merge: j = (j+1)(5795, 5791, 5795) */
		reached[1][5791] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5796, 5795) */
		reached[1][5796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3032: // STATE 5791 - mutant_243.pml:475 - [j = (j+1)] (0:5795:1 - 5)
		IfNotBlocked
		reached[1][5791] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5796, 5795) */
		reached[1][5796] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3033: // STATE 5793 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5793] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3034: // STATE 5814 - mutant_243.pml:536 - [executing[0] = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5814] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[0]);
		now.executing[0] = 1;
#ifdef VAR_RANGES
		logval("executing[0]", ((int)now.executing[0]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3035: // STATE 5815 - mutant_243.pml:496 - [all_workers_stopped = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5815] = 1;
		(trpt+1)->bup.oval = ((int)now.all_workers_stopped);
		now.all_workers_stopped = 1;
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3036: // STATE 5816 - mutant_243.pml:498 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5816] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3037: // STATE 5817 - mutant_243.pml:499 - [all_workers_stopped = (all_workers_stopped&&(states[j]==STOPPED))] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5817] = 1;
		(trpt+1)->bup.oval = ((int)now.all_workers_stopped);
		now.all_workers_stopped = (((int)now.all_workers_stopped)&&(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9));
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3038: // STATE 5818 - mutant_243.pml:500 - [exists_aborted_worker = (exists_aborted_worker||(states[j]==ABORTED))] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5818] = 1;
		(trpt+1)->bup.oval = ((int)now.exists_aborted_worker);
		now.exists_aborted_worker = (((int)now.exists_aborted_worker)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11));
#ifdef VAR_RANGES
		logval("exists_aborted_worker", ((int)now.exists_aborted_worker));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3039: // STATE 5819 - mutant_243.pml:501 - [j = (j+1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5819] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3040: // STATE 5821 - mutant_243.pml:503 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3041: // STATE 5827 - mutant_243.pml:539 - [(all_workers_stopped)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5827] = 1;
		if (!(((int)now.all_workers_stopped)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3042: // STATE 5828 - mutant_243.pml:540 - [printf('Supervisor will stop because all Workers have stopped...\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5828] = 1;
		Printf("Supervisor will stop because all Workers have stopped...\n");
		_m = 3; goto P999; /* 0 */
	case 3043: // STATE 5829 - mutant_243.pml:376 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (5863:0:1 - 1)
		IfNotBlocked
		reached[1][5829] = 1;
		if (!(((12==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(5863, 5830, 5863) */
		reached[1][5830] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(5863, 5831, 5863) */
		reached[1][5831] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3044: // STATE 5847 - mutant_243.pml:394 - [.(goto)] (0:5863:0 - 6)
		IfNotBlocked
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3045: // STATE 5832 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (5863:0:1 - 1)
		IfNotBlocked
		reached[1][5832] = 1;
		if (!(((12==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(5863, 5833, 5863) */
		reached[1][5833] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(5863, 5834, 5863) */
		reached[1][5834] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3046: // STATE 5835 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (5863:0:1 - 1)
		IfNotBlocked
		reached[1][5835] = 1;
		if (!(((12==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(5863, 5836, 5863) */
		reached[1][5836] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(5863, 5837, 5863) */
		reached[1][5837] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3047: // STATE 5838 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (5863:0:1 - 1)
		IfNotBlocked
		reached[1][5838] = 1;
		if (!(((12==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(5863, 5839, 5863) */
		reached[1][5839] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(5863, 5840, 5863) */
		reached[1][5840] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3048: // STATE 5841 - mutant_243.pml:388 - [((STOP==ABORT))] (5863:0:1 - 1)
		IfNotBlocked
		reached[1][5841] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[0]!=READY))(5863, 5842, 5863) */
		reached[1][5842] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(5863, 5843, 5863) */
		reached[1][5843] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3049: // STATE 5845 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:5863:0 - 1)
		IfNotBlocked
		reached[1][5845] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(5863, 5847, 5863) */
		reached[1][5847] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3050: // STATE 5850 - mutant_243.pml:263 - [((_pid==0))] (5858:0:0 - 1)
		IfNotBlocked
		reached[1][5850] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',0)(0, 5851, 5858) */
		reached[1][5851] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 5857, 5858) */
		reached[1][5857] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3051: // STATE 5852 - mutant_243.pml:265 - [((_pid==1))] (5858:0:0 - 1)
		IfNotBlocked
		reached[1][5852] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)(0, 5853, 5858) */
		reached[1][5853] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 5857, 5858) */
		reached[1][5857] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3052: // STATE 5854 - mutant_243.pml:267 - [((_pid>1))] (5858:0:0 - 1)
		IfNotBlocked
		reached[1][5854] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)(0, 5855, 5858) */
		reached[1][5855] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 5857, 5858) */
		reached[1][5857] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3053: // STATE 5858 - mutant_243.pml:270 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5858] = 1;
		if (!(((now.states[0]==9)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3054: // STATE 5859 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5859] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 3055: // STATE 5866 - mutant_243.pml:542 - [(exists_aborted_worker)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5866] = 1;
		if (!(((int)now.exists_aborted_worker)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3056: // STATE 5867 - mutant_243.pml:543 - [printf('Supervisor will stop because some Workers have aborted...\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5867] = 1;
		Printf("Supervisor will stop because some Workers have aborted...\n");
		_m = 3; goto P999; /* 0 */
	case 3057: // STATE 5868 - mutant_243.pml:376 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (5902:0:1 - 1)
		IfNotBlocked
		reached[1][5868] = 1;
		if (!(((12==5)&&(now.commands[0]==6))))
			continue;
		/* merge: assert((states[0]==READY))(5902, 5869, 5902) */
		reached[1][5869] = 1;
		spin_assert((now.states[0]==1), "(states[0]==1)", II, tt, t);
		/* merge: commands[0] = START(5902, 5870, 5902) */
		reached[1][5870] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 5;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3058: // STATE 5886 - mutant_243.pml:394 - [.(goto)] (0:5902:0 - 6)
		IfNotBlocked
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3059: // STATE 5871 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (5902:0:1 - 1)
		IfNotBlocked
		reached[1][5871] = 1;
		if (!(((12==8)&&(now.commands[0]==6))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(5902, 5872, 5902) */
		reached[1][5872] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==3)), "((states[0]==2)||(states[0]==3))", II, tt, t);
		/* merge: commands[0] = PAUSE(5902, 5873, 5902) */
		reached[1][5873] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3060: // STATE 5874 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (5902:0:1 - 1)
		IfNotBlocked
		reached[1][5874] = 1;
		if (!(((12==6)&&((now.commands[0]==5)||(now.commands[0]==8)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(5902, 5875, 5902) */
		reached[1][5875] = 1;
		spin_assert(((now.states[0]==2)||(now.states[0]==4)), "((states[0]==2)||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = CONTINUE(5902, 5876, 5902) */
		reached[1][5876] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3061: // STATE 5877 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (5902:0:1 - 1)
		IfNotBlocked
		reached[1][5877] = 1;
		if (!(((12==12)&&((now.commands[0]==6)||(now.commands[0]==8)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(5902, 5878, 5902) */
		reached[1][5878] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		/* merge: commands[0] = STOP(5902, 5879, 5902) */
		reached[1][5879] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 12;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3062: // STATE 5880 - mutant_243.pml:388 - [((STOP==ABORT))] (5902:0:1 - 1)
		IfNotBlocked
		reached[1][5880] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[0]!=READY))(5902, 5881, 5902) */
		reached[1][5881] = 1;
		spin_assert((now.states[0]!=1), "(states[0]!=1)", II, tt, t);
		/* merge: commands[0] = ABORT(5902, 5882, 5902) */
		reached[1][5882] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 13;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3063: // STATE 5884 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',0,commands[0])] (0:5902:0 - 1)
		IfNotBlocked
		reached[1][5884] = 1;
		Printf("Thread %d ignores command %e.\n", 0, now.commands[0]);
		/* merge: .(goto)(5902, 5886, 5902) */
		reached[1][5886] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3064: // STATE 5889 - mutant_243.pml:263 - [((_pid==0))] (5897:0:0 - 1)
		IfNotBlocked
		reached[1][5889] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',0)(0, 5890, 5897) */
		reached[1][5890] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 5896, 5897) */
		reached[1][5896] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3065: // STATE 5891 - mutant_243.pml:265 - [((_pid==1))] (5897:0:0 - 1)
		IfNotBlocked
		reached[1][5891] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)(0, 5892, 5897) */
		reached[1][5892] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", 0);
		/* merge: .(goto)(0, 5896, 5897) */
		reached[1][5896] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3066: // STATE 5893 - mutant_243.pml:267 - [((_pid>1))] (5897:0:0 - 1)
		IfNotBlocked
		reached[1][5893] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)(0, 5894, 5897) */
		reached[1][5894] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), 0);
		/* merge: .(goto)(0, 5896, 5897) */
		reached[1][5896] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3067: // STATE 5897 - mutant_243.pml:270 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5897] = 1;
		if (!(((now.states[0]==9)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3068: // STATE 5898 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5898] = 1;
		Printf("waiiting ended.\n");
		_m = 3; goto P999; /* 0 */
	case 3069: // STATE 5909 - mutant_243.pml:548 - [executing[0] = 0] (0:0:1 - 8)
		IfNotBlocked
		reached[1][5909] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[0]);
		now.executing[0] = 0;
#ifdef VAR_RANGES
		logval("executing[0]", ((int)now.executing[0]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3070: // STATE 5911 - mutant_243.pml:641 - [((commands[0]==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5911] = 1;
		if (!((now.commands[0]==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3071: // STATE 5912 - mutant_243.pml:643 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5912] = 1;
		if (!((now.states[0]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3072: // STATE 5913 - mutant_243.pml:644 - [((commands[0]!=PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5913] = 1;
		if (!((now.commands[0]!=4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3073: // STATE 5915 - mutant_243.pml:646 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STARTING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5915] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==2)), "(((states[0]==2)||(states[0]==3))||(states[0]==2))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 3074: // STATE 5916 - mutant_243.pml:648 - [(((states[0]==STARTING)||(states[0]==RUNNING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5916] = 1;
		if (!(((now.states[0]==2)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3075: // STATE 5917 - mutant_243.pml:552 - [((4==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5917] = 1;
		if (!((4==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3076: // STATE 5918 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5918] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3077: // STATE 5919 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5919] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 3078: // STATE 5920 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5920] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3079: // STATE 5922 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5922] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3080: // STATE 5923 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5923] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3081: // STATE 5924 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5924] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3082: // STATE 5925 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5925] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3083: // STATE 5926 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (5946:0:1 - 1)
		IfNotBlocked
		reached[1][5926] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5946, 5927, 5946) */
		reached[1][5927] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5946, 5928, 5946) */
		reached[1][5928] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3084: // STATE 5944 - mutant_243.pml:306 - [.(goto)] (0:5946:0 - 6)
		IfNotBlocked
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3085: // STATE 5929 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5946:0:1 - 1)
		IfNotBlocked
		reached[1][5929] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5946, 5930, 5946) */
		reached[1][5930] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5946, 5931, 5946) */
		reached[1][5931] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3086: // STATE 5932 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5946:0:1 - 1)
		IfNotBlocked
		reached[1][5932] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5946, 5933, 5946) */
		reached[1][5933] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5946, 5934, 5946) */
		reached[1][5934] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3087: // STATE 5935 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5946:0:1 - 1)
		IfNotBlocked
		reached[1][5935] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5946, 5936, 5946) */
		reached[1][5936] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5946, 5937, 5946) */
		reached[1][5937] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3088: // STATE 5938 - mutant_243.pml:300 - [((START==ABORT))] (5946:0:1 - 1)
		IfNotBlocked
		reached[1][5938] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5946, 5939, 5946) */
		reached[1][5939] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5946, 5940, 5946) */
		reached[1][5940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3089: // STATE 5942 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5946:0 - 1)
		IfNotBlocked
		reached[1][5942] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5946, 5944, 5946) */
		reached[1][5944] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3090: // STATE 5946 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5946] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3091: // STATE 5948 - mutant_243.pml:227 - [((_pid==0))] (5956:0:0 - 1)
		IfNotBlocked
		reached[1][5948] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 5949, 5956) */
		reached[1][5949] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5955, 5956) */
		reached[1][5955] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3092: // STATE 5950 - mutant_243.pml:229 - [((_pid==1))] (5956:0:0 - 1)
		IfNotBlocked
		reached[1][5950] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 5951, 5956) */
		reached[1][5951] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5955, 5956) */
		reached[1][5955] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3093: // STATE 5952 - mutant_243.pml:231 - [((_pid>1))] (5956:0:0 - 1)
		IfNotBlocked
		reached[1][5952] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 5953, 5956) */
		reached[1][5953] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5955, 5956) */
		reached[1][5955] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3094: // STATE 5956 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5956] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3095: // STATE 5957 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6085:1 - 1)
		IfNotBlocked
		reached[1][5957] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6085, 5962, 6085) */
		reached[1][5962] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3096: // STATE 5960 - mutant_243.pml:312 - [(1)] (6085:0:1 - 1)
		IfNotBlocked
		reached[1][5960] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6085, 5962, 6085) */
		reached[1][5962] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3097: // STATE 5964 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5964] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3098: // STATE 5965 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5999:0:1 - 1)
		IfNotBlocked
		reached[1][5965] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(5999, 5966, 5999) */
		reached[1][5966] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(5999, 5967, 5999) */
		reached[1][5967] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3099: // STATE 5983 - mutant_243.pml:336 - [.(goto)] (0:5999:0 - 6)
		IfNotBlocked
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3100: // STATE 5968 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5999:0:1 - 1)
		IfNotBlocked
		reached[1][5968] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5999, 5969, 5999) */
		reached[1][5969] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(5999, 5970, 5999) */
		reached[1][5970] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3101: // STATE 5971 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5999:0:1 - 1)
		IfNotBlocked
		reached[1][5971] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5999, 5972, 5999) */
		reached[1][5972] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5999, 5973, 5999) */
		reached[1][5973] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3102: // STATE 5974 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5999:0:1 - 1)
		IfNotBlocked
		reached[1][5974] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5999, 5975, 5999) */
		reached[1][5975] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(5999, 5976, 5999) */
		reached[1][5976] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3103: // STATE 5977 - mutant_243.pml:330 - [((PAUSE==ABORT))] (5999:0:1 - 1)
		IfNotBlocked
		reached[1][5977] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(5999, 5978, 5999) */
		reached[1][5978] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(5999, 5979, 5999) */
		reached[1][5979] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3104: // STATE 5981 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:5999:0 - 1)
		IfNotBlocked
		reached[1][5981] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(5999, 5983, 5999) */
		reached[1][5983] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3105: // STATE 5986 - mutant_243.pml:239 - [((_pid==0))] (5994:0:0 - 1)
		IfNotBlocked
		reached[1][5986] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5987, 5994) */
		reached[1][5987] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5993, 5994) */
		reached[1][5993] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3106: // STATE 5988 - mutant_243.pml:241 - [((_pid==1))] (5994:0:0 - 1)
		IfNotBlocked
		reached[1][5988] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 5989, 5994) */
		reached[1][5989] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5993, 5994) */
		reached[1][5993] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3107: // STATE 5990 - mutant_243.pml:243 - [((_pid>1))] (5994:0:0 - 1)
		IfNotBlocked
		reached[1][5990] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 5991, 5994) */
		reached[1][5991] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 5993, 5994) */
		reached[1][5993] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3108: // STATE 5994 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][5994] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3109: // STATE 5995 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6085:1 - 1)
		IfNotBlocked
		reached[1][5995] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6085, 6000, 6085) */
		reached[1][6000] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3110: // STATE 5998 - mutant_243.pml:341 - [(1)] (6085:0:1 - 1)
		IfNotBlocked
		reached[1][5998] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6085, 6000, 6085) */
		reached[1][6000] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3111: // STATE 6002 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6002] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3112: // STATE 6003 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6037:0:1 - 1)
		IfNotBlocked
		reached[1][6003] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6037, 6004, 6037) */
		reached[1][6004] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6037, 6005, 6037) */
		reached[1][6005] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3113: // STATE 6021 - mutant_243.pml:365 - [.(goto)] (0:6037:0 - 6)
		IfNotBlocked
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3114: // STATE 6006 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6037:0:1 - 1)
		IfNotBlocked
		reached[1][6006] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6037, 6007, 6037) */
		reached[1][6007] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6037, 6008, 6037) */
		reached[1][6008] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3115: // STATE 6009 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6037:0:1 - 1)
		IfNotBlocked
		reached[1][6009] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6037, 6010, 6037) */
		reached[1][6010] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6037, 6011, 6037) */
		reached[1][6011] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3116: // STATE 6012 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6037:0:1 - 1)
		IfNotBlocked
		reached[1][6012] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6037, 6013, 6037) */
		reached[1][6013] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6037, 6014, 6037) */
		reached[1][6014] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3117: // STATE 6015 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6037:0:1 - 1)
		IfNotBlocked
		reached[1][6015] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6037, 6016, 6037) */
		reached[1][6016] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6037, 6017, 6037) */
		reached[1][6017] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3118: // STATE 6019 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6037:0 - 1)
		IfNotBlocked
		reached[1][6019] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6037, 6021, 6037) */
		reached[1][6021] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3119: // STATE 6024 - mutant_243.pml:251 - [((_pid==0))] (6032:0:0 - 1)
		IfNotBlocked
		reached[1][6024] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6025, 6032) */
		reached[1][6025] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6031, 6032) */
		reached[1][6031] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3120: // STATE 6026 - mutant_243.pml:253 - [((_pid==1))] (6032:0:0 - 1)
		IfNotBlocked
		reached[1][6026] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6027, 6032) */
		reached[1][6027] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6031, 6032) */
		reached[1][6031] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3121: // STATE 6028 - mutant_243.pml:255 - [((_pid>1))] (6032:0:0 - 1)
		IfNotBlocked
		reached[1][6028] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6029, 6032) */
		reached[1][6029] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6031, 6032) */
		reached[1][6031] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3122: // STATE 6032 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6032] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3123: // STATE 6033 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6085:1 - 1)
		IfNotBlocked
		reached[1][6033] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6085, 6038, 6085) */
		reached[1][6038] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3124: // STATE 6036 - mutant_243.pml:370 - [(1)] (6085:0:1 - 1)
		IfNotBlocked
		reached[1][6036] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6085, 6038, 6085) */
		reached[1][6038] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3125: // STATE 6040 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6040] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3126: // STATE 6041 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6075:0:1 - 1)
		IfNotBlocked
		reached[1][6041] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6075, 6042, 6075) */
		reached[1][6042] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6075, 6043, 6075) */
		reached[1][6043] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3127: // STATE 6059 - mutant_243.pml:394 - [.(goto)] (0:6075:0 - 6)
		IfNotBlocked
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3128: // STATE 6044 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6075:0:1 - 1)
		IfNotBlocked
		reached[1][6044] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6075, 6045, 6075) */
		reached[1][6045] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6075, 6046, 6075) */
		reached[1][6046] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3129: // STATE 6047 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6075:0:1 - 1)
		IfNotBlocked
		reached[1][6047] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6075, 6048, 6075) */
		reached[1][6048] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6075, 6049, 6075) */
		reached[1][6049] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3130: // STATE 6050 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6075:0:1 - 1)
		IfNotBlocked
		reached[1][6050] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6075, 6051, 6075) */
		reached[1][6051] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6075, 6052, 6075) */
		reached[1][6052] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3131: // STATE 6053 - mutant_243.pml:388 - [((STOP==ABORT))] (6075:0:1 - 1)
		IfNotBlocked
		reached[1][6053] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6075, 6054, 6075) */
		reached[1][6054] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6075, 6055, 6075) */
		reached[1][6055] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3132: // STATE 6057 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6075:0 - 1)
		IfNotBlocked
		reached[1][6057] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6075, 6059, 6075) */
		reached[1][6059] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3133: // STATE 6062 - mutant_243.pml:263 - [((_pid==0))] (6070:0:0 - 1)
		IfNotBlocked
		reached[1][6062] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6063, 6070) */
		reached[1][6063] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6069, 6070) */
		reached[1][6069] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3134: // STATE 6064 - mutant_243.pml:265 - [((_pid==1))] (6070:0:0 - 1)
		IfNotBlocked
		reached[1][6064] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6065, 6070) */
		reached[1][6065] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6069, 6070) */
		reached[1][6069] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3135: // STATE 6066 - mutant_243.pml:267 - [((_pid>1))] (6070:0:0 - 1)
		IfNotBlocked
		reached[1][6066] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6067, 6070) */
		reached[1][6067] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6069, 6070) */
		reached[1][6069] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3136: // STATE 6070 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6070] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3137: // STATE 6071 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6085:1 - 1)
		IfNotBlocked
		reached[1][6071] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6085, 6076, 6085) */
		reached[1][6076] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3138: // STATE 6074 - mutant_243.pml:399 - [(1)] (6085:0:1 - 1)
		IfNotBlocked
		reached[1][6074] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6085, 6076, 6085) */
		reached[1][6076] = 1;
		;
		/* merge: .(goto)(6085, 6079, 6085) */
		reached[1][6079] = 1;
		;
		/* merge: j = (j+1)(6085, 6081, 6085) */
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3139: // STATE 6081 - mutant_243.pml:435 - [j = (j+1)] (0:6085:1 - 13)
		IfNotBlocked
		reached[1][6081] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6086, 6085) */
		reached[1][6086] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3140: // STATE 6083 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6083] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3141: // STATE 6090 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6090] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3142: // STATE 6091 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6091] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3143: // STATE 6092 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6092] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3144: // STATE 6093 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (6113:0:1 - 1)
		IfNotBlocked
		reached[1][6093] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6113, 6094, 6113) */
		reached[1][6094] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6113, 6095, 6113) */
		reached[1][6095] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3145: // STATE 6111 - mutant_243.pml:306 - [.(goto)] (0:6113:0 - 6)
		IfNotBlocked
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3146: // STATE 6096 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6113:0:1 - 1)
		IfNotBlocked
		reached[1][6096] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6113, 6097, 6113) */
		reached[1][6097] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6113, 6098, 6113) */
		reached[1][6098] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3147: // STATE 6099 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6113:0:1 - 1)
		IfNotBlocked
		reached[1][6099] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6113, 6100, 6113) */
		reached[1][6100] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6113, 6101, 6113) */
		reached[1][6101] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3148: // STATE 6102 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6113:0:1 - 1)
		IfNotBlocked
		reached[1][6102] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6113, 6103, 6113) */
		reached[1][6103] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6113, 6104, 6113) */
		reached[1][6104] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3149: // STATE 6105 - mutant_243.pml:300 - [((START==ABORT))] (6113:0:1 - 1)
		IfNotBlocked
		reached[1][6105] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6113, 6106, 6113) */
		reached[1][6106] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6113, 6107, 6113) */
		reached[1][6107] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3150: // STATE 6109 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6113:0 - 1)
		IfNotBlocked
		reached[1][6109] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6113, 6111, 6113) */
		reached[1][6111] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3151: // STATE 6113 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6113] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3152: // STATE 6115 - mutant_243.pml:227 - [((_pid==0))] (6123:0:0 - 1)
		IfNotBlocked
		reached[1][6115] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6116, 6123) */
		reached[1][6116] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6122, 6123) */
		reached[1][6122] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3153: // STATE 6117 - mutant_243.pml:229 - [((_pid==1))] (6123:0:0 - 1)
		IfNotBlocked
		reached[1][6117] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6118, 6123) */
		reached[1][6118] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6122, 6123) */
		reached[1][6122] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3154: // STATE 6119 - mutant_243.pml:231 - [((_pid>1))] (6123:0:0 - 1)
		IfNotBlocked
		reached[1][6119] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6120, 6123) */
		reached[1][6120] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6122, 6123) */
		reached[1][6122] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3155: // STATE 6123 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6123] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3156: // STATE 6124 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6252:1 - 1)
		IfNotBlocked
		reached[1][6124] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6252, 6129, 6252) */
		reached[1][6129] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3157: // STATE 6127 - mutant_243.pml:312 - [(1)] (6252:0:1 - 1)
		IfNotBlocked
		reached[1][6127] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6252, 6129, 6252) */
		reached[1][6129] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3158: // STATE 6131 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6131] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3159: // STATE 6132 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6166:0:1 - 1)
		IfNotBlocked
		reached[1][6132] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6166, 6133, 6166) */
		reached[1][6133] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6166, 6134, 6166) */
		reached[1][6134] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3160: // STATE 6150 - mutant_243.pml:336 - [.(goto)] (0:6166:0 - 6)
		IfNotBlocked
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3161: // STATE 6135 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6166:0:1 - 1)
		IfNotBlocked
		reached[1][6135] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6166, 6136, 6166) */
		reached[1][6136] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6166, 6137, 6166) */
		reached[1][6137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3162: // STATE 6138 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6166:0:1 - 1)
		IfNotBlocked
		reached[1][6138] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6166, 6139, 6166) */
		reached[1][6139] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6166, 6140, 6166) */
		reached[1][6140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3163: // STATE 6141 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6166:0:1 - 1)
		IfNotBlocked
		reached[1][6141] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6166, 6142, 6166) */
		reached[1][6142] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6166, 6143, 6166) */
		reached[1][6143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3164: // STATE 6144 - mutant_243.pml:330 - [((PAUSE==ABORT))] (6166:0:1 - 1)
		IfNotBlocked
		reached[1][6144] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6166, 6145, 6166) */
		reached[1][6145] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6166, 6146, 6166) */
		reached[1][6146] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3165: // STATE 6148 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6166:0 - 1)
		IfNotBlocked
		reached[1][6148] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6166, 6150, 6166) */
		reached[1][6150] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3166: // STATE 6153 - mutant_243.pml:239 - [((_pid==0))] (6161:0:0 - 1)
		IfNotBlocked
		reached[1][6153] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6154, 6161) */
		reached[1][6154] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6160, 6161) */
		reached[1][6160] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3167: // STATE 6155 - mutant_243.pml:241 - [((_pid==1))] (6161:0:0 - 1)
		IfNotBlocked
		reached[1][6155] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6156, 6161) */
		reached[1][6156] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6160, 6161) */
		reached[1][6160] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3168: // STATE 6157 - mutant_243.pml:243 - [((_pid>1))] (6161:0:0 - 1)
		IfNotBlocked
		reached[1][6157] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6158, 6161) */
		reached[1][6158] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6160, 6161) */
		reached[1][6160] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3169: // STATE 6161 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6161] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3170: // STATE 6162 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6252:1 - 1)
		IfNotBlocked
		reached[1][6162] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6252, 6167, 6252) */
		reached[1][6167] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3171: // STATE 6165 - mutant_243.pml:341 - [(1)] (6252:0:1 - 1)
		IfNotBlocked
		reached[1][6165] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6252, 6167, 6252) */
		reached[1][6167] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3172: // STATE 6169 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6169] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3173: // STATE 6170 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6204:0:1 - 1)
		IfNotBlocked
		reached[1][6170] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6204, 6171, 6204) */
		reached[1][6171] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6204, 6172, 6204) */
		reached[1][6172] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3174: // STATE 6188 - mutant_243.pml:365 - [.(goto)] (0:6204:0 - 6)
		IfNotBlocked
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3175: // STATE 6173 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6204:0:1 - 1)
		IfNotBlocked
		reached[1][6173] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6204, 6174, 6204) */
		reached[1][6174] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6204, 6175, 6204) */
		reached[1][6175] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3176: // STATE 6176 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6204:0:1 - 1)
		IfNotBlocked
		reached[1][6176] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6204, 6177, 6204) */
		reached[1][6177] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6204, 6178, 6204) */
		reached[1][6178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3177: // STATE 6179 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6204:0:1 - 1)
		IfNotBlocked
		reached[1][6179] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6204, 6180, 6204) */
		reached[1][6180] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6204, 6181, 6204) */
		reached[1][6181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3178: // STATE 6182 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6204:0:1 - 1)
		IfNotBlocked
		reached[1][6182] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6204, 6183, 6204) */
		reached[1][6183] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6204, 6184, 6204) */
		reached[1][6184] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3179: // STATE 6186 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6204:0 - 1)
		IfNotBlocked
		reached[1][6186] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6204, 6188, 6204) */
		reached[1][6188] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3180: // STATE 6191 - mutant_243.pml:251 - [((_pid==0))] (6199:0:0 - 1)
		IfNotBlocked
		reached[1][6191] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6192, 6199) */
		reached[1][6192] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6198, 6199) */
		reached[1][6198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3181: // STATE 6193 - mutant_243.pml:253 - [((_pid==1))] (6199:0:0 - 1)
		IfNotBlocked
		reached[1][6193] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6194, 6199) */
		reached[1][6194] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6198, 6199) */
		reached[1][6198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3182: // STATE 6195 - mutant_243.pml:255 - [((_pid>1))] (6199:0:0 - 1)
		IfNotBlocked
		reached[1][6195] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6196, 6199) */
		reached[1][6196] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6198, 6199) */
		reached[1][6198] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3183: // STATE 6199 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6199] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3184: // STATE 6200 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6252:1 - 1)
		IfNotBlocked
		reached[1][6200] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6252, 6205, 6252) */
		reached[1][6205] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3185: // STATE 6203 - mutant_243.pml:370 - [(1)] (6252:0:1 - 1)
		IfNotBlocked
		reached[1][6203] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6252, 6205, 6252) */
		reached[1][6205] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3186: // STATE 6207 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6207] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3187: // STATE 6208 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6242:0:1 - 1)
		IfNotBlocked
		reached[1][6208] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6242, 6209, 6242) */
		reached[1][6209] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6242, 6210, 6242) */
		reached[1][6210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3188: // STATE 6226 - mutant_243.pml:394 - [.(goto)] (0:6242:0 - 6)
		IfNotBlocked
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3189: // STATE 6211 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6242:0:1 - 1)
		IfNotBlocked
		reached[1][6211] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6242, 6212, 6242) */
		reached[1][6212] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6242, 6213, 6242) */
		reached[1][6213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3190: // STATE 6214 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6242:0:1 - 1)
		IfNotBlocked
		reached[1][6214] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6242, 6215, 6242) */
		reached[1][6215] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6242, 6216, 6242) */
		reached[1][6216] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3191: // STATE 6217 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6242:0:1 - 1)
		IfNotBlocked
		reached[1][6217] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6242, 6218, 6242) */
		reached[1][6218] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6242, 6219, 6242) */
		reached[1][6219] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3192: // STATE 6220 - mutant_243.pml:388 - [((STOP==ABORT))] (6242:0:1 - 1)
		IfNotBlocked
		reached[1][6220] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6242, 6221, 6242) */
		reached[1][6221] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6242, 6222, 6242) */
		reached[1][6222] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3193: // STATE 6224 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6242:0 - 1)
		IfNotBlocked
		reached[1][6224] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6242, 6226, 6242) */
		reached[1][6226] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3194: // STATE 6229 - mutant_243.pml:263 - [((_pid==0))] (6237:0:0 - 1)
		IfNotBlocked
		reached[1][6229] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6230, 6237) */
		reached[1][6230] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6236, 6237) */
		reached[1][6236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3195: // STATE 6231 - mutant_243.pml:265 - [((_pid==1))] (6237:0:0 - 1)
		IfNotBlocked
		reached[1][6231] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6232, 6237) */
		reached[1][6232] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6236, 6237) */
		reached[1][6236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3196: // STATE 6233 - mutant_243.pml:267 - [((_pid>1))] (6237:0:0 - 1)
		IfNotBlocked
		reached[1][6233] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6234, 6237) */
		reached[1][6234] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6236, 6237) */
		reached[1][6236] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3197: // STATE 6237 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6237] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3198: // STATE 6238 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6252:1 - 1)
		IfNotBlocked
		reached[1][6238] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6252, 6243, 6252) */
		reached[1][6243] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3199: // STATE 6241 - mutant_243.pml:399 - [(1)] (6252:0:1 - 1)
		IfNotBlocked
		reached[1][6241] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6252, 6243, 6252) */
		reached[1][6243] = 1;
		;
		/* merge: .(goto)(6252, 6246, 6252) */
		reached[1][6246] = 1;
		;
		/* merge: j = (j-1)(6252, 6248, 6252) */
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3200: // STATE 6248 - mutant_243.pml:446 - [j = (j-1)] (0:6252:1 - 13)
		IfNotBlocked
		reached[1][6248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6253, 6252) */
		reached[1][6253] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3201: // STATE 6250 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6250] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3202: // STATE 6260 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6260] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 3203: // STATE 6261 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6261] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3204: // STATE 6262 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6262] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3205: // STATE 6263 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (6283:0:1 - 1)
		IfNotBlocked
		reached[1][6263] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6283, 6264, 6283) */
		reached[1][6264] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6283, 6265, 6283) */
		reached[1][6265] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3206: // STATE 6281 - mutant_243.pml:306 - [.(goto)] (0:6283:0 - 6)
		IfNotBlocked
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3207: // STATE 6266 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6283:0:1 - 1)
		IfNotBlocked
		reached[1][6266] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6283, 6267, 6283) */
		reached[1][6267] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6283, 6268, 6283) */
		reached[1][6268] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3208: // STATE 6269 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6283:0:1 - 1)
		IfNotBlocked
		reached[1][6269] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6283, 6270, 6283) */
		reached[1][6270] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6283, 6271, 6283) */
		reached[1][6271] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3209: // STATE 6272 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6283:0:1 - 1)
		IfNotBlocked
		reached[1][6272] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6283, 6273, 6283) */
		reached[1][6273] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6283, 6274, 6283) */
		reached[1][6274] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3210: // STATE 6275 - mutant_243.pml:300 - [((START==ABORT))] (6283:0:1 - 1)
		IfNotBlocked
		reached[1][6275] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6283, 6276, 6283) */
		reached[1][6276] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6283, 6277, 6283) */
		reached[1][6277] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3211: // STATE 6279 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6283:0 - 1)
		IfNotBlocked
		reached[1][6279] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6283, 6281, 6283) */
		reached[1][6281] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3212: // STATE 6283 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6283] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3213: // STATE 6285 - mutant_243.pml:227 - [((_pid==0))] (6293:0:0 - 1)
		IfNotBlocked
		reached[1][6285] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6286, 6293) */
		reached[1][6286] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6292, 6293) */
		reached[1][6292] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3214: // STATE 6287 - mutant_243.pml:229 - [((_pid==1))] (6293:0:0 - 1)
		IfNotBlocked
		reached[1][6287] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6288, 6293) */
		reached[1][6288] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6292, 6293) */
		reached[1][6292] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3215: // STATE 6289 - mutant_243.pml:231 - [((_pid>1))] (6293:0:0 - 1)
		IfNotBlocked
		reached[1][6289] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6290, 6293) */
		reached[1][6290] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6292, 6293) */
		reached[1][6292] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3216: // STATE 6293 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6293] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3217: // STATE 6294 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6422:1 - 1)
		IfNotBlocked
		reached[1][6294] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6422, 6299, 6422) */
		reached[1][6299] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3218: // STATE 6297 - mutant_243.pml:312 - [(1)] (6422:0:1 - 1)
		IfNotBlocked
		reached[1][6297] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6422, 6299, 6422) */
		reached[1][6299] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3219: // STATE 6301 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6301] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3220: // STATE 6302 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6336:0:1 - 1)
		IfNotBlocked
		reached[1][6302] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6336, 6303, 6336) */
		reached[1][6303] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6336, 6304, 6336) */
		reached[1][6304] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3221: // STATE 6320 - mutant_243.pml:336 - [.(goto)] (0:6336:0 - 6)
		IfNotBlocked
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3222: // STATE 6305 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6336:0:1 - 1)
		IfNotBlocked
		reached[1][6305] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6336, 6306, 6336) */
		reached[1][6306] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6336, 6307, 6336) */
		reached[1][6307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3223: // STATE 6308 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6336:0:1 - 1)
		IfNotBlocked
		reached[1][6308] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6336, 6309, 6336) */
		reached[1][6309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6336, 6310, 6336) */
		reached[1][6310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3224: // STATE 6311 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6336:0:1 - 1)
		IfNotBlocked
		reached[1][6311] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6336, 6312, 6336) */
		reached[1][6312] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6336, 6313, 6336) */
		reached[1][6313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3225: // STATE 6314 - mutant_243.pml:330 - [((PAUSE==ABORT))] (6336:0:1 - 1)
		IfNotBlocked
		reached[1][6314] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6336, 6315, 6336) */
		reached[1][6315] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6336, 6316, 6336) */
		reached[1][6316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3226: // STATE 6318 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6336:0 - 1)
		IfNotBlocked
		reached[1][6318] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6336, 6320, 6336) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3227: // STATE 6323 - mutant_243.pml:239 - [((_pid==0))] (6331:0:0 - 1)
		IfNotBlocked
		reached[1][6323] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6324, 6331) */
		reached[1][6324] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6330, 6331) */
		reached[1][6330] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3228: // STATE 6325 - mutant_243.pml:241 - [((_pid==1))] (6331:0:0 - 1)
		IfNotBlocked
		reached[1][6325] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6326, 6331) */
		reached[1][6326] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6330, 6331) */
		reached[1][6330] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3229: // STATE 6327 - mutant_243.pml:243 - [((_pid>1))] (6331:0:0 - 1)
		IfNotBlocked
		reached[1][6327] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6328, 6331) */
		reached[1][6328] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6330, 6331) */
		reached[1][6330] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3230: // STATE 6331 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6331] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3231: // STATE 6332 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6422:1 - 1)
		IfNotBlocked
		reached[1][6332] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6422, 6337, 6422) */
		reached[1][6337] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3232: // STATE 6335 - mutant_243.pml:341 - [(1)] (6422:0:1 - 1)
		IfNotBlocked
		reached[1][6335] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6422, 6337, 6422) */
		reached[1][6337] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3233: // STATE 6339 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6339] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3234: // STATE 6340 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6374:0:1 - 1)
		IfNotBlocked
		reached[1][6340] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6374, 6341, 6374) */
		reached[1][6341] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6374, 6342, 6374) */
		reached[1][6342] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3235: // STATE 6358 - mutant_243.pml:365 - [.(goto)] (0:6374:0 - 6)
		IfNotBlocked
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3236: // STATE 6343 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6374:0:1 - 1)
		IfNotBlocked
		reached[1][6343] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6374, 6344, 6374) */
		reached[1][6344] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6374, 6345, 6374) */
		reached[1][6345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3237: // STATE 6346 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6374:0:1 - 1)
		IfNotBlocked
		reached[1][6346] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6374, 6347, 6374) */
		reached[1][6347] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6374, 6348, 6374) */
		reached[1][6348] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3238: // STATE 6349 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6374:0:1 - 1)
		IfNotBlocked
		reached[1][6349] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6374, 6350, 6374) */
		reached[1][6350] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6374, 6351, 6374) */
		reached[1][6351] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3239: // STATE 6352 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6374:0:1 - 1)
		IfNotBlocked
		reached[1][6352] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6374, 6353, 6374) */
		reached[1][6353] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6374, 6354, 6374) */
		reached[1][6354] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3240: // STATE 6356 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6374:0 - 1)
		IfNotBlocked
		reached[1][6356] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6374, 6358, 6374) */
		reached[1][6358] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3241: // STATE 6361 - mutant_243.pml:251 - [((_pid==0))] (6369:0:0 - 1)
		IfNotBlocked
		reached[1][6361] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6362, 6369) */
		reached[1][6362] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6368, 6369) */
		reached[1][6368] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3242: // STATE 6363 - mutant_243.pml:253 - [((_pid==1))] (6369:0:0 - 1)
		IfNotBlocked
		reached[1][6363] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6364, 6369) */
		reached[1][6364] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6368, 6369) */
		reached[1][6368] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3243: // STATE 6365 - mutant_243.pml:255 - [((_pid>1))] (6369:0:0 - 1)
		IfNotBlocked
		reached[1][6365] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6366, 6369) */
		reached[1][6366] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6368, 6369) */
		reached[1][6368] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3244: // STATE 6369 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6369] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3245: // STATE 6370 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6422:1 - 1)
		IfNotBlocked
		reached[1][6370] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6422, 6375, 6422) */
		reached[1][6375] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3246: // STATE 6373 - mutant_243.pml:370 - [(1)] (6422:0:1 - 1)
		IfNotBlocked
		reached[1][6373] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6422, 6375, 6422) */
		reached[1][6375] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3247: // STATE 6377 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6377] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3248: // STATE 6378 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6412:0:1 - 1)
		IfNotBlocked
		reached[1][6378] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6412, 6379, 6412) */
		reached[1][6379] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6412, 6380, 6412) */
		reached[1][6380] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3249: // STATE 6396 - mutant_243.pml:394 - [.(goto)] (0:6412:0 - 6)
		IfNotBlocked
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3250: // STATE 6381 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6412:0:1 - 1)
		IfNotBlocked
		reached[1][6381] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6412, 6382, 6412) */
		reached[1][6382] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6412, 6383, 6412) */
		reached[1][6383] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3251: // STATE 6384 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6412:0:1 - 1)
		IfNotBlocked
		reached[1][6384] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6412, 6385, 6412) */
		reached[1][6385] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6412, 6386, 6412) */
		reached[1][6386] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3252: // STATE 6387 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6412:0:1 - 1)
		IfNotBlocked
		reached[1][6387] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6412, 6388, 6412) */
		reached[1][6388] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6412, 6389, 6412) */
		reached[1][6389] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3253: // STATE 6390 - mutant_243.pml:388 - [((STOP==ABORT))] (6412:0:1 - 1)
		IfNotBlocked
		reached[1][6390] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6412, 6391, 6412) */
		reached[1][6391] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6412, 6392, 6412) */
		reached[1][6392] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3254: // STATE 6394 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6412:0 - 1)
		IfNotBlocked
		reached[1][6394] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6412, 6396, 6412) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3255: // STATE 6399 - mutant_243.pml:263 - [((_pid==0))] (6407:0:0 - 1)
		IfNotBlocked
		reached[1][6399] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6400, 6407) */
		reached[1][6400] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6406, 6407) */
		reached[1][6406] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3256: // STATE 6401 - mutant_243.pml:265 - [((_pid==1))] (6407:0:0 - 1)
		IfNotBlocked
		reached[1][6401] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6402, 6407) */
		reached[1][6402] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6406, 6407) */
		reached[1][6406] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3257: // STATE 6403 - mutant_243.pml:267 - [((_pid>1))] (6407:0:0 - 1)
		IfNotBlocked
		reached[1][6403] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6404, 6407) */
		reached[1][6404] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6406, 6407) */
		reached[1][6406] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3258: // STATE 6407 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6407] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3259: // STATE 6408 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6422:1 - 1)
		IfNotBlocked
		reached[1][6408] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6422, 6413, 6422) */
		reached[1][6413] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3260: // STATE 6411 - mutant_243.pml:399 - [(1)] (6422:0:1 - 1)
		IfNotBlocked
		reached[1][6411] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6422, 6413, 6422) */
		reached[1][6413] = 1;
		;
		/* merge: .(goto)(6422, 6416, 6422) */
		reached[1][6416] = 1;
		;
		/* merge: j = (j+1)(6422, 6418, 6422) */
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3261: // STATE 6418 - mutant_243.pml:435 - [j = (j+1)] (0:6422:1 - 13)
		IfNotBlocked
		reached[1][6418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6423, 6422) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3262: // STATE 6420 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6420] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3263: // STATE 6426 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6426] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3264: // STATE 6427 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6427] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3265: // STATE 6428 - mutant_243.pml:227 - [((_pid==0))] (6436:0:0 - 1)
		IfNotBlocked
		reached[1][6428] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6429, 6436) */
		reached[1][6429] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6435, 6436) */
		reached[1][6435] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3266: // STATE 6430 - mutant_243.pml:229 - [((_pid==1))] (6436:0:0 - 1)
		IfNotBlocked
		reached[1][6430] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6431, 6436) */
		reached[1][6431] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6435, 6436) */
		reached[1][6435] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3267: // STATE 6432 - mutant_243.pml:231 - [((_pid>1))] (6436:0:0 - 1)
		IfNotBlocked
		reached[1][6432] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6433, 6436) */
		reached[1][6433] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6435, 6436) */
		reached[1][6435] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3268: // STATE 6436 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6436] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3269: // STATE 6437 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6481:1 - 1)
		IfNotBlocked
		reached[1][6437] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6481, 6476, 6481) */
		reached[1][6476] = 1;
		;
		/* merge: j = (j+1)(6481, 6477, 6481) */
		reached[1][6477] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6482, 6481) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3270: // STATE 6439 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6439] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3271: // STATE 6440 - mutant_243.pml:251 - [((_pid==0))] (6448:0:0 - 1)
		IfNotBlocked
		reached[1][6440] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6441, 6448) */
		reached[1][6441] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6447, 6448) */
		reached[1][6447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3272: // STATE 6442 - mutant_243.pml:253 - [((_pid==1))] (6448:0:0 - 1)
		IfNotBlocked
		reached[1][6442] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6443, 6448) */
		reached[1][6443] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6447, 6448) */
		reached[1][6447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3273: // STATE 6444 - mutant_243.pml:255 - [((_pid>1))] (6448:0:0 - 1)
		IfNotBlocked
		reached[1][6444] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6445, 6448) */
		reached[1][6445] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6447, 6448) */
		reached[1][6447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3274: // STATE 6448 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6448] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3275: // STATE 6449 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6481:1 - 1)
		IfNotBlocked
		reached[1][6449] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6481, 6476, 6481) */
		reached[1][6476] = 1;
		;
		/* merge: j = (j+1)(6481, 6477, 6481) */
		reached[1][6477] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6482, 6481) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3276: // STATE 6451 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6451] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3277: // STATE 6452 - mutant_243.pml:239 - [((_pid==0))] (6460:0:0 - 1)
		IfNotBlocked
		reached[1][6452] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6453, 6460) */
		reached[1][6453] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6459, 6460) */
		reached[1][6459] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3278: // STATE 6454 - mutant_243.pml:241 - [((_pid==1))] (6460:0:0 - 1)
		IfNotBlocked
		reached[1][6454] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6455, 6460) */
		reached[1][6455] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6459, 6460) */
		reached[1][6459] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3279: // STATE 6456 - mutant_243.pml:243 - [((_pid>1))] (6460:0:0 - 1)
		IfNotBlocked
		reached[1][6456] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6457, 6460) */
		reached[1][6457] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6459, 6460) */
		reached[1][6459] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3280: // STATE 6460 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6460] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3281: // STATE 6461 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6481:1 - 1)
		IfNotBlocked
		reached[1][6461] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6481, 6476, 6481) */
		reached[1][6476] = 1;
		;
		/* merge: j = (j+1)(6481, 6477, 6481) */
		reached[1][6477] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6482, 6481) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3282: // STATE 6463 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6463] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3283: // STATE 6464 - mutant_243.pml:263 - [((_pid==0))] (6472:0:0 - 1)
		IfNotBlocked
		reached[1][6464] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6465, 6472) */
		reached[1][6465] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6471, 6472) */
		reached[1][6471] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3284: // STATE 6466 - mutant_243.pml:265 - [((_pid==1))] (6472:0:0 - 1)
		IfNotBlocked
		reached[1][6466] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6467, 6472) */
		reached[1][6467] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6471, 6472) */
		reached[1][6471] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3285: // STATE 6468 - mutant_243.pml:267 - [((_pid>1))] (6472:0:0 - 1)
		IfNotBlocked
		reached[1][6468] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6469, 6472) */
		reached[1][6469] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6471, 6472) */
		reached[1][6471] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3286: // STATE 6472 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6472] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3287: // STATE 6473 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6481:1 - 1)
		IfNotBlocked
		reached[1][6473] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6481, 6476, 6481) */
		reached[1][6476] = 1;
		;
		/* merge: j = (j+1)(6481, 6477, 6481) */
		reached[1][6477] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6482, 6481) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3288: // STATE 6477 - mutant_243.pml:475 - [j = (j+1)] (0:6481:1 - 5)
		IfNotBlocked
		reached[1][6477] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6482, 6481) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3289: // STATE 6479 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6479] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3290: // STATE 6490 - mutant_243.pml:554 - [((4==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6490] = 1;
		if (!((4==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3291: // STATE 6491 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6491] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3292: // STATE 6492 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6492] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 3293: // STATE 6493 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6493] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3294: // STATE 6495 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6495] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3295: // STATE 6496 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6496] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3296: // STATE 6497 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6497] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3297: // STATE 6498 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6498] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3298: // STATE 6499 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (6519:0:1 - 1)
		IfNotBlocked
		reached[1][6499] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6519, 6500, 6519) */
		reached[1][6500] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6519, 6501, 6519) */
		reached[1][6501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3299: // STATE 6517 - mutant_243.pml:306 - [.(goto)] (0:6519:0 - 6)
		IfNotBlocked
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3300: // STATE 6502 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6519:0:1 - 1)
		IfNotBlocked
		reached[1][6502] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6519, 6503, 6519) */
		reached[1][6503] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6519, 6504, 6519) */
		reached[1][6504] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3301: // STATE 6505 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6519:0:1 - 1)
		IfNotBlocked
		reached[1][6505] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6519, 6506, 6519) */
		reached[1][6506] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6519, 6507, 6519) */
		reached[1][6507] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3302: // STATE 6508 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6519:0:1 - 1)
		IfNotBlocked
		reached[1][6508] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6519, 6509, 6519) */
		reached[1][6509] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6519, 6510, 6519) */
		reached[1][6510] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3303: // STATE 6511 - mutant_243.pml:300 - [((START==ABORT))] (6519:0:1 - 1)
		IfNotBlocked
		reached[1][6511] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6519, 6512, 6519) */
		reached[1][6512] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6519, 6513, 6519) */
		reached[1][6513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3304: // STATE 6515 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6519:0 - 1)
		IfNotBlocked
		reached[1][6515] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6519, 6517, 6519) */
		reached[1][6517] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3305: // STATE 6519 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6519] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3306: // STATE 6521 - mutant_243.pml:227 - [((_pid==0))] (6529:0:0 - 1)
		IfNotBlocked
		reached[1][6521] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6522, 6529) */
		reached[1][6522] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6528, 6529) */
		reached[1][6528] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3307: // STATE 6523 - mutant_243.pml:229 - [((_pid==1))] (6529:0:0 - 1)
		IfNotBlocked
		reached[1][6523] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6524, 6529) */
		reached[1][6524] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6528, 6529) */
		reached[1][6528] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3308: // STATE 6525 - mutant_243.pml:231 - [((_pid>1))] (6529:0:0 - 1)
		IfNotBlocked
		reached[1][6525] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6526, 6529) */
		reached[1][6526] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6528, 6529) */
		reached[1][6528] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3309: // STATE 6529 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6529] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3310: // STATE 6530 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6658:1 - 1)
		IfNotBlocked
		reached[1][6530] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6658, 6535, 6658) */
		reached[1][6535] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3311: // STATE 6533 - mutant_243.pml:312 - [(1)] (6658:0:1 - 1)
		IfNotBlocked
		reached[1][6533] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6658, 6535, 6658) */
		reached[1][6535] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3312: // STATE 6537 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6537] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3313: // STATE 6538 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6572:0:1 - 1)
		IfNotBlocked
		reached[1][6538] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6572, 6539, 6572) */
		reached[1][6539] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6572, 6540, 6572) */
		reached[1][6540] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3314: // STATE 6556 - mutant_243.pml:336 - [.(goto)] (0:6572:0 - 6)
		IfNotBlocked
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3315: // STATE 6541 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6572:0:1 - 1)
		IfNotBlocked
		reached[1][6541] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6572, 6542, 6572) */
		reached[1][6542] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6572, 6543, 6572) */
		reached[1][6543] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3316: // STATE 6544 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6572:0:1 - 1)
		IfNotBlocked
		reached[1][6544] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6572, 6545, 6572) */
		reached[1][6545] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6572, 6546, 6572) */
		reached[1][6546] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3317: // STATE 6547 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6572:0:1 - 1)
		IfNotBlocked
		reached[1][6547] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6572, 6548, 6572) */
		reached[1][6548] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6572, 6549, 6572) */
		reached[1][6549] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3318: // STATE 6550 - mutant_243.pml:330 - [((PAUSE==ABORT))] (6572:0:1 - 1)
		IfNotBlocked
		reached[1][6550] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6572, 6551, 6572) */
		reached[1][6551] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6572, 6552, 6572) */
		reached[1][6552] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3319: // STATE 6554 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6572:0 - 1)
		IfNotBlocked
		reached[1][6554] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6572, 6556, 6572) */
		reached[1][6556] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3320: // STATE 6559 - mutant_243.pml:239 - [((_pid==0))] (6567:0:0 - 1)
		IfNotBlocked
		reached[1][6559] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6560, 6567) */
		reached[1][6560] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6566, 6567) */
		reached[1][6566] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3321: // STATE 6561 - mutant_243.pml:241 - [((_pid==1))] (6567:0:0 - 1)
		IfNotBlocked
		reached[1][6561] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6562, 6567) */
		reached[1][6562] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6566, 6567) */
		reached[1][6566] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3322: // STATE 6563 - mutant_243.pml:243 - [((_pid>1))] (6567:0:0 - 1)
		IfNotBlocked
		reached[1][6563] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6564, 6567) */
		reached[1][6564] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6566, 6567) */
		reached[1][6566] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3323: // STATE 6567 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6567] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3324: // STATE 6568 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6658:1 - 1)
		IfNotBlocked
		reached[1][6568] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6658, 6573, 6658) */
		reached[1][6573] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3325: // STATE 6571 - mutant_243.pml:341 - [(1)] (6658:0:1 - 1)
		IfNotBlocked
		reached[1][6571] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6658, 6573, 6658) */
		reached[1][6573] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3326: // STATE 6575 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6575] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3327: // STATE 6576 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6610:0:1 - 1)
		IfNotBlocked
		reached[1][6576] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6610, 6577, 6610) */
		reached[1][6577] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6610, 6578, 6610) */
		reached[1][6578] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3328: // STATE 6594 - mutant_243.pml:365 - [.(goto)] (0:6610:0 - 6)
		IfNotBlocked
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3329: // STATE 6579 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6610:0:1 - 1)
		IfNotBlocked
		reached[1][6579] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6610, 6580, 6610) */
		reached[1][6580] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6610, 6581, 6610) */
		reached[1][6581] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3330: // STATE 6582 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6610:0:1 - 1)
		IfNotBlocked
		reached[1][6582] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6610, 6583, 6610) */
		reached[1][6583] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6610, 6584, 6610) */
		reached[1][6584] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3331: // STATE 6585 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6610:0:1 - 1)
		IfNotBlocked
		reached[1][6585] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6610, 6586, 6610) */
		reached[1][6586] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6610, 6587, 6610) */
		reached[1][6587] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3332: // STATE 6588 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6610:0:1 - 1)
		IfNotBlocked
		reached[1][6588] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6610, 6589, 6610) */
		reached[1][6589] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6610, 6590, 6610) */
		reached[1][6590] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3333: // STATE 6592 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6610:0 - 1)
		IfNotBlocked
		reached[1][6592] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6610, 6594, 6610) */
		reached[1][6594] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3334: // STATE 6597 - mutant_243.pml:251 - [((_pid==0))] (6605:0:0 - 1)
		IfNotBlocked
		reached[1][6597] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6598, 6605) */
		reached[1][6598] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6604, 6605) */
		reached[1][6604] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3335: // STATE 6599 - mutant_243.pml:253 - [((_pid==1))] (6605:0:0 - 1)
		IfNotBlocked
		reached[1][6599] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6600, 6605) */
		reached[1][6600] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6604, 6605) */
		reached[1][6604] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3336: // STATE 6601 - mutant_243.pml:255 - [((_pid>1))] (6605:0:0 - 1)
		IfNotBlocked
		reached[1][6601] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6602, 6605) */
		reached[1][6602] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6604, 6605) */
		reached[1][6604] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3337: // STATE 6605 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6605] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3338: // STATE 6606 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6658:1 - 1)
		IfNotBlocked
		reached[1][6606] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6658, 6611, 6658) */
		reached[1][6611] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3339: // STATE 6609 - mutant_243.pml:370 - [(1)] (6658:0:1 - 1)
		IfNotBlocked
		reached[1][6609] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6658, 6611, 6658) */
		reached[1][6611] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3340: // STATE 6613 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6613] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3341: // STATE 6614 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6648:0:1 - 1)
		IfNotBlocked
		reached[1][6614] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6648, 6615, 6648) */
		reached[1][6615] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6648, 6616, 6648) */
		reached[1][6616] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3342: // STATE 6632 - mutant_243.pml:394 - [.(goto)] (0:6648:0 - 6)
		IfNotBlocked
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3343: // STATE 6617 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6648:0:1 - 1)
		IfNotBlocked
		reached[1][6617] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6648, 6618, 6648) */
		reached[1][6618] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6648, 6619, 6648) */
		reached[1][6619] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3344: // STATE 6620 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6648:0:1 - 1)
		IfNotBlocked
		reached[1][6620] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6648, 6621, 6648) */
		reached[1][6621] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6648, 6622, 6648) */
		reached[1][6622] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3345: // STATE 6623 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6648:0:1 - 1)
		IfNotBlocked
		reached[1][6623] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6648, 6624, 6648) */
		reached[1][6624] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6648, 6625, 6648) */
		reached[1][6625] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3346: // STATE 6626 - mutant_243.pml:388 - [((STOP==ABORT))] (6648:0:1 - 1)
		IfNotBlocked
		reached[1][6626] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6648, 6627, 6648) */
		reached[1][6627] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6648, 6628, 6648) */
		reached[1][6628] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3347: // STATE 6630 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6648:0 - 1)
		IfNotBlocked
		reached[1][6630] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6648, 6632, 6648) */
		reached[1][6632] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3348: // STATE 6635 - mutant_243.pml:263 - [((_pid==0))] (6643:0:0 - 1)
		IfNotBlocked
		reached[1][6635] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6636, 6643) */
		reached[1][6636] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6642, 6643) */
		reached[1][6642] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3349: // STATE 6637 - mutant_243.pml:265 - [((_pid==1))] (6643:0:0 - 1)
		IfNotBlocked
		reached[1][6637] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6638, 6643) */
		reached[1][6638] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6642, 6643) */
		reached[1][6642] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3350: // STATE 6639 - mutant_243.pml:267 - [((_pid>1))] (6643:0:0 - 1)
		IfNotBlocked
		reached[1][6639] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6640, 6643) */
		reached[1][6640] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6642, 6643) */
		reached[1][6642] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3351: // STATE 6643 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6643] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3352: // STATE 6644 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6658:1 - 1)
		IfNotBlocked
		reached[1][6644] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6658, 6649, 6658) */
		reached[1][6649] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3353: // STATE 6647 - mutant_243.pml:399 - [(1)] (6658:0:1 - 1)
		IfNotBlocked
		reached[1][6647] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6658, 6649, 6658) */
		reached[1][6649] = 1;
		;
		/* merge: .(goto)(6658, 6652, 6658) */
		reached[1][6652] = 1;
		;
		/* merge: j = (j+1)(6658, 6654, 6658) */
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3354: // STATE 6654 - mutant_243.pml:435 - [j = (j+1)] (0:6658:1 - 13)
		IfNotBlocked
		reached[1][6654] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6659, 6658) */
		reached[1][6659] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3355: // STATE 6656 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3356: // STATE 6663 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6663] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3357: // STATE 6664 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6664] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3358: // STATE 6665 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6665] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3359: // STATE 6666 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (6686:0:1 - 1)
		IfNotBlocked
		reached[1][6666] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6686, 6667, 6686) */
		reached[1][6667] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6686, 6668, 6686) */
		reached[1][6668] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3360: // STATE 6684 - mutant_243.pml:306 - [.(goto)] (0:6686:0 - 6)
		IfNotBlocked
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3361: // STATE 6669 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6686:0:1 - 1)
		IfNotBlocked
		reached[1][6669] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6686, 6670, 6686) */
		reached[1][6670] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6686, 6671, 6686) */
		reached[1][6671] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3362: // STATE 6672 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6686:0:1 - 1)
		IfNotBlocked
		reached[1][6672] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6686, 6673, 6686) */
		reached[1][6673] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6686, 6674, 6686) */
		reached[1][6674] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3363: // STATE 6675 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6686:0:1 - 1)
		IfNotBlocked
		reached[1][6675] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6686, 6676, 6686) */
		reached[1][6676] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6686, 6677, 6686) */
		reached[1][6677] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3364: // STATE 6678 - mutant_243.pml:300 - [((START==ABORT))] (6686:0:1 - 1)
		IfNotBlocked
		reached[1][6678] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6686, 6679, 6686) */
		reached[1][6679] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6686, 6680, 6686) */
		reached[1][6680] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3365: // STATE 6682 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6686:0 - 1)
		IfNotBlocked
		reached[1][6682] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6686, 6684, 6686) */
		reached[1][6684] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3366: // STATE 6686 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6686] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3367: // STATE 6688 - mutant_243.pml:227 - [((_pid==0))] (6696:0:0 - 1)
		IfNotBlocked
		reached[1][6688] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6689, 6696) */
		reached[1][6689] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6695, 6696) */
		reached[1][6695] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3368: // STATE 6690 - mutant_243.pml:229 - [((_pid==1))] (6696:0:0 - 1)
		IfNotBlocked
		reached[1][6690] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6691, 6696) */
		reached[1][6691] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6695, 6696) */
		reached[1][6695] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3369: // STATE 6692 - mutant_243.pml:231 - [((_pid>1))] (6696:0:0 - 1)
		IfNotBlocked
		reached[1][6692] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6693, 6696) */
		reached[1][6693] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6695, 6696) */
		reached[1][6695] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3370: // STATE 6696 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6696] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3371: // STATE 6697 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6825:1 - 1)
		IfNotBlocked
		reached[1][6697] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6825, 6702, 6825) */
		reached[1][6702] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3372: // STATE 6700 - mutant_243.pml:312 - [(1)] (6825:0:1 - 1)
		IfNotBlocked
		reached[1][6700] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6825, 6702, 6825) */
		reached[1][6702] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3373: // STATE 6704 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6704] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3374: // STATE 6705 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6739:0:1 - 1)
		IfNotBlocked
		reached[1][6705] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6739, 6706, 6739) */
		reached[1][6706] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6739, 6707, 6739) */
		reached[1][6707] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3375: // STATE 6723 - mutant_243.pml:336 - [.(goto)] (0:6739:0 - 6)
		IfNotBlocked
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3376: // STATE 6708 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6739:0:1 - 1)
		IfNotBlocked
		reached[1][6708] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6739, 6709, 6739) */
		reached[1][6709] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6739, 6710, 6739) */
		reached[1][6710] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3377: // STATE 6711 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6739:0:1 - 1)
		IfNotBlocked
		reached[1][6711] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6739, 6712, 6739) */
		reached[1][6712] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6739, 6713, 6739) */
		reached[1][6713] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3378: // STATE 6714 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6739:0:1 - 1)
		IfNotBlocked
		reached[1][6714] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6739, 6715, 6739) */
		reached[1][6715] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6739, 6716, 6739) */
		reached[1][6716] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3379: // STATE 6717 - mutant_243.pml:330 - [((PAUSE==ABORT))] (6739:0:1 - 1)
		IfNotBlocked
		reached[1][6717] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6739, 6718, 6739) */
		reached[1][6718] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6739, 6719, 6739) */
		reached[1][6719] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3380: // STATE 6721 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6739:0 - 1)
		IfNotBlocked
		reached[1][6721] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6739, 6723, 6739) */
		reached[1][6723] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3381: // STATE 6726 - mutant_243.pml:239 - [((_pid==0))] (6734:0:0 - 1)
		IfNotBlocked
		reached[1][6726] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6727, 6734) */
		reached[1][6727] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6733, 6734) */
		reached[1][6733] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3382: // STATE 6728 - mutant_243.pml:241 - [((_pid==1))] (6734:0:0 - 1)
		IfNotBlocked
		reached[1][6728] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6729, 6734) */
		reached[1][6729] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6733, 6734) */
		reached[1][6733] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3383: // STATE 6730 - mutant_243.pml:243 - [((_pid>1))] (6734:0:0 - 1)
		IfNotBlocked
		reached[1][6730] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6731, 6734) */
		reached[1][6731] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6733, 6734) */
		reached[1][6733] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3384: // STATE 6734 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6734] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3385: // STATE 6735 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6825:1 - 1)
		IfNotBlocked
		reached[1][6735] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6825, 6740, 6825) */
		reached[1][6740] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3386: // STATE 6738 - mutant_243.pml:341 - [(1)] (6825:0:1 - 1)
		IfNotBlocked
		reached[1][6738] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6825, 6740, 6825) */
		reached[1][6740] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3387: // STATE 6742 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6742] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3388: // STATE 6743 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6777:0:1 - 1)
		IfNotBlocked
		reached[1][6743] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6777, 6744, 6777) */
		reached[1][6744] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6777, 6745, 6777) */
		reached[1][6745] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3389: // STATE 6761 - mutant_243.pml:365 - [.(goto)] (0:6777:0 - 6)
		IfNotBlocked
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3390: // STATE 6746 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6777:0:1 - 1)
		IfNotBlocked
		reached[1][6746] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6777, 6747, 6777) */
		reached[1][6747] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6777, 6748, 6777) */
		reached[1][6748] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3391: // STATE 6749 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6777:0:1 - 1)
		IfNotBlocked
		reached[1][6749] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6777, 6750, 6777) */
		reached[1][6750] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6777, 6751, 6777) */
		reached[1][6751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3392: // STATE 6752 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6777:0:1 - 1)
		IfNotBlocked
		reached[1][6752] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6777, 6753, 6777) */
		reached[1][6753] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6777, 6754, 6777) */
		reached[1][6754] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3393: // STATE 6755 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6777:0:1 - 1)
		IfNotBlocked
		reached[1][6755] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6777, 6756, 6777) */
		reached[1][6756] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6777, 6757, 6777) */
		reached[1][6757] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3394: // STATE 6759 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6777:0 - 1)
		IfNotBlocked
		reached[1][6759] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6777, 6761, 6777) */
		reached[1][6761] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3395: // STATE 6764 - mutant_243.pml:251 - [((_pid==0))] (6772:0:0 - 1)
		IfNotBlocked
		reached[1][6764] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6765, 6772) */
		reached[1][6765] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6771, 6772) */
		reached[1][6771] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3396: // STATE 6766 - mutant_243.pml:253 - [((_pid==1))] (6772:0:0 - 1)
		IfNotBlocked
		reached[1][6766] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6767, 6772) */
		reached[1][6767] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6771, 6772) */
		reached[1][6771] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3397: // STATE 6768 - mutant_243.pml:255 - [((_pid>1))] (6772:0:0 - 1)
		IfNotBlocked
		reached[1][6768] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6769, 6772) */
		reached[1][6769] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6771, 6772) */
		reached[1][6771] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3398: // STATE 6772 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6772] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3399: // STATE 6773 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6825:1 - 1)
		IfNotBlocked
		reached[1][6773] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6825, 6778, 6825) */
		reached[1][6778] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3400: // STATE 6776 - mutant_243.pml:370 - [(1)] (6825:0:1 - 1)
		IfNotBlocked
		reached[1][6776] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6825, 6778, 6825) */
		reached[1][6778] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3401: // STATE 6780 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6780] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3402: // STATE 6781 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6815:0:1 - 1)
		IfNotBlocked
		reached[1][6781] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6815, 6782, 6815) */
		reached[1][6782] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6815, 6783, 6815) */
		reached[1][6783] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3403: // STATE 6799 - mutant_243.pml:394 - [.(goto)] (0:6815:0 - 6)
		IfNotBlocked
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3404: // STATE 6784 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6815:0:1 - 1)
		IfNotBlocked
		reached[1][6784] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6815, 6785, 6815) */
		reached[1][6785] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6815, 6786, 6815) */
		reached[1][6786] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3405: // STATE 6787 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6815:0:1 - 1)
		IfNotBlocked
		reached[1][6787] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6815, 6788, 6815) */
		reached[1][6788] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6815, 6789, 6815) */
		reached[1][6789] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3406: // STATE 6790 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6815:0:1 - 1)
		IfNotBlocked
		reached[1][6790] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6815, 6791, 6815) */
		reached[1][6791] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6815, 6792, 6815) */
		reached[1][6792] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3407: // STATE 6793 - mutant_243.pml:388 - [((STOP==ABORT))] (6815:0:1 - 1)
		IfNotBlocked
		reached[1][6793] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6815, 6794, 6815) */
		reached[1][6794] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6815, 6795, 6815) */
		reached[1][6795] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3408: // STATE 6797 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6815:0 - 1)
		IfNotBlocked
		reached[1][6797] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6815, 6799, 6815) */
		reached[1][6799] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3409: // STATE 6802 - mutant_243.pml:263 - [((_pid==0))] (6810:0:0 - 1)
		IfNotBlocked
		reached[1][6802] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6803, 6810) */
		reached[1][6803] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6809, 6810) */
		reached[1][6809] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3410: // STATE 6804 - mutant_243.pml:265 - [((_pid==1))] (6810:0:0 - 1)
		IfNotBlocked
		reached[1][6804] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6805, 6810) */
		reached[1][6805] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6809, 6810) */
		reached[1][6809] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3411: // STATE 6806 - mutant_243.pml:267 - [((_pid>1))] (6810:0:0 - 1)
		IfNotBlocked
		reached[1][6806] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6807, 6810) */
		reached[1][6807] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6809, 6810) */
		reached[1][6809] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3412: // STATE 6810 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6810] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3413: // STATE 6811 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6825:1 - 1)
		IfNotBlocked
		reached[1][6811] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6825, 6816, 6825) */
		reached[1][6816] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3414: // STATE 6814 - mutant_243.pml:399 - [(1)] (6825:0:1 - 1)
		IfNotBlocked
		reached[1][6814] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6825, 6816, 6825) */
		reached[1][6816] = 1;
		;
		/* merge: .(goto)(6825, 6819, 6825) */
		reached[1][6819] = 1;
		;
		/* merge: j = (j-1)(6825, 6821, 6825) */
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3415: // STATE 6821 - mutant_243.pml:446 - [j = (j-1)] (0:6825:1 - 13)
		IfNotBlocked
		reached[1][6821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6826, 6825) */
		reached[1][6826] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3416: // STATE 6823 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6823] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3417: // STATE 6833 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6833] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 3418: // STATE 6834 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6834] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3419: // STATE 6835 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6835] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3420: // STATE 6836 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (6856:0:1 - 1)
		IfNotBlocked
		reached[1][6836] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6856, 6837, 6856) */
		reached[1][6837] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6856, 6838, 6856) */
		reached[1][6838] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3421: // STATE 6854 - mutant_243.pml:306 - [.(goto)] (0:6856:0 - 6)
		IfNotBlocked
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3422: // STATE 6839 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6856:0:1 - 1)
		IfNotBlocked
		reached[1][6839] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6856, 6840, 6856) */
		reached[1][6840] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6856, 6841, 6856) */
		reached[1][6841] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3423: // STATE 6842 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6856:0:1 - 1)
		IfNotBlocked
		reached[1][6842] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6856, 6843, 6856) */
		reached[1][6843] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6856, 6844, 6856) */
		reached[1][6844] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3424: // STATE 6845 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6856:0:1 - 1)
		IfNotBlocked
		reached[1][6845] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6856, 6846, 6856) */
		reached[1][6846] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6856, 6847, 6856) */
		reached[1][6847] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3425: // STATE 6848 - mutant_243.pml:300 - [((START==ABORT))] (6856:0:1 - 1)
		IfNotBlocked
		reached[1][6848] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6856, 6849, 6856) */
		reached[1][6849] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6856, 6850, 6856) */
		reached[1][6850] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3426: // STATE 6852 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6856:0 - 1)
		IfNotBlocked
		reached[1][6852] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6856, 6854, 6856) */
		reached[1][6854] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3427: // STATE 6856 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6856] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3428: // STATE 6858 - mutant_243.pml:227 - [((_pid==0))] (6866:0:0 - 1)
		IfNotBlocked
		reached[1][6858] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 6859, 6866) */
		reached[1][6859] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6865, 6866) */
		reached[1][6865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3429: // STATE 6860 - mutant_243.pml:229 - [((_pid==1))] (6866:0:0 - 1)
		IfNotBlocked
		reached[1][6860] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 6861, 6866) */
		reached[1][6861] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6865, 6866) */
		reached[1][6865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3430: // STATE 6862 - mutant_243.pml:231 - [((_pid>1))] (6866:0:0 - 1)
		IfNotBlocked
		reached[1][6862] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 6863, 6866) */
		reached[1][6863] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6865, 6866) */
		reached[1][6865] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3431: // STATE 6866 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6866] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3432: // STATE 6867 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:6995:1 - 1)
		IfNotBlocked
		reached[1][6867] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6995, 6872, 6995) */
		reached[1][6872] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3433: // STATE 6870 - mutant_243.pml:312 - [(1)] (6995:0:1 - 1)
		IfNotBlocked
		reached[1][6870] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6995, 6872, 6995) */
		reached[1][6872] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3434: // STATE 6874 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6874] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3435: // STATE 6875 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6909:0:1 - 1)
		IfNotBlocked
		reached[1][6875] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6909, 6876, 6909) */
		reached[1][6876] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6909, 6877, 6909) */
		reached[1][6877] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3436: // STATE 6893 - mutant_243.pml:336 - [.(goto)] (0:6909:0 - 6)
		IfNotBlocked
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3437: // STATE 6878 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6909:0:1 - 1)
		IfNotBlocked
		reached[1][6878] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6909, 6879, 6909) */
		reached[1][6879] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6909, 6880, 6909) */
		reached[1][6880] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3438: // STATE 6881 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6909:0:1 - 1)
		IfNotBlocked
		reached[1][6881] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6909, 6882, 6909) */
		reached[1][6882] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6909, 6883, 6909) */
		reached[1][6883] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3439: // STATE 6884 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6909:0:1 - 1)
		IfNotBlocked
		reached[1][6884] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6909, 6885, 6909) */
		reached[1][6885] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6909, 6886, 6909) */
		reached[1][6886] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3440: // STATE 6887 - mutant_243.pml:330 - [((PAUSE==ABORT))] (6909:0:1 - 1)
		IfNotBlocked
		reached[1][6887] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6909, 6888, 6909) */
		reached[1][6888] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6909, 6889, 6909) */
		reached[1][6889] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3441: // STATE 6891 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6909:0 - 1)
		IfNotBlocked
		reached[1][6891] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6909, 6893, 6909) */
		reached[1][6893] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3442: // STATE 6896 - mutant_243.pml:239 - [((_pid==0))] (6904:0:0 - 1)
		IfNotBlocked
		reached[1][6896] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6897, 6904) */
		reached[1][6897] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6903, 6904) */
		reached[1][6903] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3443: // STATE 6898 - mutant_243.pml:241 - [((_pid==1))] (6904:0:0 - 1)
		IfNotBlocked
		reached[1][6898] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 6899, 6904) */
		reached[1][6899] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6903, 6904) */
		reached[1][6903] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3444: // STATE 6900 - mutant_243.pml:243 - [((_pid>1))] (6904:0:0 - 1)
		IfNotBlocked
		reached[1][6900] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 6901, 6904) */
		reached[1][6901] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6903, 6904) */
		reached[1][6903] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3445: // STATE 6904 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6904] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3446: // STATE 6905 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:6995:1 - 1)
		IfNotBlocked
		reached[1][6905] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6995, 6910, 6995) */
		reached[1][6910] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3447: // STATE 6908 - mutant_243.pml:341 - [(1)] (6995:0:1 - 1)
		IfNotBlocked
		reached[1][6908] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6995, 6910, 6995) */
		reached[1][6910] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3448: // STATE 6912 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6912] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3449: // STATE 6913 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6947:0:1 - 1)
		IfNotBlocked
		reached[1][6913] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6947, 6914, 6947) */
		reached[1][6914] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6947, 6915, 6947) */
		reached[1][6915] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3450: // STATE 6931 - mutant_243.pml:365 - [.(goto)] (0:6947:0 - 6)
		IfNotBlocked
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3451: // STATE 6916 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6947:0:1 - 1)
		IfNotBlocked
		reached[1][6916] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6947, 6917, 6947) */
		reached[1][6917] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6947, 6918, 6947) */
		reached[1][6918] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3452: // STATE 6919 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6947:0:1 - 1)
		IfNotBlocked
		reached[1][6919] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6947, 6920, 6947) */
		reached[1][6920] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6947, 6921, 6947) */
		reached[1][6921] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3453: // STATE 6922 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6947:0:1 - 1)
		IfNotBlocked
		reached[1][6922] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6947, 6923, 6947) */
		reached[1][6923] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6947, 6924, 6947) */
		reached[1][6924] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3454: // STATE 6925 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (6947:0:1 - 1)
		IfNotBlocked
		reached[1][6925] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6947, 6926, 6947) */
		reached[1][6926] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6947, 6927, 6947) */
		reached[1][6927] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3455: // STATE 6929 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6947:0 - 1)
		IfNotBlocked
		reached[1][6929] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6947, 6931, 6947) */
		reached[1][6931] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3456: // STATE 6934 - mutant_243.pml:251 - [((_pid==0))] (6942:0:0 - 1)
		IfNotBlocked
		reached[1][6934] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6935, 6942) */
		reached[1][6935] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6941, 6942) */
		reached[1][6941] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3457: // STATE 6936 - mutant_243.pml:253 - [((_pid==1))] (6942:0:0 - 1)
		IfNotBlocked
		reached[1][6936] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 6937, 6942) */
		reached[1][6937] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6941, 6942) */
		reached[1][6941] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3458: // STATE 6938 - mutant_243.pml:255 - [((_pid>1))] (6942:0:0 - 1)
		IfNotBlocked
		reached[1][6938] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 6939, 6942) */
		reached[1][6939] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6941, 6942) */
		reached[1][6941] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3459: // STATE 6942 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6942] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3460: // STATE 6943 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:6995:1 - 1)
		IfNotBlocked
		reached[1][6943] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6995, 6948, 6995) */
		reached[1][6948] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3461: // STATE 6946 - mutant_243.pml:370 - [(1)] (6995:0:1 - 1)
		IfNotBlocked
		reached[1][6946] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6995, 6948, 6995) */
		reached[1][6948] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3462: // STATE 6950 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6950] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3463: // STATE 6951 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6985:0:1 - 1)
		IfNotBlocked
		reached[1][6951] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(6985, 6952, 6985) */
		reached[1][6952] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(6985, 6953, 6985) */
		reached[1][6953] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3464: // STATE 6969 - mutant_243.pml:394 - [.(goto)] (0:6985:0 - 6)
		IfNotBlocked
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3465: // STATE 6954 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6985:0:1 - 1)
		IfNotBlocked
		reached[1][6954] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6985, 6955, 6985) */
		reached[1][6955] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(6985, 6956, 6985) */
		reached[1][6956] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3466: // STATE 6957 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6985:0:1 - 1)
		IfNotBlocked
		reached[1][6957] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6985, 6958, 6985) */
		reached[1][6958] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6985, 6959, 6985) */
		reached[1][6959] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3467: // STATE 6960 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6985:0:1 - 1)
		IfNotBlocked
		reached[1][6960] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6985, 6961, 6985) */
		reached[1][6961] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(6985, 6962, 6985) */
		reached[1][6962] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3468: // STATE 6963 - mutant_243.pml:388 - [((STOP==ABORT))] (6985:0:1 - 1)
		IfNotBlocked
		reached[1][6963] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(6985, 6964, 6985) */
		reached[1][6964] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(6985, 6965, 6985) */
		reached[1][6965] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3469: // STATE 6967 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:6985:0 - 1)
		IfNotBlocked
		reached[1][6967] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(6985, 6969, 6985) */
		reached[1][6969] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3470: // STATE 6972 - mutant_243.pml:263 - [((_pid==0))] (6980:0:0 - 1)
		IfNotBlocked
		reached[1][6972] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 6973, 6980) */
		reached[1][6973] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6979, 6980) */
		reached[1][6979] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3471: // STATE 6974 - mutant_243.pml:265 - [((_pid==1))] (6980:0:0 - 1)
		IfNotBlocked
		reached[1][6974] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 6975, 6980) */
		reached[1][6975] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6979, 6980) */
		reached[1][6979] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3472: // STATE 6976 - mutant_243.pml:267 - [((_pid>1))] (6980:0:0 - 1)
		IfNotBlocked
		reached[1][6976] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 6977, 6980) */
		reached[1][6977] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 6979, 6980) */
		reached[1][6979] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3473: // STATE 6980 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][6980] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3474: // STATE 6981 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:6995:1 - 1)
		IfNotBlocked
		reached[1][6981] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(6995, 6986, 6995) */
		reached[1][6986] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3475: // STATE 6984 - mutant_243.pml:399 - [(1)] (6995:0:1 - 1)
		IfNotBlocked
		reached[1][6984] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6995, 6986, 6995) */
		reached[1][6986] = 1;
		;
		/* merge: .(goto)(6995, 6989, 6995) */
		reached[1][6989] = 1;
		;
		/* merge: j = (j+1)(6995, 6991, 6995) */
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3476: // STATE 6991 - mutant_243.pml:435 - [j = (j+1)] (0:6995:1 - 13)
		IfNotBlocked
		reached[1][6991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6996, 6995) */
		reached[1][6996] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3477: // STATE 6993 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6993] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3478: // STATE 6999 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6999] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3479: // STATE 7000 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7000] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3480: // STATE 7001 - mutant_243.pml:227 - [((_pid==0))] (7009:0:0 - 1)
		IfNotBlocked
		reached[1][7001] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7002, 7009) */
		reached[1][7002] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7008, 7009) */
		reached[1][7008] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3481: // STATE 7003 - mutant_243.pml:229 - [((_pid==1))] (7009:0:0 - 1)
		IfNotBlocked
		reached[1][7003] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7004, 7009) */
		reached[1][7004] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7008, 7009) */
		reached[1][7008] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3482: // STATE 7005 - mutant_243.pml:231 - [((_pid>1))] (7009:0:0 - 1)
		IfNotBlocked
		reached[1][7005] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7006, 7009) */
		reached[1][7006] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7008, 7009) */
		reached[1][7008] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3483: // STATE 7009 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7009] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3484: // STATE 7010 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7054:1 - 1)
		IfNotBlocked
		reached[1][7010] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7054, 7049, 7054) */
		reached[1][7049] = 1;
		;
		/* merge: j = (j+1)(7054, 7050, 7054) */
		reached[1][7050] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7055, 7054) */
		reached[1][7055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3485: // STATE 7012 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7012] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3486: // STATE 7013 - mutant_243.pml:251 - [((_pid==0))] (7021:0:0 - 1)
		IfNotBlocked
		reached[1][7013] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7014, 7021) */
		reached[1][7014] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7020, 7021) */
		reached[1][7020] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3487: // STATE 7015 - mutant_243.pml:253 - [((_pid==1))] (7021:0:0 - 1)
		IfNotBlocked
		reached[1][7015] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7016, 7021) */
		reached[1][7016] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7020, 7021) */
		reached[1][7020] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3488: // STATE 7017 - mutant_243.pml:255 - [((_pid>1))] (7021:0:0 - 1)
		IfNotBlocked
		reached[1][7017] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7018, 7021) */
		reached[1][7018] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7020, 7021) */
		reached[1][7020] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3489: // STATE 7021 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7021] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3490: // STATE 7022 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7054:1 - 1)
		IfNotBlocked
		reached[1][7022] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7054, 7049, 7054) */
		reached[1][7049] = 1;
		;
		/* merge: j = (j+1)(7054, 7050, 7054) */
		reached[1][7050] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7055, 7054) */
		reached[1][7055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3491: // STATE 7024 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7024] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3492: // STATE 7025 - mutant_243.pml:239 - [((_pid==0))] (7033:0:0 - 1)
		IfNotBlocked
		reached[1][7025] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7026, 7033) */
		reached[1][7026] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7032, 7033) */
		reached[1][7032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3493: // STATE 7027 - mutant_243.pml:241 - [((_pid==1))] (7033:0:0 - 1)
		IfNotBlocked
		reached[1][7027] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7028, 7033) */
		reached[1][7028] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7032, 7033) */
		reached[1][7032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3494: // STATE 7029 - mutant_243.pml:243 - [((_pid>1))] (7033:0:0 - 1)
		IfNotBlocked
		reached[1][7029] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7030, 7033) */
		reached[1][7030] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7032, 7033) */
		reached[1][7032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3495: // STATE 7033 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7033] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3496: // STATE 7034 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7054:1 - 1)
		IfNotBlocked
		reached[1][7034] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7054, 7049, 7054) */
		reached[1][7049] = 1;
		;
		/* merge: j = (j+1)(7054, 7050, 7054) */
		reached[1][7050] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7055, 7054) */
		reached[1][7055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3497: // STATE 7036 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7036] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3498: // STATE 7037 - mutant_243.pml:263 - [((_pid==0))] (7045:0:0 - 1)
		IfNotBlocked
		reached[1][7037] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7038, 7045) */
		reached[1][7038] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7044, 7045) */
		reached[1][7044] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3499: // STATE 7039 - mutant_243.pml:265 - [((_pid==1))] (7045:0:0 - 1)
		IfNotBlocked
		reached[1][7039] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7040, 7045) */
		reached[1][7040] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7044, 7045) */
		reached[1][7044] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3500: // STATE 7041 - mutant_243.pml:267 - [((_pid>1))] (7045:0:0 - 1)
		IfNotBlocked
		reached[1][7041] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7042, 7045) */
		reached[1][7042] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7044, 7045) */
		reached[1][7044] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3501: // STATE 7045 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7045] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3502: // STATE 7046 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7054:1 - 1)
		IfNotBlocked
		reached[1][7046] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7054, 7049, 7054) */
		reached[1][7049] = 1;
		;
		/* merge: j = (j+1)(7054, 7050, 7054) */
		reached[1][7050] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7055, 7054) */
		reached[1][7055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3503: // STATE 7050 - mutant_243.pml:475 - [j = (j+1)] (0:7054:1 - 5)
		IfNotBlocked
		reached[1][7050] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7055, 7054) */
		reached[1][7055] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3504: // STATE 7052 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7052] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3505: // STATE 7063 - mutant_243.pml:556 - [(((4==ABORTING)||(4==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7063] = 1;
		if (!(((4==10)||(4==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3506: // STATE 7064 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7064] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3507: // STATE 7065 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7065] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 3508: // STATE 7066 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7066] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3509: // STATE 7068 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7068] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3510: // STATE 7069 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7069] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3511: // STATE 7070 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7070] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3512: // STATE 7071 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7071] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3513: // STATE 7072 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (7092:0:1 - 1)
		IfNotBlocked
		reached[1][7072] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7092, 7073, 7092) */
		reached[1][7073] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7092, 7074, 7092) */
		reached[1][7074] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3514: // STATE 7090 - mutant_243.pml:306 - [.(goto)] (0:7092:0 - 6)
		IfNotBlocked
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3515: // STATE 7075 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7092:0:1 - 1)
		IfNotBlocked
		reached[1][7075] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7092, 7076, 7092) */
		reached[1][7076] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7092, 7077, 7092) */
		reached[1][7077] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3516: // STATE 7078 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7092:0:1 - 1)
		IfNotBlocked
		reached[1][7078] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7092, 7079, 7092) */
		reached[1][7079] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7092, 7080, 7092) */
		reached[1][7080] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3517: // STATE 7081 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7092:0:1 - 1)
		IfNotBlocked
		reached[1][7081] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7092, 7082, 7092) */
		reached[1][7082] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7092, 7083, 7092) */
		reached[1][7083] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3518: // STATE 7084 - mutant_243.pml:300 - [((START==ABORT))] (7092:0:1 - 1)
		IfNotBlocked
		reached[1][7084] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7092, 7085, 7092) */
		reached[1][7085] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7092, 7086, 7092) */
		reached[1][7086] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3519: // STATE 7088 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7092:0 - 1)
		IfNotBlocked
		reached[1][7088] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7092, 7090, 7092) */
		reached[1][7090] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3520: // STATE 7092 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7092] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3521: // STATE 7094 - mutant_243.pml:227 - [((_pid==0))] (7102:0:0 - 1)
		IfNotBlocked
		reached[1][7094] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7095, 7102) */
		reached[1][7095] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7101, 7102) */
		reached[1][7101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3522: // STATE 7096 - mutant_243.pml:229 - [((_pid==1))] (7102:0:0 - 1)
		IfNotBlocked
		reached[1][7096] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7097, 7102) */
		reached[1][7097] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7101, 7102) */
		reached[1][7101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3523: // STATE 7098 - mutant_243.pml:231 - [((_pid>1))] (7102:0:0 - 1)
		IfNotBlocked
		reached[1][7098] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7099, 7102) */
		reached[1][7099] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7101, 7102) */
		reached[1][7101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3524: // STATE 7102 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7102] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3525: // STATE 7103 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7231:1 - 1)
		IfNotBlocked
		reached[1][7103] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7231, 7108, 7231) */
		reached[1][7108] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3526: // STATE 7106 - mutant_243.pml:312 - [(1)] (7231:0:1 - 1)
		IfNotBlocked
		reached[1][7106] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7231, 7108, 7231) */
		reached[1][7108] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3527: // STATE 7110 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7110] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3528: // STATE 7111 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7145:0:1 - 1)
		IfNotBlocked
		reached[1][7111] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7145, 7112, 7145) */
		reached[1][7112] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7145, 7113, 7145) */
		reached[1][7113] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3529: // STATE 7129 - mutant_243.pml:336 - [.(goto)] (0:7145:0 - 6)
		IfNotBlocked
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3530: // STATE 7114 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7145:0:1 - 1)
		IfNotBlocked
		reached[1][7114] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7145, 7115, 7145) */
		reached[1][7115] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7145, 7116, 7145) */
		reached[1][7116] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3531: // STATE 7117 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7145:0:1 - 1)
		IfNotBlocked
		reached[1][7117] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7145, 7118, 7145) */
		reached[1][7118] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7145, 7119, 7145) */
		reached[1][7119] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3532: // STATE 7120 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7145:0:1 - 1)
		IfNotBlocked
		reached[1][7120] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7145, 7121, 7145) */
		reached[1][7121] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7145, 7122, 7145) */
		reached[1][7122] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3533: // STATE 7123 - mutant_243.pml:330 - [((PAUSE==ABORT))] (7145:0:1 - 1)
		IfNotBlocked
		reached[1][7123] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7145, 7124, 7145) */
		reached[1][7124] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7145, 7125, 7145) */
		reached[1][7125] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3534: // STATE 7127 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7145:0 - 1)
		IfNotBlocked
		reached[1][7127] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7145, 7129, 7145) */
		reached[1][7129] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3535: // STATE 7132 - mutant_243.pml:239 - [((_pid==0))] (7140:0:0 - 1)
		IfNotBlocked
		reached[1][7132] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7133, 7140) */
		reached[1][7133] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7139, 7140) */
		reached[1][7139] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3536: // STATE 7134 - mutant_243.pml:241 - [((_pid==1))] (7140:0:0 - 1)
		IfNotBlocked
		reached[1][7134] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7135, 7140) */
		reached[1][7135] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7139, 7140) */
		reached[1][7139] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3537: // STATE 7136 - mutant_243.pml:243 - [((_pid>1))] (7140:0:0 - 1)
		IfNotBlocked
		reached[1][7136] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7137, 7140) */
		reached[1][7137] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7139, 7140) */
		reached[1][7139] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3538: // STATE 7140 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7140] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3539: // STATE 7141 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7231:1 - 1)
		IfNotBlocked
		reached[1][7141] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7231, 7146, 7231) */
		reached[1][7146] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3540: // STATE 7144 - mutant_243.pml:341 - [(1)] (7231:0:1 - 1)
		IfNotBlocked
		reached[1][7144] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7231, 7146, 7231) */
		reached[1][7146] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3541: // STATE 7148 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7148] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3542: // STATE 7149 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7183:0:1 - 1)
		IfNotBlocked
		reached[1][7149] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7183, 7150, 7183) */
		reached[1][7150] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7183, 7151, 7183) */
		reached[1][7151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3543: // STATE 7167 - mutant_243.pml:365 - [.(goto)] (0:7183:0 - 6)
		IfNotBlocked
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3544: // STATE 7152 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7183:0:1 - 1)
		IfNotBlocked
		reached[1][7152] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7183, 7153, 7183) */
		reached[1][7153] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7183, 7154, 7183) */
		reached[1][7154] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3545: // STATE 7155 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7183:0:1 - 1)
		IfNotBlocked
		reached[1][7155] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7183, 7156, 7183) */
		reached[1][7156] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7183, 7157, 7183) */
		reached[1][7157] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3546: // STATE 7158 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7183:0:1 - 1)
		IfNotBlocked
		reached[1][7158] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7183, 7159, 7183) */
		reached[1][7159] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7183, 7160, 7183) */
		reached[1][7160] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3547: // STATE 7161 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (7183:0:1 - 1)
		IfNotBlocked
		reached[1][7161] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7183, 7162, 7183) */
		reached[1][7162] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7183, 7163, 7183) */
		reached[1][7163] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3548: // STATE 7165 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7183:0 - 1)
		IfNotBlocked
		reached[1][7165] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7183, 7167, 7183) */
		reached[1][7167] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3549: // STATE 7170 - mutant_243.pml:251 - [((_pid==0))] (7178:0:0 - 1)
		IfNotBlocked
		reached[1][7170] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7171, 7178) */
		reached[1][7171] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7177, 7178) */
		reached[1][7177] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3550: // STATE 7172 - mutant_243.pml:253 - [((_pid==1))] (7178:0:0 - 1)
		IfNotBlocked
		reached[1][7172] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7173, 7178) */
		reached[1][7173] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7177, 7178) */
		reached[1][7177] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3551: // STATE 7174 - mutant_243.pml:255 - [((_pid>1))] (7178:0:0 - 1)
		IfNotBlocked
		reached[1][7174] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7175, 7178) */
		reached[1][7175] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7177, 7178) */
		reached[1][7177] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3552: // STATE 7178 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7178] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3553: // STATE 7179 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7231:1 - 1)
		IfNotBlocked
		reached[1][7179] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7231, 7184, 7231) */
		reached[1][7184] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3554: // STATE 7182 - mutant_243.pml:370 - [(1)] (7231:0:1 - 1)
		IfNotBlocked
		reached[1][7182] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7231, 7184, 7231) */
		reached[1][7184] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3555: // STATE 7186 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7186] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3556: // STATE 7187 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7221:0:1 - 1)
		IfNotBlocked
		reached[1][7187] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7221, 7188, 7221) */
		reached[1][7188] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7221, 7189, 7221) */
		reached[1][7189] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3557: // STATE 7205 - mutant_243.pml:394 - [.(goto)] (0:7221:0 - 6)
		IfNotBlocked
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3558: // STATE 7190 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7221:0:1 - 1)
		IfNotBlocked
		reached[1][7190] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7221, 7191, 7221) */
		reached[1][7191] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7221, 7192, 7221) */
		reached[1][7192] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3559: // STATE 7193 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7221:0:1 - 1)
		IfNotBlocked
		reached[1][7193] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7221, 7194, 7221) */
		reached[1][7194] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7221, 7195, 7221) */
		reached[1][7195] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3560: // STATE 7196 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7221:0:1 - 1)
		IfNotBlocked
		reached[1][7196] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7221, 7197, 7221) */
		reached[1][7197] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7221, 7198, 7221) */
		reached[1][7198] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3561: // STATE 7199 - mutant_243.pml:388 - [((STOP==ABORT))] (7221:0:1 - 1)
		IfNotBlocked
		reached[1][7199] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7221, 7200, 7221) */
		reached[1][7200] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7221, 7201, 7221) */
		reached[1][7201] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3562: // STATE 7203 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7221:0 - 1)
		IfNotBlocked
		reached[1][7203] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7221, 7205, 7221) */
		reached[1][7205] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3563: // STATE 7208 - mutant_243.pml:263 - [((_pid==0))] (7216:0:0 - 1)
		IfNotBlocked
		reached[1][7208] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7209, 7216) */
		reached[1][7209] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7215, 7216) */
		reached[1][7215] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3564: // STATE 7210 - mutant_243.pml:265 - [((_pid==1))] (7216:0:0 - 1)
		IfNotBlocked
		reached[1][7210] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7211, 7216) */
		reached[1][7211] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7215, 7216) */
		reached[1][7215] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3565: // STATE 7212 - mutant_243.pml:267 - [((_pid>1))] (7216:0:0 - 1)
		IfNotBlocked
		reached[1][7212] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7213, 7216) */
		reached[1][7213] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7215, 7216) */
		reached[1][7215] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3566: // STATE 7216 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7216] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3567: // STATE 7217 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7231:1 - 1)
		IfNotBlocked
		reached[1][7217] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7231, 7222, 7231) */
		reached[1][7222] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3568: // STATE 7220 - mutant_243.pml:399 - [(1)] (7231:0:1 - 1)
		IfNotBlocked
		reached[1][7220] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7231, 7222, 7231) */
		reached[1][7222] = 1;
		;
		/* merge: .(goto)(7231, 7225, 7231) */
		reached[1][7225] = 1;
		;
		/* merge: j = (j+1)(7231, 7227, 7231) */
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3569: // STATE 7227 - mutant_243.pml:435 - [j = (j+1)] (0:7231:1 - 13)
		IfNotBlocked
		reached[1][7227] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7232, 7231) */
		reached[1][7232] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3570: // STATE 7229 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3571: // STATE 7236 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7236] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3572: // STATE 7237 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7237] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3573: // STATE 7238 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7238] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3574: // STATE 7239 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (7259:0:1 - 1)
		IfNotBlocked
		reached[1][7239] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7259, 7240, 7259) */
		reached[1][7240] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7259, 7241, 7259) */
		reached[1][7241] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3575: // STATE 7257 - mutant_243.pml:306 - [.(goto)] (0:7259:0 - 6)
		IfNotBlocked
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3576: // STATE 7242 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7259:0:1 - 1)
		IfNotBlocked
		reached[1][7242] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7259, 7243, 7259) */
		reached[1][7243] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7259, 7244, 7259) */
		reached[1][7244] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3577: // STATE 7245 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7259:0:1 - 1)
		IfNotBlocked
		reached[1][7245] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7259, 7246, 7259) */
		reached[1][7246] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7259, 7247, 7259) */
		reached[1][7247] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3578: // STATE 7248 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7259:0:1 - 1)
		IfNotBlocked
		reached[1][7248] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7259, 7249, 7259) */
		reached[1][7249] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7259, 7250, 7259) */
		reached[1][7250] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3579: // STATE 7251 - mutant_243.pml:300 - [((START==ABORT))] (7259:0:1 - 1)
		IfNotBlocked
		reached[1][7251] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7259, 7252, 7259) */
		reached[1][7252] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7259, 7253, 7259) */
		reached[1][7253] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3580: // STATE 7255 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7259:0 - 1)
		IfNotBlocked
		reached[1][7255] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7259, 7257, 7259) */
		reached[1][7257] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3581: // STATE 7259 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7259] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3582: // STATE 7261 - mutant_243.pml:227 - [((_pid==0))] (7269:0:0 - 1)
		IfNotBlocked
		reached[1][7261] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7262, 7269) */
		reached[1][7262] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7268, 7269) */
		reached[1][7268] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3583: // STATE 7263 - mutant_243.pml:229 - [((_pid==1))] (7269:0:0 - 1)
		IfNotBlocked
		reached[1][7263] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7264, 7269) */
		reached[1][7264] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7268, 7269) */
		reached[1][7268] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3584: // STATE 7265 - mutant_243.pml:231 - [((_pid>1))] (7269:0:0 - 1)
		IfNotBlocked
		reached[1][7265] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7266, 7269) */
		reached[1][7266] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7268, 7269) */
		reached[1][7268] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3585: // STATE 7269 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7269] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3586: // STATE 7270 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7398:1 - 1)
		IfNotBlocked
		reached[1][7270] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7398, 7275, 7398) */
		reached[1][7275] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3587: // STATE 7273 - mutant_243.pml:312 - [(1)] (7398:0:1 - 1)
		IfNotBlocked
		reached[1][7273] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7398, 7275, 7398) */
		reached[1][7275] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3588: // STATE 7277 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7277] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3589: // STATE 7278 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7312:0:1 - 1)
		IfNotBlocked
		reached[1][7278] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7312, 7279, 7312) */
		reached[1][7279] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7312, 7280, 7312) */
		reached[1][7280] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3590: // STATE 7296 - mutant_243.pml:336 - [.(goto)] (0:7312:0 - 6)
		IfNotBlocked
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3591: // STATE 7281 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7312:0:1 - 1)
		IfNotBlocked
		reached[1][7281] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7312, 7282, 7312) */
		reached[1][7282] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7312, 7283, 7312) */
		reached[1][7283] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3592: // STATE 7284 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7312:0:1 - 1)
		IfNotBlocked
		reached[1][7284] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7312, 7285, 7312) */
		reached[1][7285] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7312, 7286, 7312) */
		reached[1][7286] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3593: // STATE 7287 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7312:0:1 - 1)
		IfNotBlocked
		reached[1][7287] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7312, 7288, 7312) */
		reached[1][7288] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7312, 7289, 7312) */
		reached[1][7289] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3594: // STATE 7290 - mutant_243.pml:330 - [((PAUSE==ABORT))] (7312:0:1 - 1)
		IfNotBlocked
		reached[1][7290] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7312, 7291, 7312) */
		reached[1][7291] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7312, 7292, 7312) */
		reached[1][7292] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3595: // STATE 7294 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7312:0 - 1)
		IfNotBlocked
		reached[1][7294] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7312, 7296, 7312) */
		reached[1][7296] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3596: // STATE 7299 - mutant_243.pml:239 - [((_pid==0))] (7307:0:0 - 1)
		IfNotBlocked
		reached[1][7299] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7300, 7307) */
		reached[1][7300] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7306, 7307) */
		reached[1][7306] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3597: // STATE 7301 - mutant_243.pml:241 - [((_pid==1))] (7307:0:0 - 1)
		IfNotBlocked
		reached[1][7301] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7302, 7307) */
		reached[1][7302] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7306, 7307) */
		reached[1][7306] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3598: // STATE 7303 - mutant_243.pml:243 - [((_pid>1))] (7307:0:0 - 1)
		IfNotBlocked
		reached[1][7303] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7304, 7307) */
		reached[1][7304] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7306, 7307) */
		reached[1][7306] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3599: // STATE 7307 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7307] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3600: // STATE 7308 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7398:1 - 1)
		IfNotBlocked
		reached[1][7308] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7398, 7313, 7398) */
		reached[1][7313] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3601: // STATE 7311 - mutant_243.pml:341 - [(1)] (7398:0:1 - 1)
		IfNotBlocked
		reached[1][7311] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7398, 7313, 7398) */
		reached[1][7313] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3602: // STATE 7315 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7315] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3603: // STATE 7316 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7350:0:1 - 1)
		IfNotBlocked
		reached[1][7316] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7350, 7317, 7350) */
		reached[1][7317] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7350, 7318, 7350) */
		reached[1][7318] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3604: // STATE 7334 - mutant_243.pml:365 - [.(goto)] (0:7350:0 - 6)
		IfNotBlocked
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3605: // STATE 7319 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7350:0:1 - 1)
		IfNotBlocked
		reached[1][7319] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7350, 7320, 7350) */
		reached[1][7320] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7350, 7321, 7350) */
		reached[1][7321] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3606: // STATE 7322 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7350:0:1 - 1)
		IfNotBlocked
		reached[1][7322] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7350, 7323, 7350) */
		reached[1][7323] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7350, 7324, 7350) */
		reached[1][7324] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3607: // STATE 7325 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7350:0:1 - 1)
		IfNotBlocked
		reached[1][7325] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7350, 7326, 7350) */
		reached[1][7326] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7350, 7327, 7350) */
		reached[1][7327] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3608: // STATE 7328 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (7350:0:1 - 1)
		IfNotBlocked
		reached[1][7328] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7350, 7329, 7350) */
		reached[1][7329] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7350, 7330, 7350) */
		reached[1][7330] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3609: // STATE 7332 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7350:0 - 1)
		IfNotBlocked
		reached[1][7332] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7350, 7334, 7350) */
		reached[1][7334] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3610: // STATE 7337 - mutant_243.pml:251 - [((_pid==0))] (7345:0:0 - 1)
		IfNotBlocked
		reached[1][7337] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7338, 7345) */
		reached[1][7338] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7344, 7345) */
		reached[1][7344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3611: // STATE 7339 - mutant_243.pml:253 - [((_pid==1))] (7345:0:0 - 1)
		IfNotBlocked
		reached[1][7339] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7340, 7345) */
		reached[1][7340] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7344, 7345) */
		reached[1][7344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3612: // STATE 7341 - mutant_243.pml:255 - [((_pid>1))] (7345:0:0 - 1)
		IfNotBlocked
		reached[1][7341] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7342, 7345) */
		reached[1][7342] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7344, 7345) */
		reached[1][7344] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3613: // STATE 7345 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7345] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3614: // STATE 7346 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7398:1 - 1)
		IfNotBlocked
		reached[1][7346] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7398, 7351, 7398) */
		reached[1][7351] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3615: // STATE 7349 - mutant_243.pml:370 - [(1)] (7398:0:1 - 1)
		IfNotBlocked
		reached[1][7349] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7398, 7351, 7398) */
		reached[1][7351] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3616: // STATE 7353 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7353] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3617: // STATE 7354 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7354] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7388, 7355, 7388) */
		reached[1][7355] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7388, 7356, 7388) */
		reached[1][7356] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3618: // STATE 7372 - mutant_243.pml:394 - [.(goto)] (0:7388:0 - 6)
		IfNotBlocked
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3619: // STATE 7357 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7357] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7388, 7358, 7388) */
		reached[1][7358] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7388, 7359, 7388) */
		reached[1][7359] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3620: // STATE 7360 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7360] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7388, 7361, 7388) */
		reached[1][7361] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7388, 7362, 7388) */
		reached[1][7362] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3621: // STATE 7363 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7363] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7388, 7364, 7388) */
		reached[1][7364] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7388, 7365, 7388) */
		reached[1][7365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3622: // STATE 7366 - mutant_243.pml:388 - [((STOP==ABORT))] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7366] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7388, 7367, 7388) */
		reached[1][7367] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7388, 7368, 7388) */
		reached[1][7368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3623: // STATE 7370 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7388:0 - 1)
		IfNotBlocked
		reached[1][7370] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7388, 7372, 7388) */
		reached[1][7372] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3624: // STATE 7375 - mutant_243.pml:263 - [((_pid==0))] (7383:0:0 - 1)
		IfNotBlocked
		reached[1][7375] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7376, 7383) */
		reached[1][7376] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7382, 7383) */
		reached[1][7382] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3625: // STATE 7377 - mutant_243.pml:265 - [((_pid==1))] (7383:0:0 - 1)
		IfNotBlocked
		reached[1][7377] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7378, 7383) */
		reached[1][7378] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7382, 7383) */
		reached[1][7382] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3626: // STATE 7379 - mutant_243.pml:267 - [((_pid>1))] (7383:0:0 - 1)
		IfNotBlocked
		reached[1][7379] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7380, 7383) */
		reached[1][7380] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7382, 7383) */
		reached[1][7382] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3627: // STATE 7383 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7383] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3628: // STATE 7384 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7398:1 - 1)
		IfNotBlocked
		reached[1][7384] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7398, 7389, 7398) */
		reached[1][7389] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3629: // STATE 7387 - mutant_243.pml:399 - [(1)] (7398:0:1 - 1)
		IfNotBlocked
		reached[1][7387] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7398, 7389, 7398) */
		reached[1][7389] = 1;
		;
		/* merge: .(goto)(7398, 7392, 7398) */
		reached[1][7392] = 1;
		;
		/* merge: j = (j-1)(7398, 7394, 7398) */
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3630: // STATE 7394 - mutant_243.pml:446 - [j = (j-1)] (0:7398:1 - 13)
		IfNotBlocked
		reached[1][7394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7399, 7398) */
		reached[1][7399] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3631: // STATE 7396 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3632: // STATE 7406 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7406] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 3633: // STATE 7407 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7407] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3634: // STATE 7408 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7408] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3635: // STATE 7409 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (7429:0:1 - 1)
		IfNotBlocked
		reached[1][7409] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7429, 7410, 7429) */
		reached[1][7410] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7429, 7411, 7429) */
		reached[1][7411] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3636: // STATE 7427 - mutant_243.pml:306 - [.(goto)] (0:7429:0 - 6)
		IfNotBlocked
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3637: // STATE 7412 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7429:0:1 - 1)
		IfNotBlocked
		reached[1][7412] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7429, 7413, 7429) */
		reached[1][7413] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7429, 7414, 7429) */
		reached[1][7414] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3638: // STATE 7415 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7429:0:1 - 1)
		IfNotBlocked
		reached[1][7415] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7429, 7416, 7429) */
		reached[1][7416] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7429, 7417, 7429) */
		reached[1][7417] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3639: // STATE 7418 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7429:0:1 - 1)
		IfNotBlocked
		reached[1][7418] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7429, 7419, 7429) */
		reached[1][7419] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7429, 7420, 7429) */
		reached[1][7420] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3640: // STATE 7421 - mutant_243.pml:300 - [((START==ABORT))] (7429:0:1 - 1)
		IfNotBlocked
		reached[1][7421] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7429, 7422, 7429) */
		reached[1][7422] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7429, 7423, 7429) */
		reached[1][7423] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3641: // STATE 7425 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7429:0 - 1)
		IfNotBlocked
		reached[1][7425] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7429, 7427, 7429) */
		reached[1][7427] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3642: // STATE 7429 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7429] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3643: // STATE 7431 - mutant_243.pml:227 - [((_pid==0))] (7439:0:0 - 1)
		IfNotBlocked
		reached[1][7431] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7432, 7439) */
		reached[1][7432] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7438, 7439) */
		reached[1][7438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3644: // STATE 7433 - mutant_243.pml:229 - [((_pid==1))] (7439:0:0 - 1)
		IfNotBlocked
		reached[1][7433] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7434, 7439) */
		reached[1][7434] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7438, 7439) */
		reached[1][7438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3645: // STATE 7435 - mutant_243.pml:231 - [((_pid>1))] (7439:0:0 - 1)
		IfNotBlocked
		reached[1][7435] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7436, 7439) */
		reached[1][7436] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7438, 7439) */
		reached[1][7438] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3646: // STATE 7439 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7439] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3647: // STATE 7440 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7568:1 - 1)
		IfNotBlocked
		reached[1][7440] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7568, 7445, 7568) */
		reached[1][7445] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3648: // STATE 7443 - mutant_243.pml:312 - [(1)] (7568:0:1 - 1)
		IfNotBlocked
		reached[1][7443] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7568, 7445, 7568) */
		reached[1][7445] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3649: // STATE 7447 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7447] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3650: // STATE 7448 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7482:0:1 - 1)
		IfNotBlocked
		reached[1][7448] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7482, 7449, 7482) */
		reached[1][7449] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7482, 7450, 7482) */
		reached[1][7450] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3651: // STATE 7466 - mutant_243.pml:336 - [.(goto)] (0:7482:0 - 6)
		IfNotBlocked
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3652: // STATE 7451 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7482:0:1 - 1)
		IfNotBlocked
		reached[1][7451] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7482, 7452, 7482) */
		reached[1][7452] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7482, 7453, 7482) */
		reached[1][7453] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3653: // STATE 7454 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7482:0:1 - 1)
		IfNotBlocked
		reached[1][7454] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7482, 7455, 7482) */
		reached[1][7455] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7482, 7456, 7482) */
		reached[1][7456] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3654: // STATE 7457 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7482:0:1 - 1)
		IfNotBlocked
		reached[1][7457] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7482, 7458, 7482) */
		reached[1][7458] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7482, 7459, 7482) */
		reached[1][7459] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3655: // STATE 7460 - mutant_243.pml:330 - [((PAUSE==ABORT))] (7482:0:1 - 1)
		IfNotBlocked
		reached[1][7460] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7482, 7461, 7482) */
		reached[1][7461] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7482, 7462, 7482) */
		reached[1][7462] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3656: // STATE 7464 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7482:0 - 1)
		IfNotBlocked
		reached[1][7464] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7482, 7466, 7482) */
		reached[1][7466] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3657: // STATE 7469 - mutant_243.pml:239 - [((_pid==0))] (7477:0:0 - 1)
		IfNotBlocked
		reached[1][7469] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7470, 7477) */
		reached[1][7470] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7476, 7477) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3658: // STATE 7471 - mutant_243.pml:241 - [((_pid==1))] (7477:0:0 - 1)
		IfNotBlocked
		reached[1][7471] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7472, 7477) */
		reached[1][7472] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7476, 7477) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3659: // STATE 7473 - mutant_243.pml:243 - [((_pid>1))] (7477:0:0 - 1)
		IfNotBlocked
		reached[1][7473] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7474, 7477) */
		reached[1][7474] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7476, 7477) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3660: // STATE 7477 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7477] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3661: // STATE 7478 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7568:1 - 1)
		IfNotBlocked
		reached[1][7478] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7568, 7483, 7568) */
		reached[1][7483] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3662: // STATE 7481 - mutant_243.pml:341 - [(1)] (7568:0:1 - 1)
		IfNotBlocked
		reached[1][7481] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7568, 7483, 7568) */
		reached[1][7483] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3663: // STATE 7485 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7485] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3664: // STATE 7486 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7520:0:1 - 1)
		IfNotBlocked
		reached[1][7486] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7520, 7487, 7520) */
		reached[1][7487] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7520, 7488, 7520) */
		reached[1][7488] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3665: // STATE 7504 - mutant_243.pml:365 - [.(goto)] (0:7520:0 - 6)
		IfNotBlocked
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3666: // STATE 7489 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7520:0:1 - 1)
		IfNotBlocked
		reached[1][7489] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7520, 7490, 7520) */
		reached[1][7490] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7520, 7491, 7520) */
		reached[1][7491] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3667: // STATE 7492 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7520:0:1 - 1)
		IfNotBlocked
		reached[1][7492] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7520, 7493, 7520) */
		reached[1][7493] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7520, 7494, 7520) */
		reached[1][7494] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3668: // STATE 7495 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7520:0:1 - 1)
		IfNotBlocked
		reached[1][7495] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7520, 7496, 7520) */
		reached[1][7496] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7520, 7497, 7520) */
		reached[1][7497] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3669: // STATE 7498 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (7520:0:1 - 1)
		IfNotBlocked
		reached[1][7498] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7520, 7499, 7520) */
		reached[1][7499] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7520, 7500, 7520) */
		reached[1][7500] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3670: // STATE 7502 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7520:0 - 1)
		IfNotBlocked
		reached[1][7502] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7520, 7504, 7520) */
		reached[1][7504] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3671: // STATE 7507 - mutant_243.pml:251 - [((_pid==0))] (7515:0:0 - 1)
		IfNotBlocked
		reached[1][7507] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7508, 7515) */
		reached[1][7508] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7514, 7515) */
		reached[1][7514] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3672: // STATE 7509 - mutant_243.pml:253 - [((_pid==1))] (7515:0:0 - 1)
		IfNotBlocked
		reached[1][7509] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7510, 7515) */
		reached[1][7510] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7514, 7515) */
		reached[1][7514] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3673: // STATE 7511 - mutant_243.pml:255 - [((_pid>1))] (7515:0:0 - 1)
		IfNotBlocked
		reached[1][7511] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7512, 7515) */
		reached[1][7512] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7514, 7515) */
		reached[1][7514] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3674: // STATE 7515 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7515] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3675: // STATE 7516 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7568:1 - 1)
		IfNotBlocked
		reached[1][7516] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7568, 7521, 7568) */
		reached[1][7521] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3676: // STATE 7519 - mutant_243.pml:370 - [(1)] (7568:0:1 - 1)
		IfNotBlocked
		reached[1][7519] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7568, 7521, 7568) */
		reached[1][7521] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3677: // STATE 7523 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7523] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3678: // STATE 7524 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7558:0:1 - 1)
		IfNotBlocked
		reached[1][7524] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7558, 7525, 7558) */
		reached[1][7525] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7558, 7526, 7558) */
		reached[1][7526] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3679: // STATE 7542 - mutant_243.pml:394 - [.(goto)] (0:7558:0 - 6)
		IfNotBlocked
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3680: // STATE 7527 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7558:0:1 - 1)
		IfNotBlocked
		reached[1][7527] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7558, 7528, 7558) */
		reached[1][7528] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7558, 7529, 7558) */
		reached[1][7529] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3681: // STATE 7530 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7558:0:1 - 1)
		IfNotBlocked
		reached[1][7530] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7558, 7531, 7558) */
		reached[1][7531] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7558, 7532, 7558) */
		reached[1][7532] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3682: // STATE 7533 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7558:0:1 - 1)
		IfNotBlocked
		reached[1][7533] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7558, 7534, 7558) */
		reached[1][7534] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7558, 7535, 7558) */
		reached[1][7535] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3683: // STATE 7536 - mutant_243.pml:388 - [((STOP==ABORT))] (7558:0:1 - 1)
		IfNotBlocked
		reached[1][7536] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7558, 7537, 7558) */
		reached[1][7537] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7558, 7538, 7558) */
		reached[1][7538] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3684: // STATE 7540 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7558:0 - 1)
		IfNotBlocked
		reached[1][7540] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7558, 7542, 7558) */
		reached[1][7542] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3685: // STATE 7545 - mutant_243.pml:263 - [((_pid==0))] (7553:0:0 - 1)
		IfNotBlocked
		reached[1][7545] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7546, 7553) */
		reached[1][7546] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7552, 7553) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3686: // STATE 7547 - mutant_243.pml:265 - [((_pid==1))] (7553:0:0 - 1)
		IfNotBlocked
		reached[1][7547] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7548, 7553) */
		reached[1][7548] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7552, 7553) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3687: // STATE 7549 - mutant_243.pml:267 - [((_pid>1))] (7553:0:0 - 1)
		IfNotBlocked
		reached[1][7549] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7550, 7553) */
		reached[1][7550] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7552, 7553) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3688: // STATE 7553 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7553] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3689: // STATE 7554 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7568:1 - 1)
		IfNotBlocked
		reached[1][7554] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7568, 7559, 7568) */
		reached[1][7559] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3690: // STATE 7557 - mutant_243.pml:399 - [(1)] (7568:0:1 - 1)
		IfNotBlocked
		reached[1][7557] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7568, 7559, 7568) */
		reached[1][7559] = 1;
		;
		/* merge: .(goto)(7568, 7562, 7568) */
		reached[1][7562] = 1;
		;
		/* merge: j = (j+1)(7568, 7564, 7568) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3691: // STATE 7564 - mutant_243.pml:435 - [j = (j+1)] (0:7568:1 - 13)
		IfNotBlocked
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7569, 7568) */
		reached[1][7569] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3692: // STATE 7566 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7566] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3693: // STATE 7572 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7572] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3694: // STATE 7573 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7573] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3695: // STATE 7574 - mutant_243.pml:227 - [((_pid==0))] (7582:0:0 - 1)
		IfNotBlocked
		reached[1][7574] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7575, 7582) */
		reached[1][7575] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7581, 7582) */
		reached[1][7581] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3696: // STATE 7576 - mutant_243.pml:229 - [((_pid==1))] (7582:0:0 - 1)
		IfNotBlocked
		reached[1][7576] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7577, 7582) */
		reached[1][7577] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7581, 7582) */
		reached[1][7581] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3697: // STATE 7578 - mutant_243.pml:231 - [((_pid>1))] (7582:0:0 - 1)
		IfNotBlocked
		reached[1][7578] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7579, 7582) */
		reached[1][7579] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7581, 7582) */
		reached[1][7581] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3698: // STATE 7582 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7582] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3699: // STATE 7583 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7627:1 - 1)
		IfNotBlocked
		reached[1][7583] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7627, 7622, 7627) */
		reached[1][7622] = 1;
		;
		/* merge: j = (j+1)(7627, 7623, 7627) */
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7628, 7627) */
		reached[1][7628] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3700: // STATE 7585 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7585] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3701: // STATE 7586 - mutant_243.pml:251 - [((_pid==0))] (7594:0:0 - 1)
		IfNotBlocked
		reached[1][7586] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7587, 7594) */
		reached[1][7587] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7593, 7594) */
		reached[1][7593] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3702: // STATE 7588 - mutant_243.pml:253 - [((_pid==1))] (7594:0:0 - 1)
		IfNotBlocked
		reached[1][7588] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7589, 7594) */
		reached[1][7589] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7593, 7594) */
		reached[1][7593] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3703: // STATE 7590 - mutant_243.pml:255 - [((_pid>1))] (7594:0:0 - 1)
		IfNotBlocked
		reached[1][7590] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7591, 7594) */
		reached[1][7591] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7593, 7594) */
		reached[1][7593] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3704: // STATE 7594 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7594] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3705: // STATE 7595 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7627:1 - 1)
		IfNotBlocked
		reached[1][7595] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7627, 7622, 7627) */
		reached[1][7622] = 1;
		;
		/* merge: j = (j+1)(7627, 7623, 7627) */
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7628, 7627) */
		reached[1][7628] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3706: // STATE 7597 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7597] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3707: // STATE 7598 - mutant_243.pml:239 - [((_pid==0))] (7606:0:0 - 1)
		IfNotBlocked
		reached[1][7598] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7599, 7606) */
		reached[1][7599] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7605, 7606) */
		reached[1][7605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3708: // STATE 7600 - mutant_243.pml:241 - [((_pid==1))] (7606:0:0 - 1)
		IfNotBlocked
		reached[1][7600] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7601, 7606) */
		reached[1][7601] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7605, 7606) */
		reached[1][7605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3709: // STATE 7602 - mutant_243.pml:243 - [((_pid>1))] (7606:0:0 - 1)
		IfNotBlocked
		reached[1][7602] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7603, 7606) */
		reached[1][7603] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7605, 7606) */
		reached[1][7605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3710: // STATE 7606 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7606] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3711: // STATE 7607 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7627:1 - 1)
		IfNotBlocked
		reached[1][7607] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7627, 7622, 7627) */
		reached[1][7622] = 1;
		;
		/* merge: j = (j+1)(7627, 7623, 7627) */
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7628, 7627) */
		reached[1][7628] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3712: // STATE 7609 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7609] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3713: // STATE 7610 - mutant_243.pml:263 - [((_pid==0))] (7618:0:0 - 1)
		IfNotBlocked
		reached[1][7610] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7611, 7618) */
		reached[1][7611] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7617, 7618) */
		reached[1][7617] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3714: // STATE 7612 - mutant_243.pml:265 - [((_pid==1))] (7618:0:0 - 1)
		IfNotBlocked
		reached[1][7612] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7613, 7618) */
		reached[1][7613] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7617, 7618) */
		reached[1][7617] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3715: // STATE 7614 - mutant_243.pml:267 - [((_pid>1))] (7618:0:0 - 1)
		IfNotBlocked
		reached[1][7614] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7615, 7618) */
		reached[1][7615] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7617, 7618) */
		reached[1][7617] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3716: // STATE 7618 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7618] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3717: // STATE 7619 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7627:1 - 1)
		IfNotBlocked
		reached[1][7619] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7627, 7622, 7627) */
		reached[1][7622] = 1;
		;
		/* merge: j = (j+1)(7627, 7623, 7627) */
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7628, 7627) */
		reached[1][7628] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3718: // STATE 7623 - mutant_243.pml:475 - [j = (j+1)] (0:7627:1 - 5)
		IfNotBlocked
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7628, 7627) */
		reached[1][7628] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3719: // STATE 7625 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7625] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3720: // STATE 7641 - mutant_243.pml:5 - [(((0==0)&&(8==0)))] (7652:0:0 - 1)
		IfNotBlocked
		reached[1][7641] = 1;
		if (!(((0==0)&&(8==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',3,4)(0, 7642, 7652) */
		reached[1][7642] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 3, 4);
		/* merge: .(goto)(0, 7650, 7652) */
		reached[1][7650] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3721: // STATE 7643 - mutant_243.pml:7 - [(((0==0)&&(8>0)))] (7652:0:0 - 1)
		IfNotBlocked
		reached[1][7643] = 1;
		if (!(((0==0)&&(8>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',3,8,4)(0, 7644, 7652) */
		reached[1][7644] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 3, 8, 4);
		/* merge: .(goto)(0, 7650, 7652) */
		reached[1][7650] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3722: // STATE 7645 - mutant_243.pml:9 - [(((0>0)&&(8==0)))] (7652:0:0 - 1)
		IfNotBlocked
		reached[1][7645] = 1;
		if (!(((0>0)&&(8==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,3,4)(0, 7646, 7652) */
		reached[1][7646] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 3, 4);
		/* merge: .(goto)(0, 7650, 7652) */
		reached[1][7650] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3723: // STATE 7647 - mutant_243.pml:11 - [(((0>0)&&(8>0)))] (7652:0:0 - 1)
		IfNotBlocked
		reached[1][7647] = 1;
		if (!(((0>0)&&(8>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,3,8,4)(0, 7648, 7652) */
		reached[1][7648] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 3, 8, 4);
		/* merge: .(goto)(0, 7650, 7652) */
		reached[1][7650] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3724: // STATE 7652 - mutant_243.pml:570 - [states[0] = 4] (0:0:1 - 5)
		IfNotBlocked
		reached[1][7652] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 4;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3725: // STATE 7660 - mutant_243.pml:654 - [(((commands[0]==STOP)||(commands[0]==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7660] = 1;
		if (!(((now.commands[0]==12)||(now.commands[0]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3726: // STATE 7665 - mutant_243.pml:658 - [((commands[0]==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7665] = 1;
		if (!((now.commands[0]==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3727: // STATE 7666 - mutant_243.pml:659 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7666] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==4)), "(((states[0]==2)||(states[0]==3))||(states[0]==4))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 3728: // STATE 7667 - mutant_243.pml:5 - [(((0==0)&&(12==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7667] = 1;
		if (!(((0==0)&&(12==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3729: // STATE 7668 - mutant_243.pml:6 - [printf('Supervisor: (%e, _) -> %e\\n',states[0],7)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7668] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", now.states[0], 7);
		_m = 3; goto P999; /* 0 */
	case 3730: // STATE 7669 - mutant_243.pml:7 - [(((0==0)&&(12>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7669] = 1;
		if (!(((0==0)&&(12>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3731: // STATE 7670 - mutant_243.pml:8 - [printf('Supervisor: (%e, %e) -> %e\\n',states[0],12,7)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7670] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", now.states[0], 12, 7);
		_m = 3; goto P999; /* 0 */
	case 3732: // STATE 7671 - mutant_243.pml:9 - [(((0>0)&&(12==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7671] = 1;
		if (!(((0>0)&&(12==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3733: // STATE 7672 - mutant_243.pml:10 - [printf('Worker %d: (%e, _) -> %e\\n',0,states[0],7)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7672] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, now.states[0], 7);
		_m = 3; goto P999; /* 0 */
	case 3734: // STATE 7673 - mutant_243.pml:11 - [(((0>0)&&(12>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7673] = 1;
		if (!(((0>0)&&(12>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3735: // STATE 7674 - mutant_243.pml:12 - [printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],12,7)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7674] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, now.states[0], 12, 7);
		_m = 3; goto P999; /* 0 */
	case 3736: // STATE 7678 - mutant_243.pml:564 - [states[0] = 7] (0:0:1 - 5)
		IfNotBlocked
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 7;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3737: // STATE 7679 - mutant_243.pml:552 - [((7==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7679] = 1;
		if (!((7==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3738: // STATE 7680 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7680] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3739: // STATE 7681 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7681] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 3740: // STATE 7682 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7682] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3741: // STATE 7684 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7684] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3742: // STATE 7685 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7685] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3743: // STATE 7686 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7686] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3744: // STATE 7687 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7687] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3745: // STATE 7688 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (7708:0:1 - 1)
		IfNotBlocked
		reached[1][7688] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7708, 7689, 7708) */
		reached[1][7689] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7708, 7690, 7708) */
		reached[1][7690] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3746: // STATE 7706 - mutant_243.pml:306 - [.(goto)] (0:7708:0 - 6)
		IfNotBlocked
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3747: // STATE 7691 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7708:0:1 - 1)
		IfNotBlocked
		reached[1][7691] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7708, 7692, 7708) */
		reached[1][7692] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7708, 7693, 7708) */
		reached[1][7693] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3748: // STATE 7694 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7708:0:1 - 1)
		IfNotBlocked
		reached[1][7694] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7708, 7695, 7708) */
		reached[1][7695] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7708, 7696, 7708) */
		reached[1][7696] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3749: // STATE 7697 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7708:0:1 - 1)
		IfNotBlocked
		reached[1][7697] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7708, 7698, 7708) */
		reached[1][7698] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7708, 7699, 7708) */
		reached[1][7699] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3750: // STATE 7700 - mutant_243.pml:300 - [((START==ABORT))] (7708:0:1 - 1)
		IfNotBlocked
		reached[1][7700] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7708, 7701, 7708) */
		reached[1][7701] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7708, 7702, 7708) */
		reached[1][7702] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3751: // STATE 7704 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7708:0 - 1)
		IfNotBlocked
		reached[1][7704] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7708, 7706, 7708) */
		reached[1][7706] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3752: // STATE 7708 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7708] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3753: // STATE 7710 - mutant_243.pml:227 - [((_pid==0))] (7718:0:0 - 1)
		IfNotBlocked
		reached[1][7710] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7711, 7718) */
		reached[1][7711] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7717, 7718) */
		reached[1][7717] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3754: // STATE 7712 - mutant_243.pml:229 - [((_pid==1))] (7718:0:0 - 1)
		IfNotBlocked
		reached[1][7712] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7713, 7718) */
		reached[1][7713] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7717, 7718) */
		reached[1][7717] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3755: // STATE 7714 - mutant_243.pml:231 - [((_pid>1))] (7718:0:0 - 1)
		IfNotBlocked
		reached[1][7714] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7715, 7718) */
		reached[1][7715] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7717, 7718) */
		reached[1][7717] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3756: // STATE 7718 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7718] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3757: // STATE 7719 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:7847:1 - 1)
		IfNotBlocked
		reached[1][7719] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7847, 7724, 7847) */
		reached[1][7724] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3758: // STATE 7722 - mutant_243.pml:312 - [(1)] (7847:0:1 - 1)
		IfNotBlocked
		reached[1][7722] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7847, 7724, 7847) */
		reached[1][7724] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3759: // STATE 7726 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7726] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3760: // STATE 7727 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7761:0:1 - 1)
		IfNotBlocked
		reached[1][7727] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7761, 7728, 7761) */
		reached[1][7728] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7761, 7729, 7761) */
		reached[1][7729] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3761: // STATE 7745 - mutant_243.pml:336 - [.(goto)] (0:7761:0 - 6)
		IfNotBlocked
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3762: // STATE 7730 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7761:0:1 - 1)
		IfNotBlocked
		reached[1][7730] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7761, 7731, 7761) */
		reached[1][7731] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7761, 7732, 7761) */
		reached[1][7732] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3763: // STATE 7733 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7761:0:1 - 1)
		IfNotBlocked
		reached[1][7733] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7761, 7734, 7761) */
		reached[1][7734] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7761, 7735, 7761) */
		reached[1][7735] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3764: // STATE 7736 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7761:0:1 - 1)
		IfNotBlocked
		reached[1][7736] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7761, 7737, 7761) */
		reached[1][7737] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7761, 7738, 7761) */
		reached[1][7738] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3765: // STATE 7739 - mutant_243.pml:330 - [((PAUSE==ABORT))] (7761:0:1 - 1)
		IfNotBlocked
		reached[1][7739] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7761, 7740, 7761) */
		reached[1][7740] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7761, 7741, 7761) */
		reached[1][7741] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3766: // STATE 7743 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7761:0 - 1)
		IfNotBlocked
		reached[1][7743] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7761, 7745, 7761) */
		reached[1][7745] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3767: // STATE 7748 - mutant_243.pml:239 - [((_pid==0))] (7756:0:0 - 1)
		IfNotBlocked
		reached[1][7748] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7749, 7756) */
		reached[1][7749] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7755, 7756) */
		reached[1][7755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3768: // STATE 7750 - mutant_243.pml:241 - [((_pid==1))] (7756:0:0 - 1)
		IfNotBlocked
		reached[1][7750] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7751, 7756) */
		reached[1][7751] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7755, 7756) */
		reached[1][7755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3769: // STATE 7752 - mutant_243.pml:243 - [((_pid>1))] (7756:0:0 - 1)
		IfNotBlocked
		reached[1][7752] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7753, 7756) */
		reached[1][7753] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7755, 7756) */
		reached[1][7755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3770: // STATE 7756 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7756] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3771: // STATE 7757 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:7847:1 - 1)
		IfNotBlocked
		reached[1][7757] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7847, 7762, 7847) */
		reached[1][7762] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3772: // STATE 7760 - mutant_243.pml:341 - [(1)] (7847:0:1 - 1)
		IfNotBlocked
		reached[1][7760] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7847, 7762, 7847) */
		reached[1][7762] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3773: // STATE 7764 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7764] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3774: // STATE 7765 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7799:0:1 - 1)
		IfNotBlocked
		reached[1][7765] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7799, 7766, 7799) */
		reached[1][7766] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7799, 7767, 7799) */
		reached[1][7767] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3775: // STATE 7783 - mutant_243.pml:365 - [.(goto)] (0:7799:0 - 6)
		IfNotBlocked
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3776: // STATE 7768 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7799:0:1 - 1)
		IfNotBlocked
		reached[1][7768] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7799, 7769, 7799) */
		reached[1][7769] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7799, 7770, 7799) */
		reached[1][7770] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3777: // STATE 7771 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7799:0:1 - 1)
		IfNotBlocked
		reached[1][7771] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7799, 7772, 7799) */
		reached[1][7772] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7799, 7773, 7799) */
		reached[1][7773] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3778: // STATE 7774 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7799:0:1 - 1)
		IfNotBlocked
		reached[1][7774] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7799, 7775, 7799) */
		reached[1][7775] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7799, 7776, 7799) */
		reached[1][7776] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3779: // STATE 7777 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (7799:0:1 - 1)
		IfNotBlocked
		reached[1][7777] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7799, 7778, 7799) */
		reached[1][7778] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7799, 7779, 7799) */
		reached[1][7779] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3780: // STATE 7781 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7799:0 - 1)
		IfNotBlocked
		reached[1][7781] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7799, 7783, 7799) */
		reached[1][7783] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3781: // STATE 7786 - mutant_243.pml:251 - [((_pid==0))] (7794:0:0 - 1)
		IfNotBlocked
		reached[1][7786] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7787, 7794) */
		reached[1][7787] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7793, 7794) */
		reached[1][7793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3782: // STATE 7788 - mutant_243.pml:253 - [((_pid==1))] (7794:0:0 - 1)
		IfNotBlocked
		reached[1][7788] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7789, 7794) */
		reached[1][7789] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7793, 7794) */
		reached[1][7793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3783: // STATE 7790 - mutant_243.pml:255 - [((_pid>1))] (7794:0:0 - 1)
		IfNotBlocked
		reached[1][7790] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7791, 7794) */
		reached[1][7791] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7793, 7794) */
		reached[1][7793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3784: // STATE 7794 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7794] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3785: // STATE 7795 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:7847:1 - 1)
		IfNotBlocked
		reached[1][7795] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7847, 7800, 7847) */
		reached[1][7800] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3786: // STATE 7798 - mutant_243.pml:370 - [(1)] (7847:0:1 - 1)
		IfNotBlocked
		reached[1][7798] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7847, 7800, 7847) */
		reached[1][7800] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3787: // STATE 7802 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7802] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3788: // STATE 7803 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7837:0:1 - 1)
		IfNotBlocked
		reached[1][7803] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7837, 7804, 7837) */
		reached[1][7804] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7837, 7805, 7837) */
		reached[1][7805] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3789: // STATE 7821 - mutant_243.pml:394 - [.(goto)] (0:7837:0 - 6)
		IfNotBlocked
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3790: // STATE 7806 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7837:0:1 - 1)
		IfNotBlocked
		reached[1][7806] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7837, 7807, 7837) */
		reached[1][7807] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7837, 7808, 7837) */
		reached[1][7808] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3791: // STATE 7809 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7837:0:1 - 1)
		IfNotBlocked
		reached[1][7809] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7837, 7810, 7837) */
		reached[1][7810] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7837, 7811, 7837) */
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3792: // STATE 7812 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7837:0:1 - 1)
		IfNotBlocked
		reached[1][7812] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7837, 7813, 7837) */
		reached[1][7813] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7837, 7814, 7837) */
		reached[1][7814] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3793: // STATE 7815 - mutant_243.pml:388 - [((STOP==ABORT))] (7837:0:1 - 1)
		IfNotBlocked
		reached[1][7815] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7837, 7816, 7837) */
		reached[1][7816] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7837, 7817, 7837) */
		reached[1][7817] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3794: // STATE 7819 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7837:0 - 1)
		IfNotBlocked
		reached[1][7819] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7837, 7821, 7837) */
		reached[1][7821] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3795: // STATE 7824 - mutant_243.pml:263 - [((_pid==0))] (7832:0:0 - 1)
		IfNotBlocked
		reached[1][7824] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7825, 7832) */
		reached[1][7825] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7831, 7832) */
		reached[1][7831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3796: // STATE 7826 - mutant_243.pml:265 - [((_pid==1))] (7832:0:0 - 1)
		IfNotBlocked
		reached[1][7826] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7827, 7832) */
		reached[1][7827] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7831, 7832) */
		reached[1][7831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3797: // STATE 7828 - mutant_243.pml:267 - [((_pid>1))] (7832:0:0 - 1)
		IfNotBlocked
		reached[1][7828] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7829, 7832) */
		reached[1][7829] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7831, 7832) */
		reached[1][7831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3798: // STATE 7832 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7832] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3799: // STATE 7833 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:7847:1 - 1)
		IfNotBlocked
		reached[1][7833] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(7847, 7838, 7847) */
		reached[1][7838] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3800: // STATE 7836 - mutant_243.pml:399 - [(1)] (7847:0:1 - 1)
		IfNotBlocked
		reached[1][7836] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7847, 7838, 7847) */
		reached[1][7838] = 1;
		;
		/* merge: .(goto)(7847, 7841, 7847) */
		reached[1][7841] = 1;
		;
		/* merge: j = (j+1)(7847, 7843, 7847) */
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3801: // STATE 7843 - mutant_243.pml:435 - [j = (j+1)] (0:7847:1 - 13)
		IfNotBlocked
		reached[1][7843] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7848, 7847) */
		reached[1][7848] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3802: // STATE 7845 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7845] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3803: // STATE 7852 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7852] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3804: // STATE 7853 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7853] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3805: // STATE 7854 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7854] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3806: // STATE 7855 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7855] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7875, 7856, 7875) */
		reached[1][7856] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7875, 7857, 7875) */
		reached[1][7857] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3807: // STATE 7873 - mutant_243.pml:306 - [.(goto)] (0:7875:0 - 6)
		IfNotBlocked
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3808: // STATE 7858 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7858] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7875, 7859, 7875) */
		reached[1][7859] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7875, 7860, 7875) */
		reached[1][7860] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3809: // STATE 7861 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7861] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7875, 7862, 7875) */
		reached[1][7862] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7875, 7863, 7875) */
		reached[1][7863] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3810: // STATE 7864 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7864] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7875, 7865, 7875) */
		reached[1][7865] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7875, 7866, 7875) */
		reached[1][7866] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3811: // STATE 7867 - mutant_243.pml:300 - [((START==ABORT))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7867] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7875, 7868, 7875) */
		reached[1][7868] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7875, 7869, 7875) */
		reached[1][7869] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3812: // STATE 7871 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7875:0 - 1)
		IfNotBlocked
		reached[1][7871] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3813: // STATE 7875 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7875] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3814: // STATE 7877 - mutant_243.pml:227 - [((_pid==0))] (7885:0:0 - 1)
		IfNotBlocked
		reached[1][7877] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 7878, 7885) */
		reached[1][7878] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7884, 7885) */
		reached[1][7884] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3815: // STATE 7879 - mutant_243.pml:229 - [((_pid==1))] (7885:0:0 - 1)
		IfNotBlocked
		reached[1][7879] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 7880, 7885) */
		reached[1][7880] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7884, 7885) */
		reached[1][7884] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3816: // STATE 7881 - mutant_243.pml:231 - [((_pid>1))] (7885:0:0 - 1)
		IfNotBlocked
		reached[1][7881] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 7882, 7885) */
		reached[1][7882] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7884, 7885) */
		reached[1][7884] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3817: // STATE 7885 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7885] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3818: // STATE 7886 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8014:1 - 1)
		IfNotBlocked
		reached[1][7886] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8014, 7891, 8014) */
		reached[1][7891] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3819: // STATE 7889 - mutant_243.pml:312 - [(1)] (8014:0:1 - 1)
		IfNotBlocked
		reached[1][7889] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8014, 7891, 8014) */
		reached[1][7891] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3820: // STATE 7893 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7893] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3821: // STATE 7894 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7928:0:1 - 1)
		IfNotBlocked
		reached[1][7894] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7928, 7895, 7928) */
		reached[1][7895] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7928, 7896, 7928) */
		reached[1][7896] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3822: // STATE 7912 - mutant_243.pml:336 - [.(goto)] (0:7928:0 - 6)
		IfNotBlocked
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3823: // STATE 7897 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7928:0:1 - 1)
		IfNotBlocked
		reached[1][7897] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7928, 7898, 7928) */
		reached[1][7898] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7928, 7899, 7928) */
		reached[1][7899] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3824: // STATE 7900 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7928:0:1 - 1)
		IfNotBlocked
		reached[1][7900] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7928, 7901, 7928) */
		reached[1][7901] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7928, 7902, 7928) */
		reached[1][7902] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3825: // STATE 7903 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7928:0:1 - 1)
		IfNotBlocked
		reached[1][7903] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7928, 7904, 7928) */
		reached[1][7904] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7928, 7905, 7928) */
		reached[1][7905] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3826: // STATE 7906 - mutant_243.pml:330 - [((PAUSE==ABORT))] (7928:0:1 - 1)
		IfNotBlocked
		reached[1][7906] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7928, 7907, 7928) */
		reached[1][7907] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7928, 7908, 7928) */
		reached[1][7908] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3827: // STATE 7910 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7928:0 - 1)
		IfNotBlocked
		reached[1][7910] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7928, 7912, 7928) */
		reached[1][7912] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3828: // STATE 7915 - mutant_243.pml:239 - [((_pid==0))] (7923:0:0 - 1)
		IfNotBlocked
		reached[1][7915] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7916, 7923) */
		reached[1][7916] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7922, 7923) */
		reached[1][7922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3829: // STATE 7917 - mutant_243.pml:241 - [((_pid==1))] (7923:0:0 - 1)
		IfNotBlocked
		reached[1][7917] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 7918, 7923) */
		reached[1][7918] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7922, 7923) */
		reached[1][7922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3830: // STATE 7919 - mutant_243.pml:243 - [((_pid>1))] (7923:0:0 - 1)
		IfNotBlocked
		reached[1][7919] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 7920, 7923) */
		reached[1][7920] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7922, 7923) */
		reached[1][7922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3831: // STATE 7923 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7923] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3832: // STATE 7924 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8014:1 - 1)
		IfNotBlocked
		reached[1][7924] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8014, 7929, 8014) */
		reached[1][7929] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3833: // STATE 7927 - mutant_243.pml:341 - [(1)] (8014:0:1 - 1)
		IfNotBlocked
		reached[1][7927] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8014, 7929, 8014) */
		reached[1][7929] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3834: // STATE 7931 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7931] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3835: // STATE 7932 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7966:0:1 - 1)
		IfNotBlocked
		reached[1][7932] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(7966, 7933, 7966) */
		reached[1][7933] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(7966, 7934, 7966) */
		reached[1][7934] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3836: // STATE 7950 - mutant_243.pml:365 - [.(goto)] (0:7966:0 - 6)
		IfNotBlocked
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3837: // STATE 7935 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7966:0:1 - 1)
		IfNotBlocked
		reached[1][7935] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7966, 7936, 7966) */
		reached[1][7936] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(7966, 7937, 7966) */
		reached[1][7937] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3838: // STATE 7938 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7966:0:1 - 1)
		IfNotBlocked
		reached[1][7938] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7966, 7939, 7966) */
		reached[1][7939] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7966, 7940, 7966) */
		reached[1][7940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3839: // STATE 7941 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7966:0:1 - 1)
		IfNotBlocked
		reached[1][7941] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7966, 7942, 7966) */
		reached[1][7942] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(7966, 7943, 7966) */
		reached[1][7943] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3840: // STATE 7944 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (7966:0:1 - 1)
		IfNotBlocked
		reached[1][7944] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(7966, 7945, 7966) */
		reached[1][7945] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(7966, 7946, 7966) */
		reached[1][7946] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3841: // STATE 7948 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:7966:0 - 1)
		IfNotBlocked
		reached[1][7948] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(7966, 7950, 7966) */
		reached[1][7950] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3842: // STATE 7953 - mutant_243.pml:251 - [((_pid==0))] (7961:0:0 - 1)
		IfNotBlocked
		reached[1][7953] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7954, 7961) */
		reached[1][7954] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7960, 7961) */
		reached[1][7960] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3843: // STATE 7955 - mutant_243.pml:253 - [((_pid==1))] (7961:0:0 - 1)
		IfNotBlocked
		reached[1][7955] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 7956, 7961) */
		reached[1][7956] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7960, 7961) */
		reached[1][7960] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3844: // STATE 7957 - mutant_243.pml:255 - [((_pid>1))] (7961:0:0 - 1)
		IfNotBlocked
		reached[1][7957] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 7958, 7961) */
		reached[1][7958] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7960, 7961) */
		reached[1][7960] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3845: // STATE 7961 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7961] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3846: // STATE 7962 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8014:1 - 1)
		IfNotBlocked
		reached[1][7962] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8014, 7967, 8014) */
		reached[1][7967] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3847: // STATE 7965 - mutant_243.pml:370 - [(1)] (8014:0:1 - 1)
		IfNotBlocked
		reached[1][7965] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8014, 7967, 8014) */
		reached[1][7967] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3848: // STATE 7969 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7969] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3849: // STATE 7970 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8004:0:1 - 1)
		IfNotBlocked
		reached[1][7970] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8004, 7971, 8004) */
		reached[1][7971] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8004, 7972, 8004) */
		reached[1][7972] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3850: // STATE 7988 - mutant_243.pml:394 - [.(goto)] (0:8004:0 - 6)
		IfNotBlocked
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3851: // STATE 7973 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8004:0:1 - 1)
		IfNotBlocked
		reached[1][7973] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8004, 7974, 8004) */
		reached[1][7974] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8004, 7975, 8004) */
		reached[1][7975] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3852: // STATE 7976 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8004:0:1 - 1)
		IfNotBlocked
		reached[1][7976] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8004, 7977, 8004) */
		reached[1][7977] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8004, 7978, 8004) */
		reached[1][7978] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3853: // STATE 7979 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8004:0:1 - 1)
		IfNotBlocked
		reached[1][7979] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8004, 7980, 8004) */
		reached[1][7980] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8004, 7981, 8004) */
		reached[1][7981] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3854: // STATE 7982 - mutant_243.pml:388 - [((STOP==ABORT))] (8004:0:1 - 1)
		IfNotBlocked
		reached[1][7982] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8004, 7983, 8004) */
		reached[1][7983] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8004, 7984, 8004) */
		reached[1][7984] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3855: // STATE 7986 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8004:0 - 1)
		IfNotBlocked
		reached[1][7986] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8004, 7988, 8004) */
		reached[1][7988] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3856: // STATE 7991 - mutant_243.pml:263 - [((_pid==0))] (7999:0:0 - 1)
		IfNotBlocked
		reached[1][7991] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 7992, 7999) */
		reached[1][7992] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7998, 7999) */
		reached[1][7998] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3857: // STATE 7993 - mutant_243.pml:265 - [((_pid==1))] (7999:0:0 - 1)
		IfNotBlocked
		reached[1][7993] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 7994, 7999) */
		reached[1][7994] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7998, 7999) */
		reached[1][7998] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3858: // STATE 7995 - mutant_243.pml:267 - [((_pid>1))] (7999:0:0 - 1)
		IfNotBlocked
		reached[1][7995] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 7996, 7999) */
		reached[1][7996] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 7998, 7999) */
		reached[1][7998] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3859: // STATE 7999 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][7999] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3860: // STATE 8000 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8014:1 - 1)
		IfNotBlocked
		reached[1][8000] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8014, 8005, 8014) */
		reached[1][8005] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3861: // STATE 8003 - mutant_243.pml:399 - [(1)] (8014:0:1 - 1)
		IfNotBlocked
		reached[1][8003] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8014, 8005, 8014) */
		reached[1][8005] = 1;
		;
		/* merge: .(goto)(8014, 8008, 8014) */
		reached[1][8008] = 1;
		;
		/* merge: j = (j-1)(8014, 8010, 8014) */
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3862: // STATE 8010 - mutant_243.pml:446 - [j = (j-1)] (0:8014:1 - 13)
		IfNotBlocked
		reached[1][8010] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8015, 8014) */
		reached[1][8015] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3863: // STATE 8012 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8012] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3864: // STATE 8022 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8022] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 3865: // STATE 8023 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8023] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3866: // STATE 8024 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8024] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3867: // STATE 8025 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (8045:0:1 - 1)
		IfNotBlocked
		reached[1][8025] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8045, 8026, 8045) */
		reached[1][8026] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8045, 8027, 8045) */
		reached[1][8027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3868: // STATE 8043 - mutant_243.pml:306 - [.(goto)] (0:8045:0 - 6)
		IfNotBlocked
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3869: // STATE 8028 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8045:0:1 - 1)
		IfNotBlocked
		reached[1][8028] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8045, 8029, 8045) */
		reached[1][8029] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8045, 8030, 8045) */
		reached[1][8030] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3870: // STATE 8031 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8045:0:1 - 1)
		IfNotBlocked
		reached[1][8031] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8045, 8032, 8045) */
		reached[1][8032] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8045, 8033, 8045) */
		reached[1][8033] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3871: // STATE 8034 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8045:0:1 - 1)
		IfNotBlocked
		reached[1][8034] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8045, 8035, 8045) */
		reached[1][8035] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8045, 8036, 8045) */
		reached[1][8036] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3872: // STATE 8037 - mutant_243.pml:300 - [((START==ABORT))] (8045:0:1 - 1)
		IfNotBlocked
		reached[1][8037] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8045, 8038, 8045) */
		reached[1][8038] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8045, 8039, 8045) */
		reached[1][8039] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3873: // STATE 8041 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8045:0 - 1)
		IfNotBlocked
		reached[1][8041] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8045, 8043, 8045) */
		reached[1][8043] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3874: // STATE 8045 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8045] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3875: // STATE 8047 - mutant_243.pml:227 - [((_pid==0))] (8055:0:0 - 1)
		IfNotBlocked
		reached[1][8047] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8048, 8055) */
		reached[1][8048] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8054, 8055) */
		reached[1][8054] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3876: // STATE 8049 - mutant_243.pml:229 - [((_pid==1))] (8055:0:0 - 1)
		IfNotBlocked
		reached[1][8049] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8050, 8055) */
		reached[1][8050] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8054, 8055) */
		reached[1][8054] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3877: // STATE 8051 - mutant_243.pml:231 - [((_pid>1))] (8055:0:0 - 1)
		IfNotBlocked
		reached[1][8051] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8052, 8055) */
		reached[1][8052] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8054, 8055) */
		reached[1][8054] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3878: // STATE 8055 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8055] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3879: // STATE 8056 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8184:1 - 1)
		IfNotBlocked
		reached[1][8056] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8184, 8061, 8184) */
		reached[1][8061] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3880: // STATE 8059 - mutant_243.pml:312 - [(1)] (8184:0:1 - 1)
		IfNotBlocked
		reached[1][8059] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8184, 8061, 8184) */
		reached[1][8061] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3881: // STATE 8063 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8063] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3882: // STATE 8064 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8098:0:1 - 1)
		IfNotBlocked
		reached[1][8064] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8098, 8065, 8098) */
		reached[1][8065] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8098, 8066, 8098) */
		reached[1][8066] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3883: // STATE 8082 - mutant_243.pml:336 - [.(goto)] (0:8098:0 - 6)
		IfNotBlocked
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3884: // STATE 8067 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8098:0:1 - 1)
		IfNotBlocked
		reached[1][8067] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8098, 8068, 8098) */
		reached[1][8068] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8098, 8069, 8098) */
		reached[1][8069] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3885: // STATE 8070 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8098:0:1 - 1)
		IfNotBlocked
		reached[1][8070] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8098, 8071, 8098) */
		reached[1][8071] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8098, 8072, 8098) */
		reached[1][8072] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3886: // STATE 8073 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8098:0:1 - 1)
		IfNotBlocked
		reached[1][8073] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8098, 8074, 8098) */
		reached[1][8074] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8098, 8075, 8098) */
		reached[1][8075] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3887: // STATE 8076 - mutant_243.pml:330 - [((PAUSE==ABORT))] (8098:0:1 - 1)
		IfNotBlocked
		reached[1][8076] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8098, 8077, 8098) */
		reached[1][8077] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8098, 8078, 8098) */
		reached[1][8078] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3888: // STATE 8080 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8098:0 - 1)
		IfNotBlocked
		reached[1][8080] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8098, 8082, 8098) */
		reached[1][8082] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3889: // STATE 8085 - mutant_243.pml:239 - [((_pid==0))] (8093:0:0 - 1)
		IfNotBlocked
		reached[1][8085] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8086, 8093) */
		reached[1][8086] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8092, 8093) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3890: // STATE 8087 - mutant_243.pml:241 - [((_pid==1))] (8093:0:0 - 1)
		IfNotBlocked
		reached[1][8087] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8088, 8093) */
		reached[1][8088] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8092, 8093) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3891: // STATE 8089 - mutant_243.pml:243 - [((_pid>1))] (8093:0:0 - 1)
		IfNotBlocked
		reached[1][8089] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8090, 8093) */
		reached[1][8090] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8092, 8093) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3892: // STATE 8093 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8093] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3893: // STATE 8094 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8184:1 - 1)
		IfNotBlocked
		reached[1][8094] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8184, 8099, 8184) */
		reached[1][8099] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3894: // STATE 8097 - mutant_243.pml:341 - [(1)] (8184:0:1 - 1)
		IfNotBlocked
		reached[1][8097] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8184, 8099, 8184) */
		reached[1][8099] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3895: // STATE 8101 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8101] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3896: // STATE 8102 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8136:0:1 - 1)
		IfNotBlocked
		reached[1][8102] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8136, 8103, 8136) */
		reached[1][8103] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8136, 8104, 8136) */
		reached[1][8104] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3897: // STATE 8120 - mutant_243.pml:365 - [.(goto)] (0:8136:0 - 6)
		IfNotBlocked
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3898: // STATE 8105 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8136:0:1 - 1)
		IfNotBlocked
		reached[1][8105] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8136, 8106, 8136) */
		reached[1][8106] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8136, 8107, 8136) */
		reached[1][8107] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3899: // STATE 8108 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8136:0:1 - 1)
		IfNotBlocked
		reached[1][8108] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8136, 8109, 8136) */
		reached[1][8109] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8136, 8110, 8136) */
		reached[1][8110] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3900: // STATE 8111 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8136:0:1 - 1)
		IfNotBlocked
		reached[1][8111] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8136, 8112, 8136) */
		reached[1][8112] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8136, 8113, 8136) */
		reached[1][8113] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3901: // STATE 8114 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (8136:0:1 - 1)
		IfNotBlocked
		reached[1][8114] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8136, 8115, 8136) */
		reached[1][8115] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8136, 8116, 8136) */
		reached[1][8116] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3902: // STATE 8118 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8136:0 - 1)
		IfNotBlocked
		reached[1][8118] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8136, 8120, 8136) */
		reached[1][8120] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3903: // STATE 8123 - mutant_243.pml:251 - [((_pid==0))] (8131:0:0 - 1)
		IfNotBlocked
		reached[1][8123] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8124, 8131) */
		reached[1][8124] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8130, 8131) */
		reached[1][8130] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3904: // STATE 8125 - mutant_243.pml:253 - [((_pid==1))] (8131:0:0 - 1)
		IfNotBlocked
		reached[1][8125] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8126, 8131) */
		reached[1][8126] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8130, 8131) */
		reached[1][8130] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3905: // STATE 8127 - mutant_243.pml:255 - [((_pid>1))] (8131:0:0 - 1)
		IfNotBlocked
		reached[1][8127] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8128, 8131) */
		reached[1][8128] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8130, 8131) */
		reached[1][8130] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3906: // STATE 8131 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8131] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3907: // STATE 8132 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8184:1 - 1)
		IfNotBlocked
		reached[1][8132] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8184, 8137, 8184) */
		reached[1][8137] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3908: // STATE 8135 - mutant_243.pml:370 - [(1)] (8184:0:1 - 1)
		IfNotBlocked
		reached[1][8135] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8184, 8137, 8184) */
		reached[1][8137] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3909: // STATE 8139 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8139] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3910: // STATE 8140 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8140] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8174, 8141, 8174) */
		reached[1][8141] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8174, 8142, 8174) */
		reached[1][8142] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3911: // STATE 8158 - mutant_243.pml:394 - [.(goto)] (0:8174:0 - 6)
		IfNotBlocked
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3912: // STATE 8143 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8143] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8174, 8144, 8174) */
		reached[1][8144] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8174, 8145, 8174) */
		reached[1][8145] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3913: // STATE 8146 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8146] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8174, 8147, 8174) */
		reached[1][8147] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8174, 8148, 8174) */
		reached[1][8148] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3914: // STATE 8149 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8149] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8174, 8150, 8174) */
		reached[1][8150] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8174, 8151, 8174) */
		reached[1][8151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3915: // STATE 8152 - mutant_243.pml:388 - [((STOP==ABORT))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8152] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8174, 8153, 8174) */
		reached[1][8153] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8174, 8154, 8174) */
		reached[1][8154] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3916: // STATE 8156 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8174:0 - 1)
		IfNotBlocked
		reached[1][8156] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8174, 8158, 8174) */
		reached[1][8158] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3917: // STATE 8161 - mutant_243.pml:263 - [((_pid==0))] (8169:0:0 - 1)
		IfNotBlocked
		reached[1][8161] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8162, 8169) */
		reached[1][8162] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8168, 8169) */
		reached[1][8168] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3918: // STATE 8163 - mutant_243.pml:265 - [((_pid==1))] (8169:0:0 - 1)
		IfNotBlocked
		reached[1][8163] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8164, 8169) */
		reached[1][8164] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8168, 8169) */
		reached[1][8168] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3919: // STATE 8165 - mutant_243.pml:267 - [((_pid>1))] (8169:0:0 - 1)
		IfNotBlocked
		reached[1][8165] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8166, 8169) */
		reached[1][8166] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8168, 8169) */
		reached[1][8168] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3920: // STATE 8169 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8169] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3921: // STATE 8170 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8184:1 - 1)
		IfNotBlocked
		reached[1][8170] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8184, 8175, 8184) */
		reached[1][8175] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3922: // STATE 8173 - mutant_243.pml:399 - [(1)] (8184:0:1 - 1)
		IfNotBlocked
		reached[1][8173] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8184, 8175, 8184) */
		reached[1][8175] = 1;
		;
		/* merge: .(goto)(8184, 8178, 8184) */
		reached[1][8178] = 1;
		;
		/* merge: j = (j+1)(8184, 8180, 8184) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3923: // STATE 8180 - mutant_243.pml:435 - [j = (j+1)] (0:8184:1 - 13)
		IfNotBlocked
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8185, 8184) */
		reached[1][8185] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3924: // STATE 8182 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8182] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3925: // STATE 8188 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8188] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3926: // STATE 8189 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8189] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3927: // STATE 8190 - mutant_243.pml:227 - [((_pid==0))] (8198:0:0 - 1)
		IfNotBlocked
		reached[1][8190] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8191, 8198) */
		reached[1][8191] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8197, 8198) */
		reached[1][8197] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3928: // STATE 8192 - mutant_243.pml:229 - [((_pid==1))] (8198:0:0 - 1)
		IfNotBlocked
		reached[1][8192] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8193, 8198) */
		reached[1][8193] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8197, 8198) */
		reached[1][8197] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3929: // STATE 8194 - mutant_243.pml:231 - [((_pid>1))] (8198:0:0 - 1)
		IfNotBlocked
		reached[1][8194] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8195, 8198) */
		reached[1][8195] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8197, 8198) */
		reached[1][8197] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3930: // STATE 8198 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8198] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3931: // STATE 8199 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8243:1 - 1)
		IfNotBlocked
		reached[1][8199] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8243, 8238, 8243) */
		reached[1][8238] = 1;
		;
		/* merge: j = (j+1)(8243, 8239, 8243) */
		reached[1][8239] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8244, 8243) */
		reached[1][8244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3932: // STATE 8201 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8201] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3933: // STATE 8202 - mutant_243.pml:251 - [((_pid==0))] (8210:0:0 - 1)
		IfNotBlocked
		reached[1][8202] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8203, 8210) */
		reached[1][8203] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8209, 8210) */
		reached[1][8209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3934: // STATE 8204 - mutant_243.pml:253 - [((_pid==1))] (8210:0:0 - 1)
		IfNotBlocked
		reached[1][8204] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8205, 8210) */
		reached[1][8205] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8209, 8210) */
		reached[1][8209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3935: // STATE 8206 - mutant_243.pml:255 - [((_pid>1))] (8210:0:0 - 1)
		IfNotBlocked
		reached[1][8206] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8207, 8210) */
		reached[1][8207] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8209, 8210) */
		reached[1][8209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3936: // STATE 8210 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8210] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3937: // STATE 8211 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8243:1 - 1)
		IfNotBlocked
		reached[1][8211] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8243, 8238, 8243) */
		reached[1][8238] = 1;
		;
		/* merge: j = (j+1)(8243, 8239, 8243) */
		reached[1][8239] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8244, 8243) */
		reached[1][8244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3938: // STATE 8213 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8213] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3939: // STATE 8214 - mutant_243.pml:239 - [((_pid==0))] (8222:0:0 - 1)
		IfNotBlocked
		reached[1][8214] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8215, 8222) */
		reached[1][8215] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8221, 8222) */
		reached[1][8221] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3940: // STATE 8216 - mutant_243.pml:241 - [((_pid==1))] (8222:0:0 - 1)
		IfNotBlocked
		reached[1][8216] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8217, 8222) */
		reached[1][8217] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8221, 8222) */
		reached[1][8221] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3941: // STATE 8218 - mutant_243.pml:243 - [((_pid>1))] (8222:0:0 - 1)
		IfNotBlocked
		reached[1][8218] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8219, 8222) */
		reached[1][8219] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8221, 8222) */
		reached[1][8221] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3942: // STATE 8222 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8222] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3943: // STATE 8223 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8243:1 - 1)
		IfNotBlocked
		reached[1][8223] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8243, 8238, 8243) */
		reached[1][8238] = 1;
		;
		/* merge: j = (j+1)(8243, 8239, 8243) */
		reached[1][8239] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8244, 8243) */
		reached[1][8244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3944: // STATE 8225 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8225] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3945: // STATE 8226 - mutant_243.pml:263 - [((_pid==0))] (8234:0:0 - 1)
		IfNotBlocked
		reached[1][8226] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8227, 8234) */
		reached[1][8227] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8233, 8234) */
		reached[1][8233] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3946: // STATE 8228 - mutant_243.pml:265 - [((_pid==1))] (8234:0:0 - 1)
		IfNotBlocked
		reached[1][8228] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8229, 8234) */
		reached[1][8229] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8233, 8234) */
		reached[1][8233] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3947: // STATE 8230 - mutant_243.pml:267 - [((_pid>1))] (8234:0:0 - 1)
		IfNotBlocked
		reached[1][8230] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8231, 8234) */
		reached[1][8231] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8233, 8234) */
		reached[1][8233] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3948: // STATE 8234 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8234] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3949: // STATE 8235 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8243:1 - 1)
		IfNotBlocked
		reached[1][8235] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8243, 8238, 8243) */
		reached[1][8238] = 1;
		;
		/* merge: j = (j+1)(8243, 8239, 8243) */
		reached[1][8239] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8244, 8243) */
		reached[1][8244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3950: // STATE 8239 - mutant_243.pml:475 - [j = (j+1)] (0:8243:1 - 5)
		IfNotBlocked
		reached[1][8239] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8244, 8243) */
		reached[1][8244] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3951: // STATE 8241 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8241] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3952: // STATE 8252 - mutant_243.pml:554 - [((7==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8252] = 1;
		if (!((7==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3953: // STATE 8253 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8253] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3954: // STATE 8254 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8254] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 3955: // STATE 8255 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8255] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3956: // STATE 8257 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8257] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3957: // STATE 8258 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8258] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3958: // STATE 8259 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8259] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3959: // STATE 8260 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8260] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3960: // STATE 8261 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (8281:0:1 - 1)
		IfNotBlocked
		reached[1][8261] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8281, 8262, 8281) */
		reached[1][8262] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8281, 8263, 8281) */
		reached[1][8263] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3961: // STATE 8279 - mutant_243.pml:306 - [.(goto)] (0:8281:0 - 6)
		IfNotBlocked
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3962: // STATE 8264 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8281:0:1 - 1)
		IfNotBlocked
		reached[1][8264] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8281, 8265, 8281) */
		reached[1][8265] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8281, 8266, 8281) */
		reached[1][8266] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3963: // STATE 8267 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8281:0:1 - 1)
		IfNotBlocked
		reached[1][8267] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8281, 8268, 8281) */
		reached[1][8268] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8281, 8269, 8281) */
		reached[1][8269] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3964: // STATE 8270 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8281:0:1 - 1)
		IfNotBlocked
		reached[1][8270] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8281, 8271, 8281) */
		reached[1][8271] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8281, 8272, 8281) */
		reached[1][8272] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3965: // STATE 8273 - mutant_243.pml:300 - [((START==ABORT))] (8281:0:1 - 1)
		IfNotBlocked
		reached[1][8273] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8281, 8274, 8281) */
		reached[1][8274] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8281, 8275, 8281) */
		reached[1][8275] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3966: // STATE 8277 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8281:0 - 1)
		IfNotBlocked
		reached[1][8277] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8281, 8279, 8281) */
		reached[1][8279] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3967: // STATE 8281 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8281] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3968: // STATE 8283 - mutant_243.pml:227 - [((_pid==0))] (8291:0:0 - 1)
		IfNotBlocked
		reached[1][8283] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8284, 8291) */
		reached[1][8284] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8290, 8291) */
		reached[1][8290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3969: // STATE 8285 - mutant_243.pml:229 - [((_pid==1))] (8291:0:0 - 1)
		IfNotBlocked
		reached[1][8285] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8286, 8291) */
		reached[1][8286] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8290, 8291) */
		reached[1][8290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3970: // STATE 8287 - mutant_243.pml:231 - [((_pid>1))] (8291:0:0 - 1)
		IfNotBlocked
		reached[1][8287] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8288, 8291) */
		reached[1][8288] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8290, 8291) */
		reached[1][8290] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3971: // STATE 8291 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8291] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3972: // STATE 8292 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8420:1 - 1)
		IfNotBlocked
		reached[1][8292] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8420, 8297, 8420) */
		reached[1][8297] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3973: // STATE 8295 - mutant_243.pml:312 - [(1)] (8420:0:1 - 1)
		IfNotBlocked
		reached[1][8295] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8420, 8297, 8420) */
		reached[1][8297] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3974: // STATE 8299 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8299] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3975: // STATE 8300 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8334:0:1 - 1)
		IfNotBlocked
		reached[1][8300] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8334, 8301, 8334) */
		reached[1][8301] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8334, 8302, 8334) */
		reached[1][8302] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3976: // STATE 8318 - mutant_243.pml:336 - [.(goto)] (0:8334:0 - 6)
		IfNotBlocked
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3977: // STATE 8303 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8334:0:1 - 1)
		IfNotBlocked
		reached[1][8303] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8334, 8304, 8334) */
		reached[1][8304] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8334, 8305, 8334) */
		reached[1][8305] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3978: // STATE 8306 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8334:0:1 - 1)
		IfNotBlocked
		reached[1][8306] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8334, 8307, 8334) */
		reached[1][8307] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8334, 8308, 8334) */
		reached[1][8308] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3979: // STATE 8309 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8334:0:1 - 1)
		IfNotBlocked
		reached[1][8309] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8334, 8310, 8334) */
		reached[1][8310] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8334, 8311, 8334) */
		reached[1][8311] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3980: // STATE 8312 - mutant_243.pml:330 - [((PAUSE==ABORT))] (8334:0:1 - 1)
		IfNotBlocked
		reached[1][8312] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8334, 8313, 8334) */
		reached[1][8313] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8334, 8314, 8334) */
		reached[1][8314] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3981: // STATE 8316 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8334:0 - 1)
		IfNotBlocked
		reached[1][8316] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8334, 8318, 8334) */
		reached[1][8318] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3982: // STATE 8321 - mutant_243.pml:239 - [((_pid==0))] (8329:0:0 - 1)
		IfNotBlocked
		reached[1][8321] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8322, 8329) */
		reached[1][8322] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8328, 8329) */
		reached[1][8328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3983: // STATE 8323 - mutant_243.pml:241 - [((_pid==1))] (8329:0:0 - 1)
		IfNotBlocked
		reached[1][8323] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8324, 8329) */
		reached[1][8324] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8328, 8329) */
		reached[1][8328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3984: // STATE 8325 - mutant_243.pml:243 - [((_pid>1))] (8329:0:0 - 1)
		IfNotBlocked
		reached[1][8325] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8326, 8329) */
		reached[1][8326] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8328, 8329) */
		reached[1][8328] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3985: // STATE 8329 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8329] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3986: // STATE 8330 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8420:1 - 1)
		IfNotBlocked
		reached[1][8330] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8420, 8335, 8420) */
		reached[1][8335] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3987: // STATE 8333 - mutant_243.pml:341 - [(1)] (8420:0:1 - 1)
		IfNotBlocked
		reached[1][8333] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8420, 8335, 8420) */
		reached[1][8335] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3988: // STATE 8337 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8337] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3989: // STATE 8338 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8372:0:1 - 1)
		IfNotBlocked
		reached[1][8338] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8372, 8339, 8372) */
		reached[1][8339] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8372, 8340, 8372) */
		reached[1][8340] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3990: // STATE 8356 - mutant_243.pml:365 - [.(goto)] (0:8372:0 - 6)
		IfNotBlocked
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3991: // STATE 8341 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8372:0:1 - 1)
		IfNotBlocked
		reached[1][8341] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8372, 8342, 8372) */
		reached[1][8342] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8372, 8343, 8372) */
		reached[1][8343] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3992: // STATE 8344 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8372:0:1 - 1)
		IfNotBlocked
		reached[1][8344] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8372, 8345, 8372) */
		reached[1][8345] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8372, 8346, 8372) */
		reached[1][8346] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3993: // STATE 8347 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8372:0:1 - 1)
		IfNotBlocked
		reached[1][8347] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8372, 8348, 8372) */
		reached[1][8348] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8372, 8349, 8372) */
		reached[1][8349] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3994: // STATE 8350 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (8372:0:1 - 1)
		IfNotBlocked
		reached[1][8350] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8372, 8351, 8372) */
		reached[1][8351] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8372, 8352, 8372) */
		reached[1][8352] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3995: // STATE 8354 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8372:0 - 1)
		IfNotBlocked
		reached[1][8354] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8372, 8356, 8372) */
		reached[1][8356] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3996: // STATE 8359 - mutant_243.pml:251 - [((_pid==0))] (8367:0:0 - 1)
		IfNotBlocked
		reached[1][8359] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8360, 8367) */
		reached[1][8360] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8366, 8367) */
		reached[1][8366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3997: // STATE 8361 - mutant_243.pml:253 - [((_pid==1))] (8367:0:0 - 1)
		IfNotBlocked
		reached[1][8361] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8362, 8367) */
		reached[1][8362] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8366, 8367) */
		reached[1][8366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3998: // STATE 8363 - mutant_243.pml:255 - [((_pid>1))] (8367:0:0 - 1)
		IfNotBlocked
		reached[1][8363] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8364, 8367) */
		reached[1][8364] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8366, 8367) */
		reached[1][8366] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 3999: // STATE 8367 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8367] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4000: // STATE 8368 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8420:1 - 1)
		IfNotBlocked
		reached[1][8368] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8420, 8373, 8420) */
		reached[1][8373] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4001: // STATE 8371 - mutant_243.pml:370 - [(1)] (8420:0:1 - 1)
		IfNotBlocked
		reached[1][8371] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8420, 8373, 8420) */
		reached[1][8373] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4002: // STATE 8375 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8375] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4003: // STATE 8376 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8410:0:1 - 1)
		IfNotBlocked
		reached[1][8376] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8410, 8377, 8410) */
		reached[1][8377] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8410, 8378, 8410) */
		reached[1][8378] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4004: // STATE 8394 - mutant_243.pml:394 - [.(goto)] (0:8410:0 - 6)
		IfNotBlocked
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4005: // STATE 8379 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8410:0:1 - 1)
		IfNotBlocked
		reached[1][8379] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8410, 8380, 8410) */
		reached[1][8380] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8410, 8381, 8410) */
		reached[1][8381] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4006: // STATE 8382 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8410:0:1 - 1)
		IfNotBlocked
		reached[1][8382] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8410, 8383, 8410) */
		reached[1][8383] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8410, 8384, 8410) */
		reached[1][8384] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4007: // STATE 8385 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8410:0:1 - 1)
		IfNotBlocked
		reached[1][8385] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8410, 8386, 8410) */
		reached[1][8386] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8410, 8387, 8410) */
		reached[1][8387] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4008: // STATE 8388 - mutant_243.pml:388 - [((STOP==ABORT))] (8410:0:1 - 1)
		IfNotBlocked
		reached[1][8388] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8410, 8389, 8410) */
		reached[1][8389] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8410, 8390, 8410) */
		reached[1][8390] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4009: // STATE 8392 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8410:0 - 1)
		IfNotBlocked
		reached[1][8392] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8410, 8394, 8410) */
		reached[1][8394] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4010: // STATE 8397 - mutant_243.pml:263 - [((_pid==0))] (8405:0:0 - 1)
		IfNotBlocked
		reached[1][8397] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8398, 8405) */
		reached[1][8398] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8404, 8405) */
		reached[1][8404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4011: // STATE 8399 - mutant_243.pml:265 - [((_pid==1))] (8405:0:0 - 1)
		IfNotBlocked
		reached[1][8399] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8400, 8405) */
		reached[1][8400] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8404, 8405) */
		reached[1][8404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4012: // STATE 8401 - mutant_243.pml:267 - [((_pid>1))] (8405:0:0 - 1)
		IfNotBlocked
		reached[1][8401] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8402, 8405) */
		reached[1][8402] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8404, 8405) */
		reached[1][8404] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4013: // STATE 8405 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8405] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4014: // STATE 8406 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8420:1 - 1)
		IfNotBlocked
		reached[1][8406] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8420, 8411, 8420) */
		reached[1][8411] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4015: // STATE 8409 - mutant_243.pml:399 - [(1)] (8420:0:1 - 1)
		IfNotBlocked
		reached[1][8409] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8420, 8411, 8420) */
		reached[1][8411] = 1;
		;
		/* merge: .(goto)(8420, 8414, 8420) */
		reached[1][8414] = 1;
		;
		/* merge: j = (j+1)(8420, 8416, 8420) */
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4016: // STATE 8416 - mutant_243.pml:435 - [j = (j+1)] (0:8420:1 - 13)
		IfNotBlocked
		reached[1][8416] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8421, 8420) */
		reached[1][8421] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4017: // STATE 8418 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8418] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4018: // STATE 8425 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8425] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4019: // STATE 8426 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8426] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4020: // STATE 8427 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8427] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4021: // STATE 8428 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (8448:0:1 - 1)
		IfNotBlocked
		reached[1][8428] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8448, 8429, 8448) */
		reached[1][8429] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8448, 8430, 8448) */
		reached[1][8430] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4022: // STATE 8446 - mutant_243.pml:306 - [.(goto)] (0:8448:0 - 6)
		IfNotBlocked
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4023: // STATE 8431 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8448:0:1 - 1)
		IfNotBlocked
		reached[1][8431] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8448, 8432, 8448) */
		reached[1][8432] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8448, 8433, 8448) */
		reached[1][8433] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4024: // STATE 8434 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8448:0:1 - 1)
		IfNotBlocked
		reached[1][8434] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8448, 8435, 8448) */
		reached[1][8435] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8448, 8436, 8448) */
		reached[1][8436] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4025: // STATE 8437 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8448:0:1 - 1)
		IfNotBlocked
		reached[1][8437] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8448, 8438, 8448) */
		reached[1][8438] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8448, 8439, 8448) */
		reached[1][8439] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4026: // STATE 8440 - mutant_243.pml:300 - [((START==ABORT))] (8448:0:1 - 1)
		IfNotBlocked
		reached[1][8440] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8448, 8441, 8448) */
		reached[1][8441] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8448, 8442, 8448) */
		reached[1][8442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4027: // STATE 8444 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8448:0 - 1)
		IfNotBlocked
		reached[1][8444] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8448, 8446, 8448) */
		reached[1][8446] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4028: // STATE 8448 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8448] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4029: // STATE 8450 - mutant_243.pml:227 - [((_pid==0))] (8458:0:0 - 1)
		IfNotBlocked
		reached[1][8450] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8451, 8458) */
		reached[1][8451] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8457, 8458) */
		reached[1][8457] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4030: // STATE 8452 - mutant_243.pml:229 - [((_pid==1))] (8458:0:0 - 1)
		IfNotBlocked
		reached[1][8452] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8453, 8458) */
		reached[1][8453] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8457, 8458) */
		reached[1][8457] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4031: // STATE 8454 - mutant_243.pml:231 - [((_pid>1))] (8458:0:0 - 1)
		IfNotBlocked
		reached[1][8454] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8455, 8458) */
		reached[1][8455] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8457, 8458) */
		reached[1][8457] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4032: // STATE 8458 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8458] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4033: // STATE 8459 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8587:1 - 1)
		IfNotBlocked
		reached[1][8459] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8587, 8464, 8587) */
		reached[1][8464] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4034: // STATE 8462 - mutant_243.pml:312 - [(1)] (8587:0:1 - 1)
		IfNotBlocked
		reached[1][8462] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8587, 8464, 8587) */
		reached[1][8464] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4035: // STATE 8466 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8466] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4036: // STATE 8467 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8501:0:1 - 1)
		IfNotBlocked
		reached[1][8467] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8501, 8468, 8501) */
		reached[1][8468] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8501, 8469, 8501) */
		reached[1][8469] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4037: // STATE 8485 - mutant_243.pml:336 - [.(goto)] (0:8501:0 - 6)
		IfNotBlocked
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4038: // STATE 8470 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8501:0:1 - 1)
		IfNotBlocked
		reached[1][8470] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8501, 8471, 8501) */
		reached[1][8471] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8501, 8472, 8501) */
		reached[1][8472] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4039: // STATE 8473 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8501:0:1 - 1)
		IfNotBlocked
		reached[1][8473] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8501, 8474, 8501) */
		reached[1][8474] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8501, 8475, 8501) */
		reached[1][8475] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4040: // STATE 8476 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8501:0:1 - 1)
		IfNotBlocked
		reached[1][8476] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8501, 8477, 8501) */
		reached[1][8477] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8501, 8478, 8501) */
		reached[1][8478] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4041: // STATE 8479 - mutant_243.pml:330 - [((PAUSE==ABORT))] (8501:0:1 - 1)
		IfNotBlocked
		reached[1][8479] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8501, 8480, 8501) */
		reached[1][8480] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8501, 8481, 8501) */
		reached[1][8481] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4042: // STATE 8483 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8501:0 - 1)
		IfNotBlocked
		reached[1][8483] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8501, 8485, 8501) */
		reached[1][8485] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4043: // STATE 8488 - mutant_243.pml:239 - [((_pid==0))] (8496:0:0 - 1)
		IfNotBlocked
		reached[1][8488] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8489, 8496) */
		reached[1][8489] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8495, 8496) */
		reached[1][8495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4044: // STATE 8490 - mutant_243.pml:241 - [((_pid==1))] (8496:0:0 - 1)
		IfNotBlocked
		reached[1][8490] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8491, 8496) */
		reached[1][8491] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8495, 8496) */
		reached[1][8495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4045: // STATE 8492 - mutant_243.pml:243 - [((_pid>1))] (8496:0:0 - 1)
		IfNotBlocked
		reached[1][8492] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8493, 8496) */
		reached[1][8493] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8495, 8496) */
		reached[1][8495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4046: // STATE 8496 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8496] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4047: // STATE 8497 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8587:1 - 1)
		IfNotBlocked
		reached[1][8497] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8587, 8502, 8587) */
		reached[1][8502] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4048: // STATE 8500 - mutant_243.pml:341 - [(1)] (8587:0:1 - 1)
		IfNotBlocked
		reached[1][8500] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8587, 8502, 8587) */
		reached[1][8502] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4049: // STATE 8504 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8504] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4050: // STATE 8505 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8539:0:1 - 1)
		IfNotBlocked
		reached[1][8505] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8539, 8506, 8539) */
		reached[1][8506] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8539, 8507, 8539) */
		reached[1][8507] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4051: // STATE 8523 - mutant_243.pml:365 - [.(goto)] (0:8539:0 - 6)
		IfNotBlocked
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4052: // STATE 8508 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8539:0:1 - 1)
		IfNotBlocked
		reached[1][8508] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8539, 8509, 8539) */
		reached[1][8509] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8539, 8510, 8539) */
		reached[1][8510] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4053: // STATE 8511 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8539:0:1 - 1)
		IfNotBlocked
		reached[1][8511] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8539, 8512, 8539) */
		reached[1][8512] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8539, 8513, 8539) */
		reached[1][8513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4054: // STATE 8514 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8539:0:1 - 1)
		IfNotBlocked
		reached[1][8514] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8539, 8515, 8539) */
		reached[1][8515] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8539, 8516, 8539) */
		reached[1][8516] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4055: // STATE 8517 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (8539:0:1 - 1)
		IfNotBlocked
		reached[1][8517] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8539, 8518, 8539) */
		reached[1][8518] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8539, 8519, 8539) */
		reached[1][8519] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4056: // STATE 8521 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8539:0 - 1)
		IfNotBlocked
		reached[1][8521] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8539, 8523, 8539) */
		reached[1][8523] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4057: // STATE 8526 - mutant_243.pml:251 - [((_pid==0))] (8534:0:0 - 1)
		IfNotBlocked
		reached[1][8526] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8527, 8534) */
		reached[1][8527] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8533, 8534) */
		reached[1][8533] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4058: // STATE 8528 - mutant_243.pml:253 - [((_pid==1))] (8534:0:0 - 1)
		IfNotBlocked
		reached[1][8528] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8529, 8534) */
		reached[1][8529] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8533, 8534) */
		reached[1][8533] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4059: // STATE 8530 - mutant_243.pml:255 - [((_pid>1))] (8534:0:0 - 1)
		IfNotBlocked
		reached[1][8530] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8531, 8534) */
		reached[1][8531] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8533, 8534) */
		reached[1][8533] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4060: // STATE 8534 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8534] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4061: // STATE 8535 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8587:1 - 1)
		IfNotBlocked
		reached[1][8535] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8587, 8540, 8587) */
		reached[1][8540] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4062: // STATE 8538 - mutant_243.pml:370 - [(1)] (8587:0:1 - 1)
		IfNotBlocked
		reached[1][8538] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8587, 8540, 8587) */
		reached[1][8540] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4063: // STATE 8542 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8542] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4064: // STATE 8543 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8577:0:1 - 1)
		IfNotBlocked
		reached[1][8543] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8577, 8544, 8577) */
		reached[1][8544] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8577, 8545, 8577) */
		reached[1][8545] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4065: // STATE 8561 - mutant_243.pml:394 - [.(goto)] (0:8577:0 - 6)
		IfNotBlocked
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4066: // STATE 8546 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8577:0:1 - 1)
		IfNotBlocked
		reached[1][8546] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8577, 8547, 8577) */
		reached[1][8547] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8577, 8548, 8577) */
		reached[1][8548] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4067: // STATE 8549 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8577:0:1 - 1)
		IfNotBlocked
		reached[1][8549] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8577, 8550, 8577) */
		reached[1][8550] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8577, 8551, 8577) */
		reached[1][8551] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4068: // STATE 8552 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8577:0:1 - 1)
		IfNotBlocked
		reached[1][8552] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8577, 8553, 8577) */
		reached[1][8553] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8577, 8554, 8577) */
		reached[1][8554] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4069: // STATE 8555 - mutant_243.pml:388 - [((STOP==ABORT))] (8577:0:1 - 1)
		IfNotBlocked
		reached[1][8555] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8577, 8556, 8577) */
		reached[1][8556] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8577, 8557, 8577) */
		reached[1][8557] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4070: // STATE 8559 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8577:0 - 1)
		IfNotBlocked
		reached[1][8559] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8577, 8561, 8577) */
		reached[1][8561] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4071: // STATE 8564 - mutant_243.pml:263 - [((_pid==0))] (8572:0:0 - 1)
		IfNotBlocked
		reached[1][8564] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8565, 8572) */
		reached[1][8565] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8571, 8572) */
		reached[1][8571] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4072: // STATE 8566 - mutant_243.pml:265 - [((_pid==1))] (8572:0:0 - 1)
		IfNotBlocked
		reached[1][8566] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8567, 8572) */
		reached[1][8567] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8571, 8572) */
		reached[1][8571] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4073: // STATE 8568 - mutant_243.pml:267 - [((_pid>1))] (8572:0:0 - 1)
		IfNotBlocked
		reached[1][8568] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8569, 8572) */
		reached[1][8569] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8571, 8572) */
		reached[1][8571] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4074: // STATE 8572 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8572] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4075: // STATE 8573 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8587:1 - 1)
		IfNotBlocked
		reached[1][8573] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8587, 8578, 8587) */
		reached[1][8578] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4076: // STATE 8576 - mutant_243.pml:399 - [(1)] (8587:0:1 - 1)
		IfNotBlocked
		reached[1][8576] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8587, 8578, 8587) */
		reached[1][8578] = 1;
		;
		/* merge: .(goto)(8587, 8581, 8587) */
		reached[1][8581] = 1;
		;
		/* merge: j = (j-1)(8587, 8583, 8587) */
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4077: // STATE 8583 - mutant_243.pml:446 - [j = (j-1)] (0:8587:1 - 13)
		IfNotBlocked
		reached[1][8583] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8588, 8587) */
		reached[1][8588] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4078: // STATE 8585 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8585] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4079: // STATE 8595 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8595] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 4080: // STATE 8596 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8596] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4081: // STATE 8597 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8597] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4082: // STATE 8598 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (8618:0:1 - 1)
		IfNotBlocked
		reached[1][8598] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8618, 8599, 8618) */
		reached[1][8599] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8618, 8600, 8618) */
		reached[1][8600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4083: // STATE 8616 - mutant_243.pml:306 - [.(goto)] (0:8618:0 - 6)
		IfNotBlocked
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4084: // STATE 8601 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8618:0:1 - 1)
		IfNotBlocked
		reached[1][8601] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8618, 8602, 8618) */
		reached[1][8602] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8618, 8603, 8618) */
		reached[1][8603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4085: // STATE 8604 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8618:0:1 - 1)
		IfNotBlocked
		reached[1][8604] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8618, 8605, 8618) */
		reached[1][8605] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8618, 8606, 8618) */
		reached[1][8606] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4086: // STATE 8607 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8618:0:1 - 1)
		IfNotBlocked
		reached[1][8607] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8618, 8608, 8618) */
		reached[1][8608] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8618, 8609, 8618) */
		reached[1][8609] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4087: // STATE 8610 - mutant_243.pml:300 - [((START==ABORT))] (8618:0:1 - 1)
		IfNotBlocked
		reached[1][8610] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8618, 8611, 8618) */
		reached[1][8611] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8618, 8612, 8618) */
		reached[1][8612] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4088: // STATE 8614 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8618:0 - 1)
		IfNotBlocked
		reached[1][8614] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8618, 8616, 8618) */
		reached[1][8616] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4089: // STATE 8618 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8618] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4090: // STATE 8620 - mutant_243.pml:227 - [((_pid==0))] (8628:0:0 - 1)
		IfNotBlocked
		reached[1][8620] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8621, 8628) */
		reached[1][8621] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8627, 8628) */
		reached[1][8627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4091: // STATE 8622 - mutant_243.pml:229 - [((_pid==1))] (8628:0:0 - 1)
		IfNotBlocked
		reached[1][8622] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8623, 8628) */
		reached[1][8623] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8627, 8628) */
		reached[1][8627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4092: // STATE 8624 - mutant_243.pml:231 - [((_pid>1))] (8628:0:0 - 1)
		IfNotBlocked
		reached[1][8624] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8625, 8628) */
		reached[1][8625] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8627, 8628) */
		reached[1][8627] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4093: // STATE 8628 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8628] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4094: // STATE 8629 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8757:1 - 1)
		IfNotBlocked
		reached[1][8629] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8757, 8634, 8757) */
		reached[1][8634] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4095: // STATE 8632 - mutant_243.pml:312 - [(1)] (8757:0:1 - 1)
		IfNotBlocked
		reached[1][8632] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8757, 8634, 8757) */
		reached[1][8634] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4096: // STATE 8636 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8636] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4097: // STATE 8637 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8671:0:1 - 1)
		IfNotBlocked
		reached[1][8637] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8671, 8638, 8671) */
		reached[1][8638] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8671, 8639, 8671) */
		reached[1][8639] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4098: // STATE 8655 - mutant_243.pml:336 - [.(goto)] (0:8671:0 - 6)
		IfNotBlocked
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4099: // STATE 8640 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8671:0:1 - 1)
		IfNotBlocked
		reached[1][8640] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8671, 8641, 8671) */
		reached[1][8641] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8671, 8642, 8671) */
		reached[1][8642] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4100: // STATE 8643 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8671:0:1 - 1)
		IfNotBlocked
		reached[1][8643] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8671, 8644, 8671) */
		reached[1][8644] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8671, 8645, 8671) */
		reached[1][8645] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4101: // STATE 8646 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8671:0:1 - 1)
		IfNotBlocked
		reached[1][8646] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8671, 8647, 8671) */
		reached[1][8647] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8671, 8648, 8671) */
		reached[1][8648] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4102: // STATE 8649 - mutant_243.pml:330 - [((PAUSE==ABORT))] (8671:0:1 - 1)
		IfNotBlocked
		reached[1][8649] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8671, 8650, 8671) */
		reached[1][8650] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8671, 8651, 8671) */
		reached[1][8651] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4103: // STATE 8653 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8671:0 - 1)
		IfNotBlocked
		reached[1][8653] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8671, 8655, 8671) */
		reached[1][8655] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4104: // STATE 8658 - mutant_243.pml:239 - [((_pid==0))] (8666:0:0 - 1)
		IfNotBlocked
		reached[1][8658] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8659, 8666) */
		reached[1][8659] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8665, 8666) */
		reached[1][8665] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4105: // STATE 8660 - mutant_243.pml:241 - [((_pid==1))] (8666:0:0 - 1)
		IfNotBlocked
		reached[1][8660] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8661, 8666) */
		reached[1][8661] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8665, 8666) */
		reached[1][8665] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4106: // STATE 8662 - mutant_243.pml:243 - [((_pid>1))] (8666:0:0 - 1)
		IfNotBlocked
		reached[1][8662] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8663, 8666) */
		reached[1][8663] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8665, 8666) */
		reached[1][8665] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4107: // STATE 8666 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8666] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4108: // STATE 8667 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8757:1 - 1)
		IfNotBlocked
		reached[1][8667] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8757, 8672, 8757) */
		reached[1][8672] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4109: // STATE 8670 - mutant_243.pml:341 - [(1)] (8757:0:1 - 1)
		IfNotBlocked
		reached[1][8670] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8757, 8672, 8757) */
		reached[1][8672] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4110: // STATE 8674 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8674] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4111: // STATE 8675 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8709:0:1 - 1)
		IfNotBlocked
		reached[1][8675] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8709, 8676, 8709) */
		reached[1][8676] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8709, 8677, 8709) */
		reached[1][8677] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4112: // STATE 8693 - mutant_243.pml:365 - [.(goto)] (0:8709:0 - 6)
		IfNotBlocked
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4113: // STATE 8678 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8709:0:1 - 1)
		IfNotBlocked
		reached[1][8678] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8709, 8679, 8709) */
		reached[1][8679] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8709, 8680, 8709) */
		reached[1][8680] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4114: // STATE 8681 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8709:0:1 - 1)
		IfNotBlocked
		reached[1][8681] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8709, 8682, 8709) */
		reached[1][8682] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8709, 8683, 8709) */
		reached[1][8683] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4115: // STATE 8684 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8709:0:1 - 1)
		IfNotBlocked
		reached[1][8684] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8709, 8685, 8709) */
		reached[1][8685] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8709, 8686, 8709) */
		reached[1][8686] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4116: // STATE 8687 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (8709:0:1 - 1)
		IfNotBlocked
		reached[1][8687] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8709, 8688, 8709) */
		reached[1][8688] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8709, 8689, 8709) */
		reached[1][8689] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4117: // STATE 8691 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8709:0 - 1)
		IfNotBlocked
		reached[1][8691] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8709, 8693, 8709) */
		reached[1][8693] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4118: // STATE 8696 - mutant_243.pml:251 - [((_pid==0))] (8704:0:0 - 1)
		IfNotBlocked
		reached[1][8696] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8697, 8704) */
		reached[1][8697] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8703, 8704) */
		reached[1][8703] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4119: // STATE 8698 - mutant_243.pml:253 - [((_pid==1))] (8704:0:0 - 1)
		IfNotBlocked
		reached[1][8698] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8699, 8704) */
		reached[1][8699] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8703, 8704) */
		reached[1][8703] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4120: // STATE 8700 - mutant_243.pml:255 - [((_pid>1))] (8704:0:0 - 1)
		IfNotBlocked
		reached[1][8700] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8701, 8704) */
		reached[1][8701] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8703, 8704) */
		reached[1][8703] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4121: // STATE 8704 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8704] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4122: // STATE 8705 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8757:1 - 1)
		IfNotBlocked
		reached[1][8705] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8757, 8710, 8757) */
		reached[1][8710] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4123: // STATE 8708 - mutant_243.pml:370 - [(1)] (8757:0:1 - 1)
		IfNotBlocked
		reached[1][8708] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8757, 8710, 8757) */
		reached[1][8710] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4124: // STATE 8712 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8712] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4125: // STATE 8713 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8747:0:1 - 1)
		IfNotBlocked
		reached[1][8713] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8747, 8714, 8747) */
		reached[1][8714] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8747, 8715, 8747) */
		reached[1][8715] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4126: // STATE 8731 - mutant_243.pml:394 - [.(goto)] (0:8747:0 - 6)
		IfNotBlocked
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4127: // STATE 8716 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8747:0:1 - 1)
		IfNotBlocked
		reached[1][8716] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8747, 8717, 8747) */
		reached[1][8717] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8747, 8718, 8747) */
		reached[1][8718] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4128: // STATE 8719 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8747:0:1 - 1)
		IfNotBlocked
		reached[1][8719] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8747, 8720, 8747) */
		reached[1][8720] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8747, 8721, 8747) */
		reached[1][8721] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4129: // STATE 8722 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8747:0:1 - 1)
		IfNotBlocked
		reached[1][8722] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8747, 8723, 8747) */
		reached[1][8723] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8747, 8724, 8747) */
		reached[1][8724] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4130: // STATE 8725 - mutant_243.pml:388 - [((STOP==ABORT))] (8747:0:1 - 1)
		IfNotBlocked
		reached[1][8725] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8747, 8726, 8747) */
		reached[1][8726] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8747, 8727, 8747) */
		reached[1][8727] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4131: // STATE 8729 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8747:0 - 1)
		IfNotBlocked
		reached[1][8729] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8747, 8731, 8747) */
		reached[1][8731] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4132: // STATE 8734 - mutant_243.pml:263 - [((_pid==0))] (8742:0:0 - 1)
		IfNotBlocked
		reached[1][8734] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8735, 8742) */
		reached[1][8735] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8741, 8742) */
		reached[1][8741] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4133: // STATE 8736 - mutant_243.pml:265 - [((_pid==1))] (8742:0:0 - 1)
		IfNotBlocked
		reached[1][8736] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8737, 8742) */
		reached[1][8737] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8741, 8742) */
		reached[1][8741] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4134: // STATE 8738 - mutant_243.pml:267 - [((_pid>1))] (8742:0:0 - 1)
		IfNotBlocked
		reached[1][8738] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8739, 8742) */
		reached[1][8739] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8741, 8742) */
		reached[1][8741] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4135: // STATE 8742 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8742] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4136: // STATE 8743 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8757:1 - 1)
		IfNotBlocked
		reached[1][8743] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8757, 8748, 8757) */
		reached[1][8748] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4137: // STATE 8746 - mutant_243.pml:399 - [(1)] (8757:0:1 - 1)
		IfNotBlocked
		reached[1][8746] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8757, 8748, 8757) */
		reached[1][8748] = 1;
		;
		/* merge: .(goto)(8757, 8751, 8757) */
		reached[1][8751] = 1;
		;
		/* merge: j = (j+1)(8757, 8753, 8757) */
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4138: // STATE 8753 - mutant_243.pml:435 - [j = (j+1)] (0:8757:1 - 13)
		IfNotBlocked
		reached[1][8753] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8758, 8757) */
		reached[1][8758] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4139: // STATE 8755 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8755] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4140: // STATE 8761 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8761] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4141: // STATE 8762 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8762] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4142: // STATE 8763 - mutant_243.pml:227 - [((_pid==0))] (8771:0:0 - 1)
		IfNotBlocked
		reached[1][8763] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8764, 8771) */
		reached[1][8764] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8770, 8771) */
		reached[1][8770] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4143: // STATE 8765 - mutant_243.pml:229 - [((_pid==1))] (8771:0:0 - 1)
		IfNotBlocked
		reached[1][8765] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8766, 8771) */
		reached[1][8766] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8770, 8771) */
		reached[1][8770] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4144: // STATE 8767 - mutant_243.pml:231 - [((_pid>1))] (8771:0:0 - 1)
		IfNotBlocked
		reached[1][8767] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8768, 8771) */
		reached[1][8768] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8770, 8771) */
		reached[1][8770] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4145: // STATE 8771 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8771] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4146: // STATE 8772 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8816:1 - 1)
		IfNotBlocked
		reached[1][8772] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8816, 8811, 8816) */
		reached[1][8811] = 1;
		;
		/* merge: j = (j+1)(8816, 8812, 8816) */
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8817, 8816) */
		reached[1][8817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4147: // STATE 8774 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8774] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4148: // STATE 8775 - mutant_243.pml:251 - [((_pid==0))] (8783:0:0 - 1)
		IfNotBlocked
		reached[1][8775] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8776, 8783) */
		reached[1][8776] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8782, 8783) */
		reached[1][8782] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4149: // STATE 8777 - mutant_243.pml:253 - [((_pid==1))] (8783:0:0 - 1)
		IfNotBlocked
		reached[1][8777] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8778, 8783) */
		reached[1][8778] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8782, 8783) */
		reached[1][8782] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4150: // STATE 8779 - mutant_243.pml:255 - [((_pid>1))] (8783:0:0 - 1)
		IfNotBlocked
		reached[1][8779] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8780, 8783) */
		reached[1][8780] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8782, 8783) */
		reached[1][8782] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4151: // STATE 8783 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8783] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4152: // STATE 8784 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8816:1 - 1)
		IfNotBlocked
		reached[1][8784] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8816, 8811, 8816) */
		reached[1][8811] = 1;
		;
		/* merge: j = (j+1)(8816, 8812, 8816) */
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8817, 8816) */
		reached[1][8817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4153: // STATE 8786 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8786] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4154: // STATE 8787 - mutant_243.pml:239 - [((_pid==0))] (8795:0:0 - 1)
		IfNotBlocked
		reached[1][8787] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8788, 8795) */
		reached[1][8788] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8794, 8795) */
		reached[1][8794] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4155: // STATE 8789 - mutant_243.pml:241 - [((_pid==1))] (8795:0:0 - 1)
		IfNotBlocked
		reached[1][8789] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8790, 8795) */
		reached[1][8790] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8794, 8795) */
		reached[1][8794] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4156: // STATE 8791 - mutant_243.pml:243 - [((_pid>1))] (8795:0:0 - 1)
		IfNotBlocked
		reached[1][8791] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8792, 8795) */
		reached[1][8792] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8794, 8795) */
		reached[1][8794] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4157: // STATE 8795 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8795] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4158: // STATE 8796 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8816:1 - 1)
		IfNotBlocked
		reached[1][8796] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8816, 8811, 8816) */
		reached[1][8811] = 1;
		;
		/* merge: j = (j+1)(8816, 8812, 8816) */
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8817, 8816) */
		reached[1][8817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4159: // STATE 8798 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8798] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4160: // STATE 8799 - mutant_243.pml:263 - [((_pid==0))] (8807:0:0 - 1)
		IfNotBlocked
		reached[1][8799] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8800, 8807) */
		reached[1][8800] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8806, 8807) */
		reached[1][8806] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4161: // STATE 8801 - mutant_243.pml:265 - [((_pid==1))] (8807:0:0 - 1)
		IfNotBlocked
		reached[1][8801] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8802, 8807) */
		reached[1][8802] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8806, 8807) */
		reached[1][8806] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4162: // STATE 8803 - mutant_243.pml:267 - [((_pid>1))] (8807:0:0 - 1)
		IfNotBlocked
		reached[1][8803] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8804, 8807) */
		reached[1][8804] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8806, 8807) */
		reached[1][8806] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4163: // STATE 8807 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8807] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4164: // STATE 8808 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8816:1 - 1)
		IfNotBlocked
		reached[1][8808] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8816, 8811, 8816) */
		reached[1][8811] = 1;
		;
		/* merge: j = (j+1)(8816, 8812, 8816) */
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8817, 8816) */
		reached[1][8817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4165: // STATE 8812 - mutant_243.pml:475 - [j = (j+1)] (0:8816:1 - 5)
		IfNotBlocked
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8817, 8816) */
		reached[1][8817] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4166: // STATE 8814 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8814] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4167: // STATE 8825 - mutant_243.pml:556 - [(((7==ABORTING)||(7==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8825] = 1;
		if (!(((7==10)||(7==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4168: // STATE 8826 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8826] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4169: // STATE 8827 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8827] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 4170: // STATE 8828 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8828] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4171: // STATE 8830 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8830] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4172: // STATE 8831 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8831] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4173: // STATE 8832 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8832] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4174: // STATE 8833 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8833] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4175: // STATE 8834 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (8854:0:1 - 1)
		IfNotBlocked
		reached[1][8834] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8854, 8835, 8854) */
		reached[1][8835] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8854, 8836, 8854) */
		reached[1][8836] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4176: // STATE 8852 - mutant_243.pml:306 - [.(goto)] (0:8854:0 - 6)
		IfNotBlocked
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4177: // STATE 8837 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8854:0:1 - 1)
		IfNotBlocked
		reached[1][8837] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8854, 8838, 8854) */
		reached[1][8838] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8854, 8839, 8854) */
		reached[1][8839] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4178: // STATE 8840 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8854:0:1 - 1)
		IfNotBlocked
		reached[1][8840] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8854, 8841, 8854) */
		reached[1][8841] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8854, 8842, 8854) */
		reached[1][8842] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4179: // STATE 8843 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8854:0:1 - 1)
		IfNotBlocked
		reached[1][8843] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8854, 8844, 8854) */
		reached[1][8844] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8854, 8845, 8854) */
		reached[1][8845] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4180: // STATE 8846 - mutant_243.pml:300 - [((START==ABORT))] (8854:0:1 - 1)
		IfNotBlocked
		reached[1][8846] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8854, 8847, 8854) */
		reached[1][8847] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8854, 8848, 8854) */
		reached[1][8848] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4181: // STATE 8850 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8854:0 - 1)
		IfNotBlocked
		reached[1][8850] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8854, 8852, 8854) */
		reached[1][8852] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4182: // STATE 8854 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8854] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4183: // STATE 8856 - mutant_243.pml:227 - [((_pid==0))] (8864:0:0 - 1)
		IfNotBlocked
		reached[1][8856] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 8857, 8864) */
		reached[1][8857] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8863, 8864) */
		reached[1][8863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4184: // STATE 8858 - mutant_243.pml:229 - [((_pid==1))] (8864:0:0 - 1)
		IfNotBlocked
		reached[1][8858] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 8859, 8864) */
		reached[1][8859] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8863, 8864) */
		reached[1][8863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4185: // STATE 8860 - mutant_243.pml:231 - [((_pid>1))] (8864:0:0 - 1)
		IfNotBlocked
		reached[1][8860] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 8861, 8864) */
		reached[1][8861] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8863, 8864) */
		reached[1][8863] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4186: // STATE 8864 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8864] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4187: // STATE 8865 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:8993:1 - 1)
		IfNotBlocked
		reached[1][8865] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8993, 8870, 8993) */
		reached[1][8870] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4188: // STATE 8868 - mutant_243.pml:312 - [(1)] (8993:0:1 - 1)
		IfNotBlocked
		reached[1][8868] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8993, 8870, 8993) */
		reached[1][8870] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4189: // STATE 8872 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8872] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4190: // STATE 8873 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8907:0:1 - 1)
		IfNotBlocked
		reached[1][8873] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8907, 8874, 8907) */
		reached[1][8874] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8907, 8875, 8907) */
		reached[1][8875] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4191: // STATE 8891 - mutant_243.pml:336 - [.(goto)] (0:8907:0 - 6)
		IfNotBlocked
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4192: // STATE 8876 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8907:0:1 - 1)
		IfNotBlocked
		reached[1][8876] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8907, 8877, 8907) */
		reached[1][8877] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8907, 8878, 8907) */
		reached[1][8878] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4193: // STATE 8879 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8907:0:1 - 1)
		IfNotBlocked
		reached[1][8879] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8907, 8880, 8907) */
		reached[1][8880] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8907, 8881, 8907) */
		reached[1][8881] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4194: // STATE 8882 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8907:0:1 - 1)
		IfNotBlocked
		reached[1][8882] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8907, 8883, 8907) */
		reached[1][8883] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8907, 8884, 8907) */
		reached[1][8884] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4195: // STATE 8885 - mutant_243.pml:330 - [((PAUSE==ABORT))] (8907:0:1 - 1)
		IfNotBlocked
		reached[1][8885] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8907, 8886, 8907) */
		reached[1][8886] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8907, 8887, 8907) */
		reached[1][8887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4196: // STATE 8889 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8907:0 - 1)
		IfNotBlocked
		reached[1][8889] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8907, 8891, 8907) */
		reached[1][8891] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4197: // STATE 8894 - mutant_243.pml:239 - [((_pid==0))] (8902:0:0 - 1)
		IfNotBlocked
		reached[1][8894] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8895, 8902) */
		reached[1][8895] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8901, 8902) */
		reached[1][8901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4198: // STATE 8896 - mutant_243.pml:241 - [((_pid==1))] (8902:0:0 - 1)
		IfNotBlocked
		reached[1][8896] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 8897, 8902) */
		reached[1][8897] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8901, 8902) */
		reached[1][8901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4199: // STATE 8898 - mutant_243.pml:243 - [((_pid>1))] (8902:0:0 - 1)
		IfNotBlocked
		reached[1][8898] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 8899, 8902) */
		reached[1][8899] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8901, 8902) */
		reached[1][8901] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4200: // STATE 8902 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8902] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4201: // STATE 8903 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:8993:1 - 1)
		IfNotBlocked
		reached[1][8903] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8993, 8908, 8993) */
		reached[1][8908] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4202: // STATE 8906 - mutant_243.pml:341 - [(1)] (8993:0:1 - 1)
		IfNotBlocked
		reached[1][8906] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8993, 8908, 8993) */
		reached[1][8908] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4203: // STATE 8910 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8910] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4204: // STATE 8911 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8945:0:1 - 1)
		IfNotBlocked
		reached[1][8911] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8945, 8912, 8945) */
		reached[1][8912] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8945, 8913, 8945) */
		reached[1][8913] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4205: // STATE 8929 - mutant_243.pml:365 - [.(goto)] (0:8945:0 - 6)
		IfNotBlocked
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4206: // STATE 8914 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8945:0:1 - 1)
		IfNotBlocked
		reached[1][8914] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8945, 8915, 8945) */
		reached[1][8915] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8945, 8916, 8945) */
		reached[1][8916] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4207: // STATE 8917 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8945:0:1 - 1)
		IfNotBlocked
		reached[1][8917] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8945, 8918, 8945) */
		reached[1][8918] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8945, 8919, 8945) */
		reached[1][8919] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4208: // STATE 8920 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8945:0:1 - 1)
		IfNotBlocked
		reached[1][8920] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8945, 8921, 8945) */
		reached[1][8921] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8945, 8922, 8945) */
		reached[1][8922] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4209: // STATE 8923 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (8945:0:1 - 1)
		IfNotBlocked
		reached[1][8923] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8945, 8924, 8945) */
		reached[1][8924] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8945, 8925, 8945) */
		reached[1][8925] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4210: // STATE 8927 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8945:0 - 1)
		IfNotBlocked
		reached[1][8927] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8945, 8929, 8945) */
		reached[1][8929] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4211: // STATE 8932 - mutant_243.pml:251 - [((_pid==0))] (8940:0:0 - 1)
		IfNotBlocked
		reached[1][8932] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8933, 8940) */
		reached[1][8933] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8939, 8940) */
		reached[1][8939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4212: // STATE 8934 - mutant_243.pml:253 - [((_pid==1))] (8940:0:0 - 1)
		IfNotBlocked
		reached[1][8934] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 8935, 8940) */
		reached[1][8935] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8939, 8940) */
		reached[1][8939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4213: // STATE 8936 - mutant_243.pml:255 - [((_pid>1))] (8940:0:0 - 1)
		IfNotBlocked
		reached[1][8936] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 8937, 8940) */
		reached[1][8937] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8939, 8940) */
		reached[1][8939] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4214: // STATE 8940 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8940] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4215: // STATE 8941 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:8993:1 - 1)
		IfNotBlocked
		reached[1][8941] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8993, 8946, 8993) */
		reached[1][8946] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4216: // STATE 8944 - mutant_243.pml:370 - [(1)] (8993:0:1 - 1)
		IfNotBlocked
		reached[1][8944] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8993, 8946, 8993) */
		reached[1][8946] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4217: // STATE 8948 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8948] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4218: // STATE 8949 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8983:0:1 - 1)
		IfNotBlocked
		reached[1][8949] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(8983, 8950, 8983) */
		reached[1][8950] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(8983, 8951, 8983) */
		reached[1][8951] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4219: // STATE 8967 - mutant_243.pml:394 - [.(goto)] (0:8983:0 - 6)
		IfNotBlocked
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4220: // STATE 8952 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8983:0:1 - 1)
		IfNotBlocked
		reached[1][8952] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8983, 8953, 8983) */
		reached[1][8953] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(8983, 8954, 8983) */
		reached[1][8954] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4221: // STATE 8955 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8983:0:1 - 1)
		IfNotBlocked
		reached[1][8955] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8983, 8956, 8983) */
		reached[1][8956] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8983, 8957, 8983) */
		reached[1][8957] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4222: // STATE 8958 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8983:0:1 - 1)
		IfNotBlocked
		reached[1][8958] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8983, 8959, 8983) */
		reached[1][8959] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(8983, 8960, 8983) */
		reached[1][8960] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4223: // STATE 8961 - mutant_243.pml:388 - [((STOP==ABORT))] (8983:0:1 - 1)
		IfNotBlocked
		reached[1][8961] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(8983, 8962, 8983) */
		reached[1][8962] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(8983, 8963, 8983) */
		reached[1][8963] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4224: // STATE 8965 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:8983:0 - 1)
		IfNotBlocked
		reached[1][8965] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(8983, 8967, 8983) */
		reached[1][8967] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4225: // STATE 8970 - mutant_243.pml:263 - [((_pid==0))] (8978:0:0 - 1)
		IfNotBlocked
		reached[1][8970] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 8971, 8978) */
		reached[1][8971] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8977, 8978) */
		reached[1][8977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4226: // STATE 8972 - mutant_243.pml:265 - [((_pid==1))] (8978:0:0 - 1)
		IfNotBlocked
		reached[1][8972] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 8973, 8978) */
		reached[1][8973] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8977, 8978) */
		reached[1][8977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4227: // STATE 8974 - mutant_243.pml:267 - [((_pid>1))] (8978:0:0 - 1)
		IfNotBlocked
		reached[1][8974] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 8975, 8978) */
		reached[1][8975] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 8977, 8978) */
		reached[1][8977] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4228: // STATE 8978 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][8978] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4229: // STATE 8979 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:8993:1 - 1)
		IfNotBlocked
		reached[1][8979] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(8993, 8984, 8993) */
		reached[1][8984] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4230: // STATE 8982 - mutant_243.pml:399 - [(1)] (8993:0:1 - 1)
		IfNotBlocked
		reached[1][8982] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8993, 8984, 8993) */
		reached[1][8984] = 1;
		;
		/* merge: .(goto)(8993, 8987, 8993) */
		reached[1][8987] = 1;
		;
		/* merge: j = (j+1)(8993, 8989, 8993) */
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4231: // STATE 8989 - mutant_243.pml:435 - [j = (j+1)] (0:8993:1 - 13)
		IfNotBlocked
		reached[1][8989] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8994, 8993) */
		reached[1][8994] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4232: // STATE 8991 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8991] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4233: // STATE 8998 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8998] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4234: // STATE 8999 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8999] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4235: // STATE 9000 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9000] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4236: // STATE 9001 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (9021:0:1 - 1)
		IfNotBlocked
		reached[1][9001] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9021, 9002, 9021) */
		reached[1][9002] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9021, 9003, 9021) */
		reached[1][9003] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4237: // STATE 9019 - mutant_243.pml:306 - [.(goto)] (0:9021:0 - 6)
		IfNotBlocked
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4238: // STATE 9004 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9021:0:1 - 1)
		IfNotBlocked
		reached[1][9004] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9021, 9005, 9021) */
		reached[1][9005] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9021, 9006, 9021) */
		reached[1][9006] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4239: // STATE 9007 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9021:0:1 - 1)
		IfNotBlocked
		reached[1][9007] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9021, 9008, 9021) */
		reached[1][9008] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9021, 9009, 9021) */
		reached[1][9009] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4240: // STATE 9010 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9021:0:1 - 1)
		IfNotBlocked
		reached[1][9010] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9021, 9011, 9021) */
		reached[1][9011] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9021, 9012, 9021) */
		reached[1][9012] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4241: // STATE 9013 - mutant_243.pml:300 - [((START==ABORT))] (9021:0:1 - 1)
		IfNotBlocked
		reached[1][9013] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9021, 9014, 9021) */
		reached[1][9014] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9021, 9015, 9021) */
		reached[1][9015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4242: // STATE 9017 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9021:0 - 1)
		IfNotBlocked
		reached[1][9017] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9021, 9019, 9021) */
		reached[1][9019] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4243: // STATE 9021 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9021] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4244: // STATE 9023 - mutant_243.pml:227 - [((_pid==0))] (9031:0:0 - 1)
		IfNotBlocked
		reached[1][9023] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9024, 9031) */
		reached[1][9024] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9030, 9031) */
		reached[1][9030] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4245: // STATE 9025 - mutant_243.pml:229 - [((_pid==1))] (9031:0:0 - 1)
		IfNotBlocked
		reached[1][9025] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9026, 9031) */
		reached[1][9026] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9030, 9031) */
		reached[1][9030] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4246: // STATE 9027 - mutant_243.pml:231 - [((_pid>1))] (9031:0:0 - 1)
		IfNotBlocked
		reached[1][9027] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9028, 9031) */
		reached[1][9028] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9030, 9031) */
		reached[1][9030] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4247: // STATE 9031 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9031] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4248: // STATE 9032 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9160:1 - 1)
		IfNotBlocked
		reached[1][9032] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9160, 9037, 9160) */
		reached[1][9037] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4249: // STATE 9035 - mutant_243.pml:312 - [(1)] (9160:0:1 - 1)
		IfNotBlocked
		reached[1][9035] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9160, 9037, 9160) */
		reached[1][9037] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4250: // STATE 9039 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9039] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4251: // STATE 9040 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9074:0:1 - 1)
		IfNotBlocked
		reached[1][9040] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9074, 9041, 9074) */
		reached[1][9041] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9074, 9042, 9074) */
		reached[1][9042] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4252: // STATE 9058 - mutant_243.pml:336 - [.(goto)] (0:9074:0 - 6)
		IfNotBlocked
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4253: // STATE 9043 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9074:0:1 - 1)
		IfNotBlocked
		reached[1][9043] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9074, 9044, 9074) */
		reached[1][9044] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9074, 9045, 9074) */
		reached[1][9045] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4254: // STATE 9046 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9074:0:1 - 1)
		IfNotBlocked
		reached[1][9046] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9074, 9047, 9074) */
		reached[1][9047] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9074, 9048, 9074) */
		reached[1][9048] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4255: // STATE 9049 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9074:0:1 - 1)
		IfNotBlocked
		reached[1][9049] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9074, 9050, 9074) */
		reached[1][9050] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9074, 9051, 9074) */
		reached[1][9051] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4256: // STATE 9052 - mutant_243.pml:330 - [((PAUSE==ABORT))] (9074:0:1 - 1)
		IfNotBlocked
		reached[1][9052] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9074, 9053, 9074) */
		reached[1][9053] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9074, 9054, 9074) */
		reached[1][9054] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4257: // STATE 9056 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9074:0 - 1)
		IfNotBlocked
		reached[1][9056] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9074, 9058, 9074) */
		reached[1][9058] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4258: // STATE 9061 - mutant_243.pml:239 - [((_pid==0))] (9069:0:0 - 1)
		IfNotBlocked
		reached[1][9061] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9062, 9069) */
		reached[1][9062] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9068, 9069) */
		reached[1][9068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4259: // STATE 9063 - mutant_243.pml:241 - [((_pid==1))] (9069:0:0 - 1)
		IfNotBlocked
		reached[1][9063] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9064, 9069) */
		reached[1][9064] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9068, 9069) */
		reached[1][9068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4260: // STATE 9065 - mutant_243.pml:243 - [((_pid>1))] (9069:0:0 - 1)
		IfNotBlocked
		reached[1][9065] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9066, 9069) */
		reached[1][9066] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9068, 9069) */
		reached[1][9068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4261: // STATE 9069 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9069] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4262: // STATE 9070 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9160:1 - 1)
		IfNotBlocked
		reached[1][9070] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9160, 9075, 9160) */
		reached[1][9075] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4263: // STATE 9073 - mutant_243.pml:341 - [(1)] (9160:0:1 - 1)
		IfNotBlocked
		reached[1][9073] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9160, 9075, 9160) */
		reached[1][9075] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4264: // STATE 9077 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9077] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4265: // STATE 9078 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9112:0:1 - 1)
		IfNotBlocked
		reached[1][9078] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9112, 9079, 9112) */
		reached[1][9079] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9112, 9080, 9112) */
		reached[1][9080] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4266: // STATE 9096 - mutant_243.pml:365 - [.(goto)] (0:9112:0 - 6)
		IfNotBlocked
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4267: // STATE 9081 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9112:0:1 - 1)
		IfNotBlocked
		reached[1][9081] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9112, 9082, 9112) */
		reached[1][9082] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9112, 9083, 9112) */
		reached[1][9083] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4268: // STATE 9084 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9112:0:1 - 1)
		IfNotBlocked
		reached[1][9084] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9112, 9085, 9112) */
		reached[1][9085] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9112, 9086, 9112) */
		reached[1][9086] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4269: // STATE 9087 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9112:0:1 - 1)
		IfNotBlocked
		reached[1][9087] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9112, 9088, 9112) */
		reached[1][9088] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9112, 9089, 9112) */
		reached[1][9089] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4270: // STATE 9090 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (9112:0:1 - 1)
		IfNotBlocked
		reached[1][9090] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9112, 9091, 9112) */
		reached[1][9091] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9112, 9092, 9112) */
		reached[1][9092] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4271: // STATE 9094 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9112:0 - 1)
		IfNotBlocked
		reached[1][9094] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9112, 9096, 9112) */
		reached[1][9096] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4272: // STATE 9099 - mutant_243.pml:251 - [((_pid==0))] (9107:0:0 - 1)
		IfNotBlocked
		reached[1][9099] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9100, 9107) */
		reached[1][9100] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9106, 9107) */
		reached[1][9106] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4273: // STATE 9101 - mutant_243.pml:253 - [((_pid==1))] (9107:0:0 - 1)
		IfNotBlocked
		reached[1][9101] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9102, 9107) */
		reached[1][9102] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9106, 9107) */
		reached[1][9106] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4274: // STATE 9103 - mutant_243.pml:255 - [((_pid>1))] (9107:0:0 - 1)
		IfNotBlocked
		reached[1][9103] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9104, 9107) */
		reached[1][9104] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9106, 9107) */
		reached[1][9106] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4275: // STATE 9107 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9107] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4276: // STATE 9108 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9160:1 - 1)
		IfNotBlocked
		reached[1][9108] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9160, 9113, 9160) */
		reached[1][9113] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4277: // STATE 9111 - mutant_243.pml:370 - [(1)] (9160:0:1 - 1)
		IfNotBlocked
		reached[1][9111] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9160, 9113, 9160) */
		reached[1][9113] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4278: // STATE 9115 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9115] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4279: // STATE 9116 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9150:0:1 - 1)
		IfNotBlocked
		reached[1][9116] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9150, 9117, 9150) */
		reached[1][9117] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9150, 9118, 9150) */
		reached[1][9118] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4280: // STATE 9134 - mutant_243.pml:394 - [.(goto)] (0:9150:0 - 6)
		IfNotBlocked
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4281: // STATE 9119 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9150:0:1 - 1)
		IfNotBlocked
		reached[1][9119] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9150, 9120, 9150) */
		reached[1][9120] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9150, 9121, 9150) */
		reached[1][9121] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4282: // STATE 9122 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9150:0:1 - 1)
		IfNotBlocked
		reached[1][9122] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9150, 9123, 9150) */
		reached[1][9123] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9150, 9124, 9150) */
		reached[1][9124] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4283: // STATE 9125 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9150:0:1 - 1)
		IfNotBlocked
		reached[1][9125] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9150, 9126, 9150) */
		reached[1][9126] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9150, 9127, 9150) */
		reached[1][9127] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4284: // STATE 9128 - mutant_243.pml:388 - [((STOP==ABORT))] (9150:0:1 - 1)
		IfNotBlocked
		reached[1][9128] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9150, 9129, 9150) */
		reached[1][9129] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9150, 9130, 9150) */
		reached[1][9130] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4285: // STATE 9132 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9150:0 - 1)
		IfNotBlocked
		reached[1][9132] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9150, 9134, 9150) */
		reached[1][9134] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4286: // STATE 9137 - mutant_243.pml:263 - [((_pid==0))] (9145:0:0 - 1)
		IfNotBlocked
		reached[1][9137] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9138, 9145) */
		reached[1][9138] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9144, 9145) */
		reached[1][9144] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4287: // STATE 9139 - mutant_243.pml:265 - [((_pid==1))] (9145:0:0 - 1)
		IfNotBlocked
		reached[1][9139] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9140, 9145) */
		reached[1][9140] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9144, 9145) */
		reached[1][9144] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4288: // STATE 9141 - mutant_243.pml:267 - [((_pid>1))] (9145:0:0 - 1)
		IfNotBlocked
		reached[1][9141] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9142, 9145) */
		reached[1][9142] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9144, 9145) */
		reached[1][9144] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4289: // STATE 9145 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9145] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4290: // STATE 9146 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9160:1 - 1)
		IfNotBlocked
		reached[1][9146] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9160, 9151, 9160) */
		reached[1][9151] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4291: // STATE 9149 - mutant_243.pml:399 - [(1)] (9160:0:1 - 1)
		IfNotBlocked
		reached[1][9149] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9160, 9151, 9160) */
		reached[1][9151] = 1;
		;
		/* merge: .(goto)(9160, 9154, 9160) */
		reached[1][9154] = 1;
		;
		/* merge: j = (j-1)(9160, 9156, 9160) */
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4292: // STATE 9156 - mutant_243.pml:446 - [j = (j-1)] (0:9160:1 - 13)
		IfNotBlocked
		reached[1][9156] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9161, 9160) */
		reached[1][9161] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4293: // STATE 9158 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9158] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4294: // STATE 9168 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9168] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 4295: // STATE 9169 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9169] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4296: // STATE 9170 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9170] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4297: // STATE 9171 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (9191:0:1 - 1)
		IfNotBlocked
		reached[1][9171] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9191, 9172, 9191) */
		reached[1][9172] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9191, 9173, 9191) */
		reached[1][9173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4298: // STATE 9189 - mutant_243.pml:306 - [.(goto)] (0:9191:0 - 6)
		IfNotBlocked
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4299: // STATE 9174 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9191:0:1 - 1)
		IfNotBlocked
		reached[1][9174] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9191, 9175, 9191) */
		reached[1][9175] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9191, 9176, 9191) */
		reached[1][9176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4300: // STATE 9177 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9191:0:1 - 1)
		IfNotBlocked
		reached[1][9177] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9191, 9178, 9191) */
		reached[1][9178] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9191, 9179, 9191) */
		reached[1][9179] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4301: // STATE 9180 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9191:0:1 - 1)
		IfNotBlocked
		reached[1][9180] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9191, 9181, 9191) */
		reached[1][9181] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9191, 9182, 9191) */
		reached[1][9182] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4302: // STATE 9183 - mutant_243.pml:300 - [((START==ABORT))] (9191:0:1 - 1)
		IfNotBlocked
		reached[1][9183] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9191, 9184, 9191) */
		reached[1][9184] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9191, 9185, 9191) */
		reached[1][9185] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4303: // STATE 9187 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9191:0 - 1)
		IfNotBlocked
		reached[1][9187] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9191, 9189, 9191) */
		reached[1][9189] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4304: // STATE 9191 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9191] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4305: // STATE 9193 - mutant_243.pml:227 - [((_pid==0))] (9201:0:0 - 1)
		IfNotBlocked
		reached[1][9193] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9194, 9201) */
		reached[1][9194] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9200, 9201) */
		reached[1][9200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4306: // STATE 9195 - mutant_243.pml:229 - [((_pid==1))] (9201:0:0 - 1)
		IfNotBlocked
		reached[1][9195] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9196, 9201) */
		reached[1][9196] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9200, 9201) */
		reached[1][9200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4307: // STATE 9197 - mutant_243.pml:231 - [((_pid>1))] (9201:0:0 - 1)
		IfNotBlocked
		reached[1][9197] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9198, 9201) */
		reached[1][9198] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9200, 9201) */
		reached[1][9200] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4308: // STATE 9201 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9201] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4309: // STATE 9202 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9330:1 - 1)
		IfNotBlocked
		reached[1][9202] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9330, 9207, 9330) */
		reached[1][9207] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4310: // STATE 9205 - mutant_243.pml:312 - [(1)] (9330:0:1 - 1)
		IfNotBlocked
		reached[1][9205] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9330, 9207, 9330) */
		reached[1][9207] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4311: // STATE 9209 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9209] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4312: // STATE 9210 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9244:0:1 - 1)
		IfNotBlocked
		reached[1][9210] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9244, 9211, 9244) */
		reached[1][9211] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9244, 9212, 9244) */
		reached[1][9212] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4313: // STATE 9228 - mutant_243.pml:336 - [.(goto)] (0:9244:0 - 6)
		IfNotBlocked
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4314: // STATE 9213 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9244:0:1 - 1)
		IfNotBlocked
		reached[1][9213] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9244, 9214, 9244) */
		reached[1][9214] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9244, 9215, 9244) */
		reached[1][9215] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4315: // STATE 9216 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9244:0:1 - 1)
		IfNotBlocked
		reached[1][9216] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9244, 9217, 9244) */
		reached[1][9217] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9244, 9218, 9244) */
		reached[1][9218] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4316: // STATE 9219 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9244:0:1 - 1)
		IfNotBlocked
		reached[1][9219] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9244, 9220, 9244) */
		reached[1][9220] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9244, 9221, 9244) */
		reached[1][9221] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4317: // STATE 9222 - mutant_243.pml:330 - [((PAUSE==ABORT))] (9244:0:1 - 1)
		IfNotBlocked
		reached[1][9222] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9244, 9223, 9244) */
		reached[1][9223] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9244, 9224, 9244) */
		reached[1][9224] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4318: // STATE 9226 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9244:0 - 1)
		IfNotBlocked
		reached[1][9226] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9244, 9228, 9244) */
		reached[1][9228] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4319: // STATE 9231 - mutant_243.pml:239 - [((_pid==0))] (9239:0:0 - 1)
		IfNotBlocked
		reached[1][9231] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9232, 9239) */
		reached[1][9232] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9238, 9239) */
		reached[1][9238] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4320: // STATE 9233 - mutant_243.pml:241 - [((_pid==1))] (9239:0:0 - 1)
		IfNotBlocked
		reached[1][9233] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9234, 9239) */
		reached[1][9234] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9238, 9239) */
		reached[1][9238] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4321: // STATE 9235 - mutant_243.pml:243 - [((_pid>1))] (9239:0:0 - 1)
		IfNotBlocked
		reached[1][9235] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9236, 9239) */
		reached[1][9236] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9238, 9239) */
		reached[1][9238] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4322: // STATE 9239 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9239] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4323: // STATE 9240 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9330:1 - 1)
		IfNotBlocked
		reached[1][9240] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9330, 9245, 9330) */
		reached[1][9245] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4324: // STATE 9243 - mutant_243.pml:341 - [(1)] (9330:0:1 - 1)
		IfNotBlocked
		reached[1][9243] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9330, 9245, 9330) */
		reached[1][9245] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4325: // STATE 9247 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9247] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4326: // STATE 9248 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9282:0:1 - 1)
		IfNotBlocked
		reached[1][9248] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9282, 9249, 9282) */
		reached[1][9249] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9282, 9250, 9282) */
		reached[1][9250] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4327: // STATE 9266 - mutant_243.pml:365 - [.(goto)] (0:9282:0 - 6)
		IfNotBlocked
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4328: // STATE 9251 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9282:0:1 - 1)
		IfNotBlocked
		reached[1][9251] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9282, 9252, 9282) */
		reached[1][9252] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9282, 9253, 9282) */
		reached[1][9253] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4329: // STATE 9254 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9282:0:1 - 1)
		IfNotBlocked
		reached[1][9254] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9282, 9255, 9282) */
		reached[1][9255] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9282, 9256, 9282) */
		reached[1][9256] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4330: // STATE 9257 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9282:0:1 - 1)
		IfNotBlocked
		reached[1][9257] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9282, 9258, 9282) */
		reached[1][9258] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9282, 9259, 9282) */
		reached[1][9259] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4331: // STATE 9260 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (9282:0:1 - 1)
		IfNotBlocked
		reached[1][9260] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9282, 9261, 9282) */
		reached[1][9261] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9282, 9262, 9282) */
		reached[1][9262] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4332: // STATE 9264 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9282:0 - 1)
		IfNotBlocked
		reached[1][9264] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9282, 9266, 9282) */
		reached[1][9266] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4333: // STATE 9269 - mutant_243.pml:251 - [((_pid==0))] (9277:0:0 - 1)
		IfNotBlocked
		reached[1][9269] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9270, 9277) */
		reached[1][9270] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9276, 9277) */
		reached[1][9276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4334: // STATE 9271 - mutant_243.pml:253 - [((_pid==1))] (9277:0:0 - 1)
		IfNotBlocked
		reached[1][9271] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9272, 9277) */
		reached[1][9272] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9276, 9277) */
		reached[1][9276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4335: // STATE 9273 - mutant_243.pml:255 - [((_pid>1))] (9277:0:0 - 1)
		IfNotBlocked
		reached[1][9273] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9274, 9277) */
		reached[1][9274] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9276, 9277) */
		reached[1][9276] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4336: // STATE 9277 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9277] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4337: // STATE 9278 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9330:1 - 1)
		IfNotBlocked
		reached[1][9278] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9330, 9283, 9330) */
		reached[1][9283] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4338: // STATE 9281 - mutant_243.pml:370 - [(1)] (9330:0:1 - 1)
		IfNotBlocked
		reached[1][9281] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9330, 9283, 9330) */
		reached[1][9283] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4339: // STATE 9285 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9285] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4340: // STATE 9286 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9320:0:1 - 1)
		IfNotBlocked
		reached[1][9286] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9320, 9287, 9320) */
		reached[1][9287] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9320, 9288, 9320) */
		reached[1][9288] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4341: // STATE 9304 - mutant_243.pml:394 - [.(goto)] (0:9320:0 - 6)
		IfNotBlocked
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4342: // STATE 9289 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9320:0:1 - 1)
		IfNotBlocked
		reached[1][9289] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9320, 9290, 9320) */
		reached[1][9290] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9320, 9291, 9320) */
		reached[1][9291] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4343: // STATE 9292 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9320:0:1 - 1)
		IfNotBlocked
		reached[1][9292] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9320, 9293, 9320) */
		reached[1][9293] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9320, 9294, 9320) */
		reached[1][9294] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4344: // STATE 9295 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9320:0:1 - 1)
		IfNotBlocked
		reached[1][9295] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9320, 9296, 9320) */
		reached[1][9296] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9320, 9297, 9320) */
		reached[1][9297] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4345: // STATE 9298 - mutant_243.pml:388 - [((STOP==ABORT))] (9320:0:1 - 1)
		IfNotBlocked
		reached[1][9298] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9320, 9299, 9320) */
		reached[1][9299] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9320, 9300, 9320) */
		reached[1][9300] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4346: // STATE 9302 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9320:0 - 1)
		IfNotBlocked
		reached[1][9302] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9320, 9304, 9320) */
		reached[1][9304] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4347: // STATE 9307 - mutant_243.pml:263 - [((_pid==0))] (9315:0:0 - 1)
		IfNotBlocked
		reached[1][9307] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9308, 9315) */
		reached[1][9308] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9314, 9315) */
		reached[1][9314] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4348: // STATE 9309 - mutant_243.pml:265 - [((_pid==1))] (9315:0:0 - 1)
		IfNotBlocked
		reached[1][9309] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9310, 9315) */
		reached[1][9310] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9314, 9315) */
		reached[1][9314] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4349: // STATE 9311 - mutant_243.pml:267 - [((_pid>1))] (9315:0:0 - 1)
		IfNotBlocked
		reached[1][9311] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9312, 9315) */
		reached[1][9312] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9314, 9315) */
		reached[1][9314] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4350: // STATE 9315 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9315] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4351: // STATE 9316 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9330:1 - 1)
		IfNotBlocked
		reached[1][9316] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9330, 9321, 9330) */
		reached[1][9321] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4352: // STATE 9319 - mutant_243.pml:399 - [(1)] (9330:0:1 - 1)
		IfNotBlocked
		reached[1][9319] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9330, 9321, 9330) */
		reached[1][9321] = 1;
		;
		/* merge: .(goto)(9330, 9324, 9330) */
		reached[1][9324] = 1;
		;
		/* merge: j = (j+1)(9330, 9326, 9330) */
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4353: // STATE 9326 - mutant_243.pml:435 - [j = (j+1)] (0:9330:1 - 13)
		IfNotBlocked
		reached[1][9326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9331, 9330) */
		reached[1][9331] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4354: // STATE 9328 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9328] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4355: // STATE 9334 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9334] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4356: // STATE 9335 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9335] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4357: // STATE 9336 - mutant_243.pml:227 - [((_pid==0))] (9344:0:0 - 1)
		IfNotBlocked
		reached[1][9336] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9337, 9344) */
		reached[1][9337] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9343, 9344) */
		reached[1][9343] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4358: // STATE 9338 - mutant_243.pml:229 - [((_pid==1))] (9344:0:0 - 1)
		IfNotBlocked
		reached[1][9338] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9339, 9344) */
		reached[1][9339] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9343, 9344) */
		reached[1][9343] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4359: // STATE 9340 - mutant_243.pml:231 - [((_pid>1))] (9344:0:0 - 1)
		IfNotBlocked
		reached[1][9340] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9341, 9344) */
		reached[1][9341] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9343, 9344) */
		reached[1][9343] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4360: // STATE 9344 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9344] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4361: // STATE 9345 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9389:1 - 1)
		IfNotBlocked
		reached[1][9345] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9389, 9384, 9389) */
		reached[1][9384] = 1;
		;
		/* merge: j = (j+1)(9389, 9385, 9389) */
		reached[1][9385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9390, 9389) */
		reached[1][9390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4362: // STATE 9347 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9347] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4363: // STATE 9348 - mutant_243.pml:251 - [((_pid==0))] (9356:0:0 - 1)
		IfNotBlocked
		reached[1][9348] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9349, 9356) */
		reached[1][9349] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9355, 9356) */
		reached[1][9355] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4364: // STATE 9350 - mutant_243.pml:253 - [((_pid==1))] (9356:0:0 - 1)
		IfNotBlocked
		reached[1][9350] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9351, 9356) */
		reached[1][9351] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9355, 9356) */
		reached[1][9355] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4365: // STATE 9352 - mutant_243.pml:255 - [((_pid>1))] (9356:0:0 - 1)
		IfNotBlocked
		reached[1][9352] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9353, 9356) */
		reached[1][9353] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9355, 9356) */
		reached[1][9355] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4366: // STATE 9356 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9356] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4367: // STATE 9357 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9389:1 - 1)
		IfNotBlocked
		reached[1][9357] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9389, 9384, 9389) */
		reached[1][9384] = 1;
		;
		/* merge: j = (j+1)(9389, 9385, 9389) */
		reached[1][9385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9390, 9389) */
		reached[1][9390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4368: // STATE 9359 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9359] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4369: // STATE 9360 - mutant_243.pml:239 - [((_pid==0))] (9368:0:0 - 1)
		IfNotBlocked
		reached[1][9360] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9361, 9368) */
		reached[1][9361] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9367, 9368) */
		reached[1][9367] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4370: // STATE 9362 - mutant_243.pml:241 - [((_pid==1))] (9368:0:0 - 1)
		IfNotBlocked
		reached[1][9362] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9363, 9368) */
		reached[1][9363] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9367, 9368) */
		reached[1][9367] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4371: // STATE 9364 - mutant_243.pml:243 - [((_pid>1))] (9368:0:0 - 1)
		IfNotBlocked
		reached[1][9364] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9365, 9368) */
		reached[1][9365] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9367, 9368) */
		reached[1][9367] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4372: // STATE 9368 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9368] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4373: // STATE 9369 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9389:1 - 1)
		IfNotBlocked
		reached[1][9369] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9389, 9384, 9389) */
		reached[1][9384] = 1;
		;
		/* merge: j = (j+1)(9389, 9385, 9389) */
		reached[1][9385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9390, 9389) */
		reached[1][9390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4374: // STATE 9371 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9371] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4375: // STATE 9372 - mutant_243.pml:263 - [((_pid==0))] (9380:0:0 - 1)
		IfNotBlocked
		reached[1][9372] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9373, 9380) */
		reached[1][9373] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9379, 9380) */
		reached[1][9379] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4376: // STATE 9374 - mutant_243.pml:265 - [((_pid==1))] (9380:0:0 - 1)
		IfNotBlocked
		reached[1][9374] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9375, 9380) */
		reached[1][9375] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9379, 9380) */
		reached[1][9379] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4377: // STATE 9376 - mutant_243.pml:267 - [((_pid>1))] (9380:0:0 - 1)
		IfNotBlocked
		reached[1][9376] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9377, 9380) */
		reached[1][9377] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9379, 9380) */
		reached[1][9379] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4378: // STATE 9380 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9380] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4379: // STATE 9381 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9389:1 - 1)
		IfNotBlocked
		reached[1][9381] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9389, 9384, 9389) */
		reached[1][9384] = 1;
		;
		/* merge: j = (j+1)(9389, 9385, 9389) */
		reached[1][9385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9390, 9389) */
		reached[1][9390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4380: // STATE 9385 - mutant_243.pml:475 - [j = (j+1)] (0:9389:1 - 5)
		IfNotBlocked
		reached[1][9385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9390, 9389) */
		reached[1][9390] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4381: // STATE 9387 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9387] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4382: // STATE 9404 - mutant_243.pml:552 - [((9==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9404] = 1;
		if (!((9==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4383: // STATE 9405 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9405] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4384: // STATE 9406 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9406] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 4385: // STATE 9407 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9407] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4386: // STATE 9409 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9409] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4387: // STATE 9410 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9410] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4388: // STATE 9411 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9411] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4389: // STATE 9412 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9412] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4390: // STATE 9413 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (9433:0:1 - 1)
		IfNotBlocked
		reached[1][9413] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9433, 9414, 9433) */
		reached[1][9414] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9433, 9415, 9433) */
		reached[1][9415] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4391: // STATE 9431 - mutant_243.pml:306 - [.(goto)] (0:9433:0 - 6)
		IfNotBlocked
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4392: // STATE 9416 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9433:0:1 - 1)
		IfNotBlocked
		reached[1][9416] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9433, 9417, 9433) */
		reached[1][9417] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9433, 9418, 9433) */
		reached[1][9418] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4393: // STATE 9419 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9433:0:1 - 1)
		IfNotBlocked
		reached[1][9419] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9433, 9420, 9433) */
		reached[1][9420] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9433, 9421, 9433) */
		reached[1][9421] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4394: // STATE 9422 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9433:0:1 - 1)
		IfNotBlocked
		reached[1][9422] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9433, 9423, 9433) */
		reached[1][9423] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9433, 9424, 9433) */
		reached[1][9424] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4395: // STATE 9425 - mutant_243.pml:300 - [((START==ABORT))] (9433:0:1 - 1)
		IfNotBlocked
		reached[1][9425] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9433, 9426, 9433) */
		reached[1][9426] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9433, 9427, 9433) */
		reached[1][9427] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4396: // STATE 9429 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9433:0 - 1)
		IfNotBlocked
		reached[1][9429] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9433, 9431, 9433) */
		reached[1][9431] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4397: // STATE 9433 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9433] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4398: // STATE 9435 - mutant_243.pml:227 - [((_pid==0))] (9443:0:0 - 1)
		IfNotBlocked
		reached[1][9435] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9436, 9443) */
		reached[1][9436] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9442, 9443) */
		reached[1][9442] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4399: // STATE 9437 - mutant_243.pml:229 - [((_pid==1))] (9443:0:0 - 1)
		IfNotBlocked
		reached[1][9437] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9438, 9443) */
		reached[1][9438] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9442, 9443) */
		reached[1][9442] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4400: // STATE 9439 - mutant_243.pml:231 - [((_pid>1))] (9443:0:0 - 1)
		IfNotBlocked
		reached[1][9439] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9440, 9443) */
		reached[1][9440] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9442, 9443) */
		reached[1][9442] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4401: // STATE 9443 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9443] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4402: // STATE 9444 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9572:1 - 1)
		IfNotBlocked
		reached[1][9444] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9572, 9449, 9572) */
		reached[1][9449] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4403: // STATE 9447 - mutant_243.pml:312 - [(1)] (9572:0:1 - 1)
		IfNotBlocked
		reached[1][9447] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9572, 9449, 9572) */
		reached[1][9449] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4404: // STATE 9451 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9451] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4405: // STATE 9452 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9486:0:1 - 1)
		IfNotBlocked
		reached[1][9452] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9486, 9453, 9486) */
		reached[1][9453] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9486, 9454, 9486) */
		reached[1][9454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4406: // STATE 9470 - mutant_243.pml:336 - [.(goto)] (0:9486:0 - 6)
		IfNotBlocked
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4407: // STATE 9455 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9486:0:1 - 1)
		IfNotBlocked
		reached[1][9455] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9486, 9456, 9486) */
		reached[1][9456] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9486, 9457, 9486) */
		reached[1][9457] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4408: // STATE 9458 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9486:0:1 - 1)
		IfNotBlocked
		reached[1][9458] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9486, 9459, 9486) */
		reached[1][9459] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9486, 9460, 9486) */
		reached[1][9460] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4409: // STATE 9461 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9486:0:1 - 1)
		IfNotBlocked
		reached[1][9461] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9486, 9462, 9486) */
		reached[1][9462] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9486, 9463, 9486) */
		reached[1][9463] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4410: // STATE 9464 - mutant_243.pml:330 - [((PAUSE==ABORT))] (9486:0:1 - 1)
		IfNotBlocked
		reached[1][9464] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9486, 9465, 9486) */
		reached[1][9465] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9486, 9466, 9486) */
		reached[1][9466] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4411: // STATE 9468 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9486:0 - 1)
		IfNotBlocked
		reached[1][9468] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9486, 9470, 9486) */
		reached[1][9470] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4412: // STATE 9473 - mutant_243.pml:239 - [((_pid==0))] (9481:0:0 - 1)
		IfNotBlocked
		reached[1][9473] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9474, 9481) */
		reached[1][9474] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9480, 9481) */
		reached[1][9480] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4413: // STATE 9475 - mutant_243.pml:241 - [((_pid==1))] (9481:0:0 - 1)
		IfNotBlocked
		reached[1][9475] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9476, 9481) */
		reached[1][9476] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9480, 9481) */
		reached[1][9480] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4414: // STATE 9477 - mutant_243.pml:243 - [((_pid>1))] (9481:0:0 - 1)
		IfNotBlocked
		reached[1][9477] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9478, 9481) */
		reached[1][9478] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9480, 9481) */
		reached[1][9480] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4415: // STATE 9481 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9481] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4416: // STATE 9482 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9572:1 - 1)
		IfNotBlocked
		reached[1][9482] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9572, 9487, 9572) */
		reached[1][9487] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4417: // STATE 9485 - mutant_243.pml:341 - [(1)] (9572:0:1 - 1)
		IfNotBlocked
		reached[1][9485] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9572, 9487, 9572) */
		reached[1][9487] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4418: // STATE 9489 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9489] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4419: // STATE 9490 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9524:0:1 - 1)
		IfNotBlocked
		reached[1][9490] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9524, 9491, 9524) */
		reached[1][9491] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9524, 9492, 9524) */
		reached[1][9492] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4420: // STATE 9508 - mutant_243.pml:365 - [.(goto)] (0:9524:0 - 6)
		IfNotBlocked
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4421: // STATE 9493 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9524:0:1 - 1)
		IfNotBlocked
		reached[1][9493] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9524, 9494, 9524) */
		reached[1][9494] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9524, 9495, 9524) */
		reached[1][9495] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4422: // STATE 9496 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9524:0:1 - 1)
		IfNotBlocked
		reached[1][9496] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9524, 9497, 9524) */
		reached[1][9497] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9524, 9498, 9524) */
		reached[1][9498] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4423: // STATE 9499 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9524:0:1 - 1)
		IfNotBlocked
		reached[1][9499] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9524, 9500, 9524) */
		reached[1][9500] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9524, 9501, 9524) */
		reached[1][9501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4424: // STATE 9502 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (9524:0:1 - 1)
		IfNotBlocked
		reached[1][9502] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9524, 9503, 9524) */
		reached[1][9503] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9524, 9504, 9524) */
		reached[1][9504] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4425: // STATE 9506 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9524:0 - 1)
		IfNotBlocked
		reached[1][9506] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9524, 9508, 9524) */
		reached[1][9508] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4426: // STATE 9511 - mutant_243.pml:251 - [((_pid==0))] (9519:0:0 - 1)
		IfNotBlocked
		reached[1][9511] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9512, 9519) */
		reached[1][9512] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9518, 9519) */
		reached[1][9518] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4427: // STATE 9513 - mutant_243.pml:253 - [((_pid==1))] (9519:0:0 - 1)
		IfNotBlocked
		reached[1][9513] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9514, 9519) */
		reached[1][9514] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9518, 9519) */
		reached[1][9518] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4428: // STATE 9515 - mutant_243.pml:255 - [((_pid>1))] (9519:0:0 - 1)
		IfNotBlocked
		reached[1][9515] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9516, 9519) */
		reached[1][9516] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9518, 9519) */
		reached[1][9518] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4429: // STATE 9519 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9519] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4430: // STATE 9520 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9572:1 - 1)
		IfNotBlocked
		reached[1][9520] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9572, 9525, 9572) */
		reached[1][9525] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4431: // STATE 9523 - mutant_243.pml:370 - [(1)] (9572:0:1 - 1)
		IfNotBlocked
		reached[1][9523] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9572, 9525, 9572) */
		reached[1][9525] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4432: // STATE 9527 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9527] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4433: // STATE 9528 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9562:0:1 - 1)
		IfNotBlocked
		reached[1][9528] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9562, 9529, 9562) */
		reached[1][9529] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9562, 9530, 9562) */
		reached[1][9530] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4434: // STATE 9546 - mutant_243.pml:394 - [.(goto)] (0:9562:0 - 6)
		IfNotBlocked
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4435: // STATE 9531 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9562:0:1 - 1)
		IfNotBlocked
		reached[1][9531] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9562, 9532, 9562) */
		reached[1][9532] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9562, 9533, 9562) */
		reached[1][9533] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4436: // STATE 9534 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9562:0:1 - 1)
		IfNotBlocked
		reached[1][9534] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9562, 9535, 9562) */
		reached[1][9535] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9562, 9536, 9562) */
		reached[1][9536] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4437: // STATE 9537 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9562:0:1 - 1)
		IfNotBlocked
		reached[1][9537] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9562, 9538, 9562) */
		reached[1][9538] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9562, 9539, 9562) */
		reached[1][9539] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4438: // STATE 9540 - mutant_243.pml:388 - [((STOP==ABORT))] (9562:0:1 - 1)
		IfNotBlocked
		reached[1][9540] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9562, 9541, 9562) */
		reached[1][9541] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9562, 9542, 9562) */
		reached[1][9542] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4439: // STATE 9544 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9562:0 - 1)
		IfNotBlocked
		reached[1][9544] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9562, 9546, 9562) */
		reached[1][9546] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4440: // STATE 9549 - mutant_243.pml:263 - [((_pid==0))] (9557:0:0 - 1)
		IfNotBlocked
		reached[1][9549] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9550, 9557) */
		reached[1][9550] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9556, 9557) */
		reached[1][9556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4441: // STATE 9551 - mutant_243.pml:265 - [((_pid==1))] (9557:0:0 - 1)
		IfNotBlocked
		reached[1][9551] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9552, 9557) */
		reached[1][9552] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9556, 9557) */
		reached[1][9556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4442: // STATE 9553 - mutant_243.pml:267 - [((_pid>1))] (9557:0:0 - 1)
		IfNotBlocked
		reached[1][9553] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9554, 9557) */
		reached[1][9554] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9556, 9557) */
		reached[1][9556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4443: // STATE 9557 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9557] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4444: // STATE 9558 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9572:1 - 1)
		IfNotBlocked
		reached[1][9558] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9572, 9563, 9572) */
		reached[1][9563] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4445: // STATE 9561 - mutant_243.pml:399 - [(1)] (9572:0:1 - 1)
		IfNotBlocked
		reached[1][9561] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9572, 9563, 9572) */
		reached[1][9563] = 1;
		;
		/* merge: .(goto)(9572, 9566, 9572) */
		reached[1][9566] = 1;
		;
		/* merge: j = (j+1)(9572, 9568, 9572) */
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4446: // STATE 9568 - mutant_243.pml:435 - [j = (j+1)] (0:9572:1 - 13)
		IfNotBlocked
		reached[1][9568] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9573, 9572) */
		reached[1][9573] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4447: // STATE 9570 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9570] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4448: // STATE 9577 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9577] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4449: // STATE 9578 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9578] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4450: // STATE 9579 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9579] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4451: // STATE 9580 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (9600:0:1 - 1)
		IfNotBlocked
		reached[1][9580] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9600, 9581, 9600) */
		reached[1][9581] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9600, 9582, 9600) */
		reached[1][9582] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4452: // STATE 9598 - mutant_243.pml:306 - [.(goto)] (0:9600:0 - 6)
		IfNotBlocked
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4453: // STATE 9583 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9600:0:1 - 1)
		IfNotBlocked
		reached[1][9583] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9600, 9584, 9600) */
		reached[1][9584] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9600, 9585, 9600) */
		reached[1][9585] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4454: // STATE 9586 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9600:0:1 - 1)
		IfNotBlocked
		reached[1][9586] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9600, 9587, 9600) */
		reached[1][9587] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9600, 9588, 9600) */
		reached[1][9588] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4455: // STATE 9589 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9600:0:1 - 1)
		IfNotBlocked
		reached[1][9589] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9600, 9590, 9600) */
		reached[1][9590] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9600, 9591, 9600) */
		reached[1][9591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4456: // STATE 9592 - mutant_243.pml:300 - [((START==ABORT))] (9600:0:1 - 1)
		IfNotBlocked
		reached[1][9592] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9600, 9593, 9600) */
		reached[1][9593] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9600, 9594, 9600) */
		reached[1][9594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4457: // STATE 9596 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9600:0 - 1)
		IfNotBlocked
		reached[1][9596] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9600, 9598, 9600) */
		reached[1][9598] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4458: // STATE 9600 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9600] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4459: // STATE 9602 - mutant_243.pml:227 - [((_pid==0))] (9610:0:0 - 1)
		IfNotBlocked
		reached[1][9602] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9603, 9610) */
		reached[1][9603] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9609, 9610) */
		reached[1][9609] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4460: // STATE 9604 - mutant_243.pml:229 - [((_pid==1))] (9610:0:0 - 1)
		IfNotBlocked
		reached[1][9604] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9605, 9610) */
		reached[1][9605] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9609, 9610) */
		reached[1][9609] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4461: // STATE 9606 - mutant_243.pml:231 - [((_pid>1))] (9610:0:0 - 1)
		IfNotBlocked
		reached[1][9606] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9607, 9610) */
		reached[1][9607] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9609, 9610) */
		reached[1][9609] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4462: // STATE 9610 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9610] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4463: // STATE 9611 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9739:1 - 1)
		IfNotBlocked
		reached[1][9611] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9739, 9616, 9739) */
		reached[1][9616] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4464: // STATE 9614 - mutant_243.pml:312 - [(1)] (9739:0:1 - 1)
		IfNotBlocked
		reached[1][9614] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9739, 9616, 9739) */
		reached[1][9616] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4465: // STATE 9618 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9618] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4466: // STATE 9619 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9653:0:1 - 1)
		IfNotBlocked
		reached[1][9619] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9653, 9620, 9653) */
		reached[1][9620] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9653, 9621, 9653) */
		reached[1][9621] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4467: // STATE 9637 - mutant_243.pml:336 - [.(goto)] (0:9653:0 - 6)
		IfNotBlocked
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4468: // STATE 9622 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9653:0:1 - 1)
		IfNotBlocked
		reached[1][9622] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9653, 9623, 9653) */
		reached[1][9623] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9653, 9624, 9653) */
		reached[1][9624] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4469: // STATE 9625 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9653:0:1 - 1)
		IfNotBlocked
		reached[1][9625] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9653, 9626, 9653) */
		reached[1][9626] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9653, 9627, 9653) */
		reached[1][9627] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4470: // STATE 9628 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9653:0:1 - 1)
		IfNotBlocked
		reached[1][9628] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9653, 9629, 9653) */
		reached[1][9629] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9653, 9630, 9653) */
		reached[1][9630] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4471: // STATE 9631 - mutant_243.pml:330 - [((PAUSE==ABORT))] (9653:0:1 - 1)
		IfNotBlocked
		reached[1][9631] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9653, 9632, 9653) */
		reached[1][9632] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9653, 9633, 9653) */
		reached[1][9633] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4472: // STATE 9635 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9653:0 - 1)
		IfNotBlocked
		reached[1][9635] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9653, 9637, 9653) */
		reached[1][9637] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4473: // STATE 9640 - mutant_243.pml:239 - [((_pid==0))] (9648:0:0 - 1)
		IfNotBlocked
		reached[1][9640] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9641, 9648) */
		reached[1][9641] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9647, 9648) */
		reached[1][9647] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4474: // STATE 9642 - mutant_243.pml:241 - [((_pid==1))] (9648:0:0 - 1)
		IfNotBlocked
		reached[1][9642] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9643, 9648) */
		reached[1][9643] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9647, 9648) */
		reached[1][9647] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4475: // STATE 9644 - mutant_243.pml:243 - [((_pid>1))] (9648:0:0 - 1)
		IfNotBlocked
		reached[1][9644] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9645, 9648) */
		reached[1][9645] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9647, 9648) */
		reached[1][9647] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4476: // STATE 9648 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9648] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4477: // STATE 9649 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9739:1 - 1)
		IfNotBlocked
		reached[1][9649] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9739, 9654, 9739) */
		reached[1][9654] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4478: // STATE 9652 - mutant_243.pml:341 - [(1)] (9739:0:1 - 1)
		IfNotBlocked
		reached[1][9652] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9739, 9654, 9739) */
		reached[1][9654] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4479: // STATE 9656 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9656] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4480: // STATE 9657 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9691:0:1 - 1)
		IfNotBlocked
		reached[1][9657] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9691, 9658, 9691) */
		reached[1][9658] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9691, 9659, 9691) */
		reached[1][9659] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4481: // STATE 9675 - mutant_243.pml:365 - [.(goto)] (0:9691:0 - 6)
		IfNotBlocked
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4482: // STATE 9660 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9691:0:1 - 1)
		IfNotBlocked
		reached[1][9660] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9691, 9661, 9691) */
		reached[1][9661] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9691, 9662, 9691) */
		reached[1][9662] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4483: // STATE 9663 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9691:0:1 - 1)
		IfNotBlocked
		reached[1][9663] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9691, 9664, 9691) */
		reached[1][9664] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9691, 9665, 9691) */
		reached[1][9665] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4484: // STATE 9666 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9691:0:1 - 1)
		IfNotBlocked
		reached[1][9666] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9691, 9667, 9691) */
		reached[1][9667] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9691, 9668, 9691) */
		reached[1][9668] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4485: // STATE 9669 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (9691:0:1 - 1)
		IfNotBlocked
		reached[1][9669] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9691, 9670, 9691) */
		reached[1][9670] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9691, 9671, 9691) */
		reached[1][9671] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4486: // STATE 9673 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9691:0 - 1)
		IfNotBlocked
		reached[1][9673] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9691, 9675, 9691) */
		reached[1][9675] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4487: // STATE 9678 - mutant_243.pml:251 - [((_pid==0))] (9686:0:0 - 1)
		IfNotBlocked
		reached[1][9678] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9679, 9686) */
		reached[1][9679] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9685, 9686) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4488: // STATE 9680 - mutant_243.pml:253 - [((_pid==1))] (9686:0:0 - 1)
		IfNotBlocked
		reached[1][9680] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9681, 9686) */
		reached[1][9681] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9685, 9686) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4489: // STATE 9682 - mutant_243.pml:255 - [((_pid>1))] (9686:0:0 - 1)
		IfNotBlocked
		reached[1][9682] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9683, 9686) */
		reached[1][9683] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9685, 9686) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4490: // STATE 9686 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9686] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4491: // STATE 9687 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9739:1 - 1)
		IfNotBlocked
		reached[1][9687] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9739, 9692, 9739) */
		reached[1][9692] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4492: // STATE 9690 - mutant_243.pml:370 - [(1)] (9739:0:1 - 1)
		IfNotBlocked
		reached[1][9690] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9739, 9692, 9739) */
		reached[1][9692] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4493: // STATE 9694 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9694] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4494: // STATE 9695 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9729:0:1 - 1)
		IfNotBlocked
		reached[1][9695] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9729, 9696, 9729) */
		reached[1][9696] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9729, 9697, 9729) */
		reached[1][9697] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4495: // STATE 9713 - mutant_243.pml:394 - [.(goto)] (0:9729:0 - 6)
		IfNotBlocked
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4496: // STATE 9698 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9729:0:1 - 1)
		IfNotBlocked
		reached[1][9698] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9729, 9699, 9729) */
		reached[1][9699] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9729, 9700, 9729) */
		reached[1][9700] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4497: // STATE 9701 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9729:0:1 - 1)
		IfNotBlocked
		reached[1][9701] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9729, 9702, 9729) */
		reached[1][9702] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9729, 9703, 9729) */
		reached[1][9703] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4498: // STATE 9704 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9729:0:1 - 1)
		IfNotBlocked
		reached[1][9704] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9729, 9705, 9729) */
		reached[1][9705] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9729, 9706, 9729) */
		reached[1][9706] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4499: // STATE 9707 - mutant_243.pml:388 - [((STOP==ABORT))] (9729:0:1 - 1)
		IfNotBlocked
		reached[1][9707] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9729, 9708, 9729) */
		reached[1][9708] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9729, 9709, 9729) */
		reached[1][9709] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4500: // STATE 9711 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9729:0 - 1)
		IfNotBlocked
		reached[1][9711] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9729, 9713, 9729) */
		reached[1][9713] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4501: // STATE 9716 - mutant_243.pml:263 - [((_pid==0))] (9724:0:0 - 1)
		IfNotBlocked
		reached[1][9716] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9717, 9724) */
		reached[1][9717] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9723, 9724) */
		reached[1][9723] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4502: // STATE 9718 - mutant_243.pml:265 - [((_pid==1))] (9724:0:0 - 1)
		IfNotBlocked
		reached[1][9718] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9719, 9724) */
		reached[1][9719] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9723, 9724) */
		reached[1][9723] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4503: // STATE 9720 - mutant_243.pml:267 - [((_pid>1))] (9724:0:0 - 1)
		IfNotBlocked
		reached[1][9720] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9721, 9724) */
		reached[1][9721] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9723, 9724) */
		reached[1][9723] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4504: // STATE 9724 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9724] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4505: // STATE 9725 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9739:1 - 1)
		IfNotBlocked
		reached[1][9725] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9739, 9730, 9739) */
		reached[1][9730] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4506: // STATE 9728 - mutant_243.pml:399 - [(1)] (9739:0:1 - 1)
		IfNotBlocked
		reached[1][9728] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9739, 9730, 9739) */
		reached[1][9730] = 1;
		;
		/* merge: .(goto)(9739, 9733, 9739) */
		reached[1][9733] = 1;
		;
		/* merge: j = (j-1)(9739, 9735, 9739) */
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4507: // STATE 9735 - mutant_243.pml:446 - [j = (j-1)] (0:9739:1 - 13)
		IfNotBlocked
		reached[1][9735] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9740, 9739) */
		reached[1][9740] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4508: // STATE 9737 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9737] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4509: // STATE 9747 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9747] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 4510: // STATE 9748 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9748] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4511: // STATE 9749 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9749] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4512: // STATE 9750 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (9770:0:1 - 1)
		IfNotBlocked
		reached[1][9750] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9770, 9751, 9770) */
		reached[1][9751] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9770, 9752, 9770) */
		reached[1][9752] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4513: // STATE 9768 - mutant_243.pml:306 - [.(goto)] (0:9770:0 - 6)
		IfNotBlocked
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4514: // STATE 9753 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9770:0:1 - 1)
		IfNotBlocked
		reached[1][9753] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9770, 9754, 9770) */
		reached[1][9754] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9770, 9755, 9770) */
		reached[1][9755] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4515: // STATE 9756 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9770:0:1 - 1)
		IfNotBlocked
		reached[1][9756] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9770, 9757, 9770) */
		reached[1][9757] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9770, 9758, 9770) */
		reached[1][9758] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4516: // STATE 9759 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9770:0:1 - 1)
		IfNotBlocked
		reached[1][9759] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9770, 9760, 9770) */
		reached[1][9760] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9770, 9761, 9770) */
		reached[1][9761] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4517: // STATE 9762 - mutant_243.pml:300 - [((START==ABORT))] (9770:0:1 - 1)
		IfNotBlocked
		reached[1][9762] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9770, 9763, 9770) */
		reached[1][9763] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9770, 9764, 9770) */
		reached[1][9764] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4518: // STATE 9766 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9770:0 - 1)
		IfNotBlocked
		reached[1][9766] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9770, 9768, 9770) */
		reached[1][9768] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4519: // STATE 9770 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9770] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4520: // STATE 9772 - mutant_243.pml:227 - [((_pid==0))] (9780:0:0 - 1)
		IfNotBlocked
		reached[1][9772] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9773, 9780) */
		reached[1][9773] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9779, 9780) */
		reached[1][9779] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4521: // STATE 9774 - mutant_243.pml:229 - [((_pid==1))] (9780:0:0 - 1)
		IfNotBlocked
		reached[1][9774] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9775, 9780) */
		reached[1][9775] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9779, 9780) */
		reached[1][9779] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4522: // STATE 9776 - mutant_243.pml:231 - [((_pid>1))] (9780:0:0 - 1)
		IfNotBlocked
		reached[1][9776] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9777, 9780) */
		reached[1][9777] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9779, 9780) */
		reached[1][9779] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4523: // STATE 9780 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9780] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4524: // STATE 9781 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9909:1 - 1)
		IfNotBlocked
		reached[1][9781] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9909, 9786, 9909) */
		reached[1][9786] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4525: // STATE 9784 - mutant_243.pml:312 - [(1)] (9909:0:1 - 1)
		IfNotBlocked
		reached[1][9784] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9909, 9786, 9909) */
		reached[1][9786] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4526: // STATE 9788 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9788] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4527: // STATE 9789 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9789] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9823, 9790, 9823) */
		reached[1][9790] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9823, 9791, 9823) */
		reached[1][9791] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4528: // STATE 9807 - mutant_243.pml:336 - [.(goto)] (0:9823:0 - 6)
		IfNotBlocked
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4529: // STATE 9792 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9792] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9823, 9793, 9823) */
		reached[1][9793] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9823, 9794, 9823) */
		reached[1][9794] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4530: // STATE 9795 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9795] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9823, 9796, 9823) */
		reached[1][9796] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9823, 9797, 9823) */
		reached[1][9797] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4531: // STATE 9798 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9798] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9823, 9799, 9823) */
		reached[1][9799] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9823, 9800, 9823) */
		reached[1][9800] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4532: // STATE 9801 - mutant_243.pml:330 - [((PAUSE==ABORT))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9801] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9823, 9802, 9823) */
		reached[1][9802] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9823, 9803, 9823) */
		reached[1][9803] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4533: // STATE 9805 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9823:0 - 1)
		IfNotBlocked
		reached[1][9805] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9823, 9807, 9823) */
		reached[1][9807] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4534: // STATE 9810 - mutant_243.pml:239 - [((_pid==0))] (9818:0:0 - 1)
		IfNotBlocked
		reached[1][9810] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9811, 9818) */
		reached[1][9811] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9817, 9818) */
		reached[1][9817] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4535: // STATE 9812 - mutant_243.pml:241 - [((_pid==1))] (9818:0:0 - 1)
		IfNotBlocked
		reached[1][9812] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9813, 9818) */
		reached[1][9813] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9817, 9818) */
		reached[1][9817] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4536: // STATE 9814 - mutant_243.pml:243 - [((_pid>1))] (9818:0:0 - 1)
		IfNotBlocked
		reached[1][9814] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9815, 9818) */
		reached[1][9815] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9817, 9818) */
		reached[1][9817] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4537: // STATE 9818 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9818] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4538: // STATE 9819 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9909:1 - 1)
		IfNotBlocked
		reached[1][9819] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9909, 9824, 9909) */
		reached[1][9824] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4539: // STATE 9822 - mutant_243.pml:341 - [(1)] (9909:0:1 - 1)
		IfNotBlocked
		reached[1][9822] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9909, 9824, 9909) */
		reached[1][9824] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4540: // STATE 9826 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9826] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4541: // STATE 9827 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9861:0:1 - 1)
		IfNotBlocked
		reached[1][9827] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9861, 9828, 9861) */
		reached[1][9828] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9861, 9829, 9861) */
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4542: // STATE 9845 - mutant_243.pml:365 - [.(goto)] (0:9861:0 - 6)
		IfNotBlocked
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4543: // STATE 9830 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9861:0:1 - 1)
		IfNotBlocked
		reached[1][9830] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9861, 9831, 9861) */
		reached[1][9831] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9861, 9832, 9861) */
		reached[1][9832] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4544: // STATE 9833 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9861:0:1 - 1)
		IfNotBlocked
		reached[1][9833] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9861, 9834, 9861) */
		reached[1][9834] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9861, 9835, 9861) */
		reached[1][9835] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4545: // STATE 9836 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9861:0:1 - 1)
		IfNotBlocked
		reached[1][9836] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9861, 9837, 9861) */
		reached[1][9837] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9861, 9838, 9861) */
		reached[1][9838] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4546: // STATE 9839 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (9861:0:1 - 1)
		IfNotBlocked
		reached[1][9839] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9861, 9840, 9861) */
		reached[1][9840] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9861, 9841, 9861) */
		reached[1][9841] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4547: // STATE 9843 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9861:0 - 1)
		IfNotBlocked
		reached[1][9843] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9861, 9845, 9861) */
		reached[1][9845] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4548: // STATE 9848 - mutant_243.pml:251 - [((_pid==0))] (9856:0:0 - 1)
		IfNotBlocked
		reached[1][9848] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9849, 9856) */
		reached[1][9849] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9855, 9856) */
		reached[1][9855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4549: // STATE 9850 - mutant_243.pml:253 - [((_pid==1))] (9856:0:0 - 1)
		IfNotBlocked
		reached[1][9850] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9851, 9856) */
		reached[1][9851] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9855, 9856) */
		reached[1][9855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4550: // STATE 9852 - mutant_243.pml:255 - [((_pid>1))] (9856:0:0 - 1)
		IfNotBlocked
		reached[1][9852] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9853, 9856) */
		reached[1][9853] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9855, 9856) */
		reached[1][9855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4551: // STATE 9856 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9856] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4552: // STATE 9857 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9909:1 - 1)
		IfNotBlocked
		reached[1][9857] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9909, 9862, 9909) */
		reached[1][9862] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4553: // STATE 9860 - mutant_243.pml:370 - [(1)] (9909:0:1 - 1)
		IfNotBlocked
		reached[1][9860] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9909, 9862, 9909) */
		reached[1][9862] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4554: // STATE 9864 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9864] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4555: // STATE 9865 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9899:0:1 - 1)
		IfNotBlocked
		reached[1][9865] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(9899, 9866, 9899) */
		reached[1][9866] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(9899, 9867, 9899) */
		reached[1][9867] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4556: // STATE 9883 - mutant_243.pml:394 - [.(goto)] (0:9899:0 - 6)
		IfNotBlocked
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4557: // STATE 9868 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9899:0:1 - 1)
		IfNotBlocked
		reached[1][9868] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9899, 9869, 9899) */
		reached[1][9869] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(9899, 9870, 9899) */
		reached[1][9870] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4558: // STATE 9871 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9899:0:1 - 1)
		IfNotBlocked
		reached[1][9871] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9899, 9872, 9899) */
		reached[1][9872] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9899, 9873, 9899) */
		reached[1][9873] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4559: // STATE 9874 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9899:0:1 - 1)
		IfNotBlocked
		reached[1][9874] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9899, 9875, 9899) */
		reached[1][9875] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(9899, 9876, 9899) */
		reached[1][9876] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4560: // STATE 9877 - mutant_243.pml:388 - [((STOP==ABORT))] (9899:0:1 - 1)
		IfNotBlocked
		reached[1][9877] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(9899, 9878, 9899) */
		reached[1][9878] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(9899, 9879, 9899) */
		reached[1][9879] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4561: // STATE 9881 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:9899:0 - 1)
		IfNotBlocked
		reached[1][9881] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(9899, 9883, 9899) */
		reached[1][9883] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4562: // STATE 9886 - mutant_243.pml:263 - [((_pid==0))] (9894:0:0 - 1)
		IfNotBlocked
		reached[1][9886] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9887, 9894) */
		reached[1][9887] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9893, 9894) */
		reached[1][9893] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4563: // STATE 9888 - mutant_243.pml:265 - [((_pid==1))] (9894:0:0 - 1)
		IfNotBlocked
		reached[1][9888] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9889, 9894) */
		reached[1][9889] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9893, 9894) */
		reached[1][9893] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4564: // STATE 9890 - mutant_243.pml:267 - [((_pid>1))] (9894:0:0 - 1)
		IfNotBlocked
		reached[1][9890] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9891, 9894) */
		reached[1][9891] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9893, 9894) */
		reached[1][9893] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4565: // STATE 9894 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9894] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4566: // STATE 9895 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9909:1 - 1)
		IfNotBlocked
		reached[1][9895] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9909, 9900, 9909) */
		reached[1][9900] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4567: // STATE 9898 - mutant_243.pml:399 - [(1)] (9909:0:1 - 1)
		IfNotBlocked
		reached[1][9898] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9909, 9900, 9909) */
		reached[1][9900] = 1;
		;
		/* merge: .(goto)(9909, 9903, 9909) */
		reached[1][9903] = 1;
		;
		/* merge: j = (j+1)(9909, 9905, 9909) */
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4568: // STATE 9905 - mutant_243.pml:435 - [j = (j+1)] (0:9909:1 - 13)
		IfNotBlocked
		reached[1][9905] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9910, 9909) */
		reached[1][9910] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4569: // STATE 9907 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9907] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4570: // STATE 9913 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9913] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4571: // STATE 9914 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9914] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4572: // STATE 9915 - mutant_243.pml:227 - [((_pid==0))] (9923:0:0 - 1)
		IfNotBlocked
		reached[1][9915] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 9916, 9923) */
		reached[1][9916] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9922, 9923) */
		reached[1][9922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4573: // STATE 9917 - mutant_243.pml:229 - [((_pid==1))] (9923:0:0 - 1)
		IfNotBlocked
		reached[1][9917] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 9918, 9923) */
		reached[1][9918] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9922, 9923) */
		reached[1][9922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4574: // STATE 9919 - mutant_243.pml:231 - [((_pid>1))] (9923:0:0 - 1)
		IfNotBlocked
		reached[1][9919] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 9920, 9923) */
		reached[1][9920] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9922, 9923) */
		reached[1][9922] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4575: // STATE 9923 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9923] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4576: // STATE 9924 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:9968:1 - 1)
		IfNotBlocked
		reached[1][9924] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9968, 9963, 9968) */
		reached[1][9963] = 1;
		;
		/* merge: j = (j+1)(9968, 9964, 9968) */
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9969, 9968) */
		reached[1][9969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4577: // STATE 9926 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9926] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4578: // STATE 9927 - mutant_243.pml:251 - [((_pid==0))] (9935:0:0 - 1)
		IfNotBlocked
		reached[1][9927] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9928, 9935) */
		reached[1][9928] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9934, 9935) */
		reached[1][9934] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4579: // STATE 9929 - mutant_243.pml:253 - [((_pid==1))] (9935:0:0 - 1)
		IfNotBlocked
		reached[1][9929] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 9930, 9935) */
		reached[1][9930] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9934, 9935) */
		reached[1][9934] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4580: // STATE 9931 - mutant_243.pml:255 - [((_pid>1))] (9935:0:0 - 1)
		IfNotBlocked
		reached[1][9931] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 9932, 9935) */
		reached[1][9932] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9934, 9935) */
		reached[1][9934] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4581: // STATE 9935 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9935] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4582: // STATE 9936 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:9968:1 - 1)
		IfNotBlocked
		reached[1][9936] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9968, 9963, 9968) */
		reached[1][9963] = 1;
		;
		/* merge: j = (j+1)(9968, 9964, 9968) */
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9969, 9968) */
		reached[1][9969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4583: // STATE 9938 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9938] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4584: // STATE 9939 - mutant_243.pml:239 - [((_pid==0))] (9947:0:0 - 1)
		IfNotBlocked
		reached[1][9939] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9940, 9947) */
		reached[1][9940] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9946, 9947) */
		reached[1][9946] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4585: // STATE 9941 - mutant_243.pml:241 - [((_pid==1))] (9947:0:0 - 1)
		IfNotBlocked
		reached[1][9941] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 9942, 9947) */
		reached[1][9942] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9946, 9947) */
		reached[1][9946] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4586: // STATE 9943 - mutant_243.pml:243 - [((_pid>1))] (9947:0:0 - 1)
		IfNotBlocked
		reached[1][9943] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 9944, 9947) */
		reached[1][9944] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9946, 9947) */
		reached[1][9946] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4587: // STATE 9947 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9947] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4588: // STATE 9948 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:9968:1 - 1)
		IfNotBlocked
		reached[1][9948] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9968, 9963, 9968) */
		reached[1][9963] = 1;
		;
		/* merge: j = (j+1)(9968, 9964, 9968) */
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9969, 9968) */
		reached[1][9969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4589: // STATE 9950 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9950] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4590: // STATE 9951 - mutant_243.pml:263 - [((_pid==0))] (9959:0:0 - 1)
		IfNotBlocked
		reached[1][9951] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 9952, 9959) */
		reached[1][9952] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9958, 9959) */
		reached[1][9958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4591: // STATE 9953 - mutant_243.pml:265 - [((_pid==1))] (9959:0:0 - 1)
		IfNotBlocked
		reached[1][9953] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 9954, 9959) */
		reached[1][9954] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9958, 9959) */
		reached[1][9958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4592: // STATE 9955 - mutant_243.pml:267 - [((_pid>1))] (9959:0:0 - 1)
		IfNotBlocked
		reached[1][9955] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 9956, 9959) */
		reached[1][9956] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 9958, 9959) */
		reached[1][9958] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4593: // STATE 9959 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][9959] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4594: // STATE 9960 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:9968:1 - 1)
		IfNotBlocked
		reached[1][9960] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(9968, 9963, 9968) */
		reached[1][9963] = 1;
		;
		/* merge: j = (j+1)(9968, 9964, 9968) */
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9969, 9968) */
		reached[1][9969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4595: // STATE 9964 - mutant_243.pml:475 - [j = (j+1)] (0:9968:1 - 5)
		IfNotBlocked
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9969, 9968) */
		reached[1][9969] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4596: // STATE 9966 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9966] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4597: // STATE 9977 - mutant_243.pml:554 - [((9==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9977] = 1;
		if (!((9==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4598: // STATE 9978 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9978] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4599: // STATE 9979 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9979] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 4600: // STATE 9980 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9980] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4601: // STATE 9982 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9982] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4602: // STATE 9983 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9983] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4603: // STATE 9984 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9984] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4604: // STATE 9985 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9985] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4605: // STATE 9986 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10006:0:1 - 1)
		IfNotBlocked
		reached[1][9986] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10006, 9987, 10006) */
		reached[1][9987] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10006, 9988, 10006) */
		reached[1][9988] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4606: // STATE 10004 - mutant_243.pml:306 - [.(goto)] (0:10006:0 - 6)
		IfNotBlocked
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4607: // STATE 9989 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10006:0:1 - 1)
		IfNotBlocked
		reached[1][9989] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10006, 9990, 10006) */
		reached[1][9990] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10006, 9991, 10006) */
		reached[1][9991] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4608: // STATE 9992 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10006:0:1 - 1)
		IfNotBlocked
		reached[1][9992] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10006, 9993, 10006) */
		reached[1][9993] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10006, 9994, 10006) */
		reached[1][9994] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4609: // STATE 9995 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10006:0:1 - 1)
		IfNotBlocked
		reached[1][9995] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10006, 9996, 10006) */
		reached[1][9996] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10006, 9997, 10006) */
		reached[1][9997] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4610: // STATE 9998 - mutant_243.pml:300 - [((START==ABORT))] (10006:0:1 - 1)
		IfNotBlocked
		reached[1][9998] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10006, 9999, 10006) */
		reached[1][9999] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10006, 10000, 10006) */
		reached[1][10000] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4611: // STATE 10002 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10006:0 - 1)
		IfNotBlocked
		reached[1][10002] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10006, 10004, 10006) */
		reached[1][10004] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4612: // STATE 10006 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10006] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4613: // STATE 10008 - mutant_243.pml:227 - [((_pid==0))] (10016:0:0 - 1)
		IfNotBlocked
		reached[1][10008] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10009, 10016) */
		reached[1][10009] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10015, 10016) */
		reached[1][10015] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4614: // STATE 10010 - mutant_243.pml:229 - [((_pid==1))] (10016:0:0 - 1)
		IfNotBlocked
		reached[1][10010] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10011, 10016) */
		reached[1][10011] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10015, 10016) */
		reached[1][10015] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4615: // STATE 10012 - mutant_243.pml:231 - [((_pid>1))] (10016:0:0 - 1)
		IfNotBlocked
		reached[1][10012] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10013, 10016) */
		reached[1][10013] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10015, 10016) */
		reached[1][10015] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4616: // STATE 10016 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10016] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4617: // STATE 10017 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10145:1 - 1)
		IfNotBlocked
		reached[1][10017] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10145, 10022, 10145) */
		reached[1][10022] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4618: // STATE 10020 - mutant_243.pml:312 - [(1)] (10145:0:1 - 1)
		IfNotBlocked
		reached[1][10020] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10145, 10022, 10145) */
		reached[1][10022] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4619: // STATE 10024 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10024] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4620: // STATE 10025 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10059:0:1 - 1)
		IfNotBlocked
		reached[1][10025] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10059, 10026, 10059) */
		reached[1][10026] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10059, 10027, 10059) */
		reached[1][10027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4621: // STATE 10043 - mutant_243.pml:336 - [.(goto)] (0:10059:0 - 6)
		IfNotBlocked
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4622: // STATE 10028 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10059:0:1 - 1)
		IfNotBlocked
		reached[1][10028] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10059, 10029, 10059) */
		reached[1][10029] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10059, 10030, 10059) */
		reached[1][10030] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4623: // STATE 10031 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10059:0:1 - 1)
		IfNotBlocked
		reached[1][10031] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10059, 10032, 10059) */
		reached[1][10032] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10059, 10033, 10059) */
		reached[1][10033] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4624: // STATE 10034 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10059:0:1 - 1)
		IfNotBlocked
		reached[1][10034] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10059, 10035, 10059) */
		reached[1][10035] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10059, 10036, 10059) */
		reached[1][10036] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4625: // STATE 10037 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10059:0:1 - 1)
		IfNotBlocked
		reached[1][10037] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10059, 10038, 10059) */
		reached[1][10038] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10059, 10039, 10059) */
		reached[1][10039] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4626: // STATE 10041 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10059:0 - 1)
		IfNotBlocked
		reached[1][10041] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10059, 10043, 10059) */
		reached[1][10043] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4627: // STATE 10046 - mutant_243.pml:239 - [((_pid==0))] (10054:0:0 - 1)
		IfNotBlocked
		reached[1][10046] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10047, 10054) */
		reached[1][10047] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10053, 10054) */
		reached[1][10053] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4628: // STATE 10048 - mutant_243.pml:241 - [((_pid==1))] (10054:0:0 - 1)
		IfNotBlocked
		reached[1][10048] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10049, 10054) */
		reached[1][10049] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10053, 10054) */
		reached[1][10053] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4629: // STATE 10050 - mutant_243.pml:243 - [((_pid>1))] (10054:0:0 - 1)
		IfNotBlocked
		reached[1][10050] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10051, 10054) */
		reached[1][10051] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10053, 10054) */
		reached[1][10053] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4630: // STATE 10054 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10054] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4631: // STATE 10055 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10145:1 - 1)
		IfNotBlocked
		reached[1][10055] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10145, 10060, 10145) */
		reached[1][10060] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4632: // STATE 10058 - mutant_243.pml:341 - [(1)] (10145:0:1 - 1)
		IfNotBlocked
		reached[1][10058] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10145, 10060, 10145) */
		reached[1][10060] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4633: // STATE 10062 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10062] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4634: // STATE 10063 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10097:0:1 - 1)
		IfNotBlocked
		reached[1][10063] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10097, 10064, 10097) */
		reached[1][10064] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10097, 10065, 10097) */
		reached[1][10065] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4635: // STATE 10081 - mutant_243.pml:365 - [.(goto)] (0:10097:0 - 6)
		IfNotBlocked
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4636: // STATE 10066 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10097:0:1 - 1)
		IfNotBlocked
		reached[1][10066] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10097, 10067, 10097) */
		reached[1][10067] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10097, 10068, 10097) */
		reached[1][10068] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4637: // STATE 10069 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10097:0:1 - 1)
		IfNotBlocked
		reached[1][10069] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10097, 10070, 10097) */
		reached[1][10070] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10097, 10071, 10097) */
		reached[1][10071] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4638: // STATE 10072 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10097:0:1 - 1)
		IfNotBlocked
		reached[1][10072] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10097, 10073, 10097) */
		reached[1][10073] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10097, 10074, 10097) */
		reached[1][10074] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4639: // STATE 10075 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (10097:0:1 - 1)
		IfNotBlocked
		reached[1][10075] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10097, 10076, 10097) */
		reached[1][10076] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10097, 10077, 10097) */
		reached[1][10077] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4640: // STATE 10079 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10097:0 - 1)
		IfNotBlocked
		reached[1][10079] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10097, 10081, 10097) */
		reached[1][10081] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4641: // STATE 10084 - mutant_243.pml:251 - [((_pid==0))] (10092:0:0 - 1)
		IfNotBlocked
		reached[1][10084] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10085, 10092) */
		reached[1][10085] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10091, 10092) */
		reached[1][10091] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4642: // STATE 10086 - mutant_243.pml:253 - [((_pid==1))] (10092:0:0 - 1)
		IfNotBlocked
		reached[1][10086] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10087, 10092) */
		reached[1][10087] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10091, 10092) */
		reached[1][10091] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4643: // STATE 10088 - mutant_243.pml:255 - [((_pid>1))] (10092:0:0 - 1)
		IfNotBlocked
		reached[1][10088] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10089, 10092) */
		reached[1][10089] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10091, 10092) */
		reached[1][10091] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4644: // STATE 10092 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10092] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4645: // STATE 10093 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10145:1 - 1)
		IfNotBlocked
		reached[1][10093] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10145, 10098, 10145) */
		reached[1][10098] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4646: // STATE 10096 - mutant_243.pml:370 - [(1)] (10145:0:1 - 1)
		IfNotBlocked
		reached[1][10096] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10145, 10098, 10145) */
		reached[1][10098] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4647: // STATE 10100 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10100] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4648: // STATE 10101 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10135:0:1 - 1)
		IfNotBlocked
		reached[1][10101] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10135, 10102, 10135) */
		reached[1][10102] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10135, 10103, 10135) */
		reached[1][10103] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4649: // STATE 10119 - mutant_243.pml:394 - [.(goto)] (0:10135:0 - 6)
		IfNotBlocked
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4650: // STATE 10104 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10135:0:1 - 1)
		IfNotBlocked
		reached[1][10104] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10135, 10105, 10135) */
		reached[1][10105] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10135, 10106, 10135) */
		reached[1][10106] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4651: // STATE 10107 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10135:0:1 - 1)
		IfNotBlocked
		reached[1][10107] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10135, 10108, 10135) */
		reached[1][10108] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10135, 10109, 10135) */
		reached[1][10109] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4652: // STATE 10110 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10135:0:1 - 1)
		IfNotBlocked
		reached[1][10110] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10135, 10111, 10135) */
		reached[1][10111] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10135, 10112, 10135) */
		reached[1][10112] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4653: // STATE 10113 - mutant_243.pml:388 - [((STOP==ABORT))] (10135:0:1 - 1)
		IfNotBlocked
		reached[1][10113] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10135, 10114, 10135) */
		reached[1][10114] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10135, 10115, 10135) */
		reached[1][10115] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4654: // STATE 10117 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10135:0 - 1)
		IfNotBlocked
		reached[1][10117] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10135, 10119, 10135) */
		reached[1][10119] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4655: // STATE 10122 - mutant_243.pml:263 - [((_pid==0))] (10130:0:0 - 1)
		IfNotBlocked
		reached[1][10122] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10123, 10130) */
		reached[1][10123] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10129, 10130) */
		reached[1][10129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4656: // STATE 10124 - mutant_243.pml:265 - [((_pid==1))] (10130:0:0 - 1)
		IfNotBlocked
		reached[1][10124] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10125, 10130) */
		reached[1][10125] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10129, 10130) */
		reached[1][10129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4657: // STATE 10126 - mutant_243.pml:267 - [((_pid>1))] (10130:0:0 - 1)
		IfNotBlocked
		reached[1][10126] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10127, 10130) */
		reached[1][10127] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10129, 10130) */
		reached[1][10129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4658: // STATE 10130 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10130] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4659: // STATE 10131 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10145:1 - 1)
		IfNotBlocked
		reached[1][10131] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10145, 10136, 10145) */
		reached[1][10136] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4660: // STATE 10134 - mutant_243.pml:399 - [(1)] (10145:0:1 - 1)
		IfNotBlocked
		reached[1][10134] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10145, 10136, 10145) */
		reached[1][10136] = 1;
		;
		/* merge: .(goto)(10145, 10139, 10145) */
		reached[1][10139] = 1;
		;
		/* merge: j = (j+1)(10145, 10141, 10145) */
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4661: // STATE 10141 - mutant_243.pml:435 - [j = (j+1)] (0:10145:1 - 13)
		IfNotBlocked
		reached[1][10141] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10146, 10145) */
		reached[1][10146] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4662: // STATE 10143 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10143] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4663: // STATE 10150 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10150] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4664: // STATE 10151 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10151] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4665: // STATE 10152 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10152] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4666: // STATE 10153 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10173:0:1 - 1)
		IfNotBlocked
		reached[1][10153] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10173, 10154, 10173) */
		reached[1][10154] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10173, 10155, 10173) */
		reached[1][10155] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4667: // STATE 10171 - mutant_243.pml:306 - [.(goto)] (0:10173:0 - 6)
		IfNotBlocked
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4668: // STATE 10156 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10173:0:1 - 1)
		IfNotBlocked
		reached[1][10156] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10173, 10157, 10173) */
		reached[1][10157] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10173, 10158, 10173) */
		reached[1][10158] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4669: // STATE 10159 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10173:0:1 - 1)
		IfNotBlocked
		reached[1][10159] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10173, 10160, 10173) */
		reached[1][10160] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10173, 10161, 10173) */
		reached[1][10161] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4670: // STATE 10162 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10173:0:1 - 1)
		IfNotBlocked
		reached[1][10162] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10173, 10163, 10173) */
		reached[1][10163] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10173, 10164, 10173) */
		reached[1][10164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4671: // STATE 10165 - mutant_243.pml:300 - [((START==ABORT))] (10173:0:1 - 1)
		IfNotBlocked
		reached[1][10165] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10173, 10166, 10173) */
		reached[1][10166] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10173, 10167, 10173) */
		reached[1][10167] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4672: // STATE 10169 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10173:0 - 1)
		IfNotBlocked
		reached[1][10169] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10173, 10171, 10173) */
		reached[1][10171] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4673: // STATE 10173 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10173] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4674: // STATE 10175 - mutant_243.pml:227 - [((_pid==0))] (10183:0:0 - 1)
		IfNotBlocked
		reached[1][10175] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10176, 10183) */
		reached[1][10176] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10182, 10183) */
		reached[1][10182] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4675: // STATE 10177 - mutant_243.pml:229 - [((_pid==1))] (10183:0:0 - 1)
		IfNotBlocked
		reached[1][10177] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10178, 10183) */
		reached[1][10178] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10182, 10183) */
		reached[1][10182] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4676: // STATE 10179 - mutant_243.pml:231 - [((_pid>1))] (10183:0:0 - 1)
		IfNotBlocked
		reached[1][10179] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10180, 10183) */
		reached[1][10180] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10182, 10183) */
		reached[1][10182] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4677: // STATE 10183 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10183] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4678: // STATE 10184 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10312:1 - 1)
		IfNotBlocked
		reached[1][10184] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10312, 10189, 10312) */
		reached[1][10189] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4679: // STATE 10187 - mutant_243.pml:312 - [(1)] (10312:0:1 - 1)
		IfNotBlocked
		reached[1][10187] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10312, 10189, 10312) */
		reached[1][10189] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4680: // STATE 10191 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10191] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4681: // STATE 10192 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10226:0:1 - 1)
		IfNotBlocked
		reached[1][10192] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10226, 10193, 10226) */
		reached[1][10193] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10226, 10194, 10226) */
		reached[1][10194] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4682: // STATE 10210 - mutant_243.pml:336 - [.(goto)] (0:10226:0 - 6)
		IfNotBlocked
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4683: // STATE 10195 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10226:0:1 - 1)
		IfNotBlocked
		reached[1][10195] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10226, 10196, 10226) */
		reached[1][10196] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10226, 10197, 10226) */
		reached[1][10197] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4684: // STATE 10198 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10226:0:1 - 1)
		IfNotBlocked
		reached[1][10198] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10226, 10199, 10226) */
		reached[1][10199] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10226, 10200, 10226) */
		reached[1][10200] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4685: // STATE 10201 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10226:0:1 - 1)
		IfNotBlocked
		reached[1][10201] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10226, 10202, 10226) */
		reached[1][10202] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10226, 10203, 10226) */
		reached[1][10203] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4686: // STATE 10204 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10226:0:1 - 1)
		IfNotBlocked
		reached[1][10204] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10226, 10205, 10226) */
		reached[1][10205] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10226, 10206, 10226) */
		reached[1][10206] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4687: // STATE 10208 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10226:0 - 1)
		IfNotBlocked
		reached[1][10208] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10226, 10210, 10226) */
		reached[1][10210] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4688: // STATE 10213 - mutant_243.pml:239 - [((_pid==0))] (10221:0:0 - 1)
		IfNotBlocked
		reached[1][10213] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10214, 10221) */
		reached[1][10214] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10220, 10221) */
		reached[1][10220] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4689: // STATE 10215 - mutant_243.pml:241 - [((_pid==1))] (10221:0:0 - 1)
		IfNotBlocked
		reached[1][10215] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10216, 10221) */
		reached[1][10216] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10220, 10221) */
		reached[1][10220] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4690: // STATE 10217 - mutant_243.pml:243 - [((_pid>1))] (10221:0:0 - 1)
		IfNotBlocked
		reached[1][10217] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10218, 10221) */
		reached[1][10218] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10220, 10221) */
		reached[1][10220] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4691: // STATE 10221 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10221] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4692: // STATE 10222 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10312:1 - 1)
		IfNotBlocked
		reached[1][10222] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10312, 10227, 10312) */
		reached[1][10227] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4693: // STATE 10225 - mutant_243.pml:341 - [(1)] (10312:0:1 - 1)
		IfNotBlocked
		reached[1][10225] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10312, 10227, 10312) */
		reached[1][10227] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4694: // STATE 10229 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10229] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4695: // STATE 10230 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10264:0:1 - 1)
		IfNotBlocked
		reached[1][10230] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10264, 10231, 10264) */
		reached[1][10231] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10264, 10232, 10264) */
		reached[1][10232] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4696: // STATE 10248 - mutant_243.pml:365 - [.(goto)] (0:10264:0 - 6)
		IfNotBlocked
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4697: // STATE 10233 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10264:0:1 - 1)
		IfNotBlocked
		reached[1][10233] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10264, 10234, 10264) */
		reached[1][10234] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10264, 10235, 10264) */
		reached[1][10235] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4698: // STATE 10236 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10264:0:1 - 1)
		IfNotBlocked
		reached[1][10236] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10264, 10237, 10264) */
		reached[1][10237] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10264, 10238, 10264) */
		reached[1][10238] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4699: // STATE 10239 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10264:0:1 - 1)
		IfNotBlocked
		reached[1][10239] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10264, 10240, 10264) */
		reached[1][10240] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10264, 10241, 10264) */
		reached[1][10241] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4700: // STATE 10242 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (10264:0:1 - 1)
		IfNotBlocked
		reached[1][10242] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10264, 10243, 10264) */
		reached[1][10243] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10264, 10244, 10264) */
		reached[1][10244] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4701: // STATE 10246 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10264:0 - 1)
		IfNotBlocked
		reached[1][10246] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10264, 10248, 10264) */
		reached[1][10248] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4702: // STATE 10251 - mutant_243.pml:251 - [((_pid==0))] (10259:0:0 - 1)
		IfNotBlocked
		reached[1][10251] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10252, 10259) */
		reached[1][10252] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10258, 10259) */
		reached[1][10258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4703: // STATE 10253 - mutant_243.pml:253 - [((_pid==1))] (10259:0:0 - 1)
		IfNotBlocked
		reached[1][10253] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10254, 10259) */
		reached[1][10254] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10258, 10259) */
		reached[1][10258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4704: // STATE 10255 - mutant_243.pml:255 - [((_pid>1))] (10259:0:0 - 1)
		IfNotBlocked
		reached[1][10255] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10256, 10259) */
		reached[1][10256] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10258, 10259) */
		reached[1][10258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4705: // STATE 10259 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10259] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4706: // STATE 10260 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10312:1 - 1)
		IfNotBlocked
		reached[1][10260] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10312, 10265, 10312) */
		reached[1][10265] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4707: // STATE 10263 - mutant_243.pml:370 - [(1)] (10312:0:1 - 1)
		IfNotBlocked
		reached[1][10263] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10312, 10265, 10312) */
		reached[1][10265] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4708: // STATE 10267 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10267] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4709: // STATE 10268 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10302:0:1 - 1)
		IfNotBlocked
		reached[1][10268] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10302, 10269, 10302) */
		reached[1][10269] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10302, 10270, 10302) */
		reached[1][10270] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4710: // STATE 10286 - mutant_243.pml:394 - [.(goto)] (0:10302:0 - 6)
		IfNotBlocked
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4711: // STATE 10271 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10302:0:1 - 1)
		IfNotBlocked
		reached[1][10271] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10302, 10272, 10302) */
		reached[1][10272] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10302, 10273, 10302) */
		reached[1][10273] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4712: // STATE 10274 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10302:0:1 - 1)
		IfNotBlocked
		reached[1][10274] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10302, 10275, 10302) */
		reached[1][10275] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10302, 10276, 10302) */
		reached[1][10276] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4713: // STATE 10277 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10302:0:1 - 1)
		IfNotBlocked
		reached[1][10277] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10302, 10278, 10302) */
		reached[1][10278] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10302, 10279, 10302) */
		reached[1][10279] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4714: // STATE 10280 - mutant_243.pml:388 - [((STOP==ABORT))] (10302:0:1 - 1)
		IfNotBlocked
		reached[1][10280] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10302, 10281, 10302) */
		reached[1][10281] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10302, 10282, 10302) */
		reached[1][10282] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4715: // STATE 10284 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10302:0 - 1)
		IfNotBlocked
		reached[1][10284] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10302, 10286, 10302) */
		reached[1][10286] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4716: // STATE 10289 - mutant_243.pml:263 - [((_pid==0))] (10297:0:0 - 1)
		IfNotBlocked
		reached[1][10289] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10290, 10297) */
		reached[1][10290] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10296, 10297) */
		reached[1][10296] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4717: // STATE 10291 - mutant_243.pml:265 - [((_pid==1))] (10297:0:0 - 1)
		IfNotBlocked
		reached[1][10291] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10292, 10297) */
		reached[1][10292] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10296, 10297) */
		reached[1][10296] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4718: // STATE 10293 - mutant_243.pml:267 - [((_pid>1))] (10297:0:0 - 1)
		IfNotBlocked
		reached[1][10293] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10294, 10297) */
		reached[1][10294] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10296, 10297) */
		reached[1][10296] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4719: // STATE 10297 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10297] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4720: // STATE 10298 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10312:1 - 1)
		IfNotBlocked
		reached[1][10298] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10312, 10303, 10312) */
		reached[1][10303] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4721: // STATE 10301 - mutant_243.pml:399 - [(1)] (10312:0:1 - 1)
		IfNotBlocked
		reached[1][10301] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10312, 10303, 10312) */
		reached[1][10303] = 1;
		;
		/* merge: .(goto)(10312, 10306, 10312) */
		reached[1][10306] = 1;
		;
		/* merge: j = (j-1)(10312, 10308, 10312) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4722: // STATE 10308 - mutant_243.pml:446 - [j = (j-1)] (0:10312:1 - 13)
		IfNotBlocked
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10313, 10312) */
		reached[1][10313] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4723: // STATE 10310 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10310] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4724: // STATE 10320 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10320] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 4725: // STATE 10321 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10321] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4726: // STATE 10322 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10322] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4727: // STATE 10323 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10343:0:1 - 1)
		IfNotBlocked
		reached[1][10323] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10343, 10324, 10343) */
		reached[1][10324] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10343, 10325, 10343) */
		reached[1][10325] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4728: // STATE 10341 - mutant_243.pml:306 - [.(goto)] (0:10343:0 - 6)
		IfNotBlocked
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4729: // STATE 10326 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10343:0:1 - 1)
		IfNotBlocked
		reached[1][10326] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10343, 10327, 10343) */
		reached[1][10327] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10343, 10328, 10343) */
		reached[1][10328] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4730: // STATE 10329 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10343:0:1 - 1)
		IfNotBlocked
		reached[1][10329] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10343, 10330, 10343) */
		reached[1][10330] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10343, 10331, 10343) */
		reached[1][10331] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4731: // STATE 10332 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10343:0:1 - 1)
		IfNotBlocked
		reached[1][10332] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10343, 10333, 10343) */
		reached[1][10333] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10343, 10334, 10343) */
		reached[1][10334] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4732: // STATE 10335 - mutant_243.pml:300 - [((START==ABORT))] (10343:0:1 - 1)
		IfNotBlocked
		reached[1][10335] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10343, 10336, 10343) */
		reached[1][10336] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10343, 10337, 10343) */
		reached[1][10337] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4733: // STATE 10339 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10343:0 - 1)
		IfNotBlocked
		reached[1][10339] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10343, 10341, 10343) */
		reached[1][10341] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4734: // STATE 10343 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10343] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4735: // STATE 10345 - mutant_243.pml:227 - [((_pid==0))] (10353:0:0 - 1)
		IfNotBlocked
		reached[1][10345] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10346, 10353) */
		reached[1][10346] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10352, 10353) */
		reached[1][10352] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4736: // STATE 10347 - mutant_243.pml:229 - [((_pid==1))] (10353:0:0 - 1)
		IfNotBlocked
		reached[1][10347] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10348, 10353) */
		reached[1][10348] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10352, 10353) */
		reached[1][10352] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4737: // STATE 10349 - mutant_243.pml:231 - [((_pid>1))] (10353:0:0 - 1)
		IfNotBlocked
		reached[1][10349] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10350, 10353) */
		reached[1][10350] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10352, 10353) */
		reached[1][10352] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4738: // STATE 10353 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10353] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4739: // STATE 10354 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10482:1 - 1)
		IfNotBlocked
		reached[1][10354] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10482, 10359, 10482) */
		reached[1][10359] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4740: // STATE 10357 - mutant_243.pml:312 - [(1)] (10482:0:1 - 1)
		IfNotBlocked
		reached[1][10357] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10482, 10359, 10482) */
		reached[1][10359] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4741: // STATE 10361 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10361] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4742: // STATE 10362 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10396:0:1 - 1)
		IfNotBlocked
		reached[1][10362] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10396, 10363, 10396) */
		reached[1][10363] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10396, 10364, 10396) */
		reached[1][10364] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4743: // STATE 10380 - mutant_243.pml:336 - [.(goto)] (0:10396:0 - 6)
		IfNotBlocked
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4744: // STATE 10365 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10396:0:1 - 1)
		IfNotBlocked
		reached[1][10365] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10396, 10366, 10396) */
		reached[1][10366] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10396, 10367, 10396) */
		reached[1][10367] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4745: // STATE 10368 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10396:0:1 - 1)
		IfNotBlocked
		reached[1][10368] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10396, 10369, 10396) */
		reached[1][10369] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10396, 10370, 10396) */
		reached[1][10370] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4746: // STATE 10371 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10396:0:1 - 1)
		IfNotBlocked
		reached[1][10371] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10396, 10372, 10396) */
		reached[1][10372] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10396, 10373, 10396) */
		reached[1][10373] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4747: // STATE 10374 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10396:0:1 - 1)
		IfNotBlocked
		reached[1][10374] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10396, 10375, 10396) */
		reached[1][10375] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10396, 10376, 10396) */
		reached[1][10376] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4748: // STATE 10378 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10396:0 - 1)
		IfNotBlocked
		reached[1][10378] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10396, 10380, 10396) */
		reached[1][10380] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4749: // STATE 10383 - mutant_243.pml:239 - [((_pid==0))] (10391:0:0 - 1)
		IfNotBlocked
		reached[1][10383] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10384, 10391) */
		reached[1][10384] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10390, 10391) */
		reached[1][10390] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4750: // STATE 10385 - mutant_243.pml:241 - [((_pid==1))] (10391:0:0 - 1)
		IfNotBlocked
		reached[1][10385] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10386, 10391) */
		reached[1][10386] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10390, 10391) */
		reached[1][10390] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4751: // STATE 10387 - mutant_243.pml:243 - [((_pid>1))] (10391:0:0 - 1)
		IfNotBlocked
		reached[1][10387] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10388, 10391) */
		reached[1][10388] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10390, 10391) */
		reached[1][10390] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4752: // STATE 10391 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10391] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4753: // STATE 10392 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10482:1 - 1)
		IfNotBlocked
		reached[1][10392] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10482, 10397, 10482) */
		reached[1][10397] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4754: // STATE 10395 - mutant_243.pml:341 - [(1)] (10482:0:1 - 1)
		IfNotBlocked
		reached[1][10395] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10482, 10397, 10482) */
		reached[1][10397] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4755: // STATE 10399 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10399] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4756: // STATE 10400 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10434:0:1 - 1)
		IfNotBlocked
		reached[1][10400] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10434, 10401, 10434) */
		reached[1][10401] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10434, 10402, 10434) */
		reached[1][10402] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4757: // STATE 10418 - mutant_243.pml:365 - [.(goto)] (0:10434:0 - 6)
		IfNotBlocked
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4758: // STATE 10403 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10434:0:1 - 1)
		IfNotBlocked
		reached[1][10403] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10434, 10404, 10434) */
		reached[1][10404] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10434, 10405, 10434) */
		reached[1][10405] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4759: // STATE 10406 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10434:0:1 - 1)
		IfNotBlocked
		reached[1][10406] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10434, 10407, 10434) */
		reached[1][10407] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10434, 10408, 10434) */
		reached[1][10408] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4760: // STATE 10409 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10434:0:1 - 1)
		IfNotBlocked
		reached[1][10409] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10434, 10410, 10434) */
		reached[1][10410] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10434, 10411, 10434) */
		reached[1][10411] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4761: // STATE 10412 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (10434:0:1 - 1)
		IfNotBlocked
		reached[1][10412] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10434, 10413, 10434) */
		reached[1][10413] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10434, 10414, 10434) */
		reached[1][10414] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4762: // STATE 10416 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10434:0 - 1)
		IfNotBlocked
		reached[1][10416] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10434, 10418, 10434) */
		reached[1][10418] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4763: // STATE 10421 - mutant_243.pml:251 - [((_pid==0))] (10429:0:0 - 1)
		IfNotBlocked
		reached[1][10421] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10422, 10429) */
		reached[1][10422] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10428, 10429) */
		reached[1][10428] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4764: // STATE 10423 - mutant_243.pml:253 - [((_pid==1))] (10429:0:0 - 1)
		IfNotBlocked
		reached[1][10423] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10424, 10429) */
		reached[1][10424] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10428, 10429) */
		reached[1][10428] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4765: // STATE 10425 - mutant_243.pml:255 - [((_pid>1))] (10429:0:0 - 1)
		IfNotBlocked
		reached[1][10425] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10426, 10429) */
		reached[1][10426] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10428, 10429) */
		reached[1][10428] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4766: // STATE 10429 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10429] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4767: // STATE 10430 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10482:1 - 1)
		IfNotBlocked
		reached[1][10430] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10482, 10435, 10482) */
		reached[1][10435] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4768: // STATE 10433 - mutant_243.pml:370 - [(1)] (10482:0:1 - 1)
		IfNotBlocked
		reached[1][10433] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10482, 10435, 10482) */
		reached[1][10435] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4769: // STATE 10437 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10437] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4770: // STATE 10438 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10472:0:1 - 1)
		IfNotBlocked
		reached[1][10438] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10472, 10439, 10472) */
		reached[1][10439] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10472, 10440, 10472) */
		reached[1][10440] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4771: // STATE 10456 - mutant_243.pml:394 - [.(goto)] (0:10472:0 - 6)
		IfNotBlocked
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4772: // STATE 10441 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10472:0:1 - 1)
		IfNotBlocked
		reached[1][10441] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10472, 10442, 10472) */
		reached[1][10442] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10472, 10443, 10472) */
		reached[1][10443] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4773: // STATE 10444 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10472:0:1 - 1)
		IfNotBlocked
		reached[1][10444] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10472, 10445, 10472) */
		reached[1][10445] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10472, 10446, 10472) */
		reached[1][10446] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4774: // STATE 10447 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10472:0:1 - 1)
		IfNotBlocked
		reached[1][10447] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10472, 10448, 10472) */
		reached[1][10448] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10472, 10449, 10472) */
		reached[1][10449] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4775: // STATE 10450 - mutant_243.pml:388 - [((STOP==ABORT))] (10472:0:1 - 1)
		IfNotBlocked
		reached[1][10450] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10472, 10451, 10472) */
		reached[1][10451] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10472, 10452, 10472) */
		reached[1][10452] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4776: // STATE 10454 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10472:0 - 1)
		IfNotBlocked
		reached[1][10454] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10472, 10456, 10472) */
		reached[1][10456] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4777: // STATE 10459 - mutant_243.pml:263 - [((_pid==0))] (10467:0:0 - 1)
		IfNotBlocked
		reached[1][10459] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10460, 10467) */
		reached[1][10460] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10466, 10467) */
		reached[1][10466] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4778: // STATE 10461 - mutant_243.pml:265 - [((_pid==1))] (10467:0:0 - 1)
		IfNotBlocked
		reached[1][10461] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10462, 10467) */
		reached[1][10462] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10466, 10467) */
		reached[1][10466] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4779: // STATE 10463 - mutant_243.pml:267 - [((_pid>1))] (10467:0:0 - 1)
		IfNotBlocked
		reached[1][10463] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10464, 10467) */
		reached[1][10464] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10466, 10467) */
		reached[1][10466] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4780: // STATE 10467 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10467] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4781: // STATE 10468 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10482:1 - 1)
		IfNotBlocked
		reached[1][10468] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10482, 10473, 10482) */
		reached[1][10473] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4782: // STATE 10471 - mutant_243.pml:399 - [(1)] (10482:0:1 - 1)
		IfNotBlocked
		reached[1][10471] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10482, 10473, 10482) */
		reached[1][10473] = 1;
		;
		/* merge: .(goto)(10482, 10476, 10482) */
		reached[1][10476] = 1;
		;
		/* merge: j = (j+1)(10482, 10478, 10482) */
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4783: // STATE 10478 - mutant_243.pml:435 - [j = (j+1)] (0:10482:1 - 13)
		IfNotBlocked
		reached[1][10478] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10483, 10482) */
		reached[1][10483] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4784: // STATE 10480 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10480] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4785: // STATE 10486 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10486] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4786: // STATE 10487 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10487] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4787: // STATE 10488 - mutant_243.pml:227 - [((_pid==0))] (10496:0:0 - 1)
		IfNotBlocked
		reached[1][10488] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10489, 10496) */
		reached[1][10489] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10495, 10496) */
		reached[1][10495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4788: // STATE 10490 - mutant_243.pml:229 - [((_pid==1))] (10496:0:0 - 1)
		IfNotBlocked
		reached[1][10490] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10491, 10496) */
		reached[1][10491] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10495, 10496) */
		reached[1][10495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4789: // STATE 10492 - mutant_243.pml:231 - [((_pid>1))] (10496:0:0 - 1)
		IfNotBlocked
		reached[1][10492] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10493, 10496) */
		reached[1][10493] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10495, 10496) */
		reached[1][10495] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4790: // STATE 10496 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10496] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4791: // STATE 10497 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10541:1 - 1)
		IfNotBlocked
		reached[1][10497] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10541, 10536, 10541) */
		reached[1][10536] = 1;
		;
		/* merge: j = (j+1)(10541, 10537, 10541) */
		reached[1][10537] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10542, 10541) */
		reached[1][10542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4792: // STATE 10499 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10499] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4793: // STATE 10500 - mutant_243.pml:251 - [((_pid==0))] (10508:0:0 - 1)
		IfNotBlocked
		reached[1][10500] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10501, 10508) */
		reached[1][10501] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10507, 10508) */
		reached[1][10507] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4794: // STATE 10502 - mutant_243.pml:253 - [((_pid==1))] (10508:0:0 - 1)
		IfNotBlocked
		reached[1][10502] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10503, 10508) */
		reached[1][10503] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10507, 10508) */
		reached[1][10507] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4795: // STATE 10504 - mutant_243.pml:255 - [((_pid>1))] (10508:0:0 - 1)
		IfNotBlocked
		reached[1][10504] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10505, 10508) */
		reached[1][10505] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10507, 10508) */
		reached[1][10507] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4796: // STATE 10508 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10508] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4797: // STATE 10509 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10541:1 - 1)
		IfNotBlocked
		reached[1][10509] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10541, 10536, 10541) */
		reached[1][10536] = 1;
		;
		/* merge: j = (j+1)(10541, 10537, 10541) */
		reached[1][10537] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10542, 10541) */
		reached[1][10542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4798: // STATE 10511 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10511] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4799: // STATE 10512 - mutant_243.pml:239 - [((_pid==0))] (10520:0:0 - 1)
		IfNotBlocked
		reached[1][10512] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10513, 10520) */
		reached[1][10513] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10519, 10520) */
		reached[1][10519] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4800: // STATE 10514 - mutant_243.pml:241 - [((_pid==1))] (10520:0:0 - 1)
		IfNotBlocked
		reached[1][10514] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10515, 10520) */
		reached[1][10515] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10519, 10520) */
		reached[1][10519] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4801: // STATE 10516 - mutant_243.pml:243 - [((_pid>1))] (10520:0:0 - 1)
		IfNotBlocked
		reached[1][10516] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10517, 10520) */
		reached[1][10517] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10519, 10520) */
		reached[1][10519] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4802: // STATE 10520 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10520] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4803: // STATE 10521 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10541:1 - 1)
		IfNotBlocked
		reached[1][10521] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10541, 10536, 10541) */
		reached[1][10536] = 1;
		;
		/* merge: j = (j+1)(10541, 10537, 10541) */
		reached[1][10537] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10542, 10541) */
		reached[1][10542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4804: // STATE 10523 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10523] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4805: // STATE 10524 - mutant_243.pml:263 - [((_pid==0))] (10532:0:0 - 1)
		IfNotBlocked
		reached[1][10524] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10525, 10532) */
		reached[1][10525] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10531, 10532) */
		reached[1][10531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4806: // STATE 10526 - mutant_243.pml:265 - [((_pid==1))] (10532:0:0 - 1)
		IfNotBlocked
		reached[1][10526] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10527, 10532) */
		reached[1][10527] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10531, 10532) */
		reached[1][10531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4807: // STATE 10528 - mutant_243.pml:267 - [((_pid>1))] (10532:0:0 - 1)
		IfNotBlocked
		reached[1][10528] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10529, 10532) */
		reached[1][10529] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10531, 10532) */
		reached[1][10531] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4808: // STATE 10532 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10532] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4809: // STATE 10533 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10541:1 - 1)
		IfNotBlocked
		reached[1][10533] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10541, 10536, 10541) */
		reached[1][10536] = 1;
		;
		/* merge: j = (j+1)(10541, 10537, 10541) */
		reached[1][10537] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10542, 10541) */
		reached[1][10542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4810: // STATE 10537 - mutant_243.pml:475 - [j = (j+1)] (0:10541:1 - 5)
		IfNotBlocked
		reached[1][10537] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10542, 10541) */
		reached[1][10542] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4811: // STATE 10539 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10539] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4812: // STATE 10550 - mutant_243.pml:556 - [(((9==ABORTING)||(9==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10550] = 1;
		if (!(((9==10)||(9==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4813: // STATE 10551 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10551] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4814: // STATE 10552 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10552] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 4815: // STATE 10553 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10553] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4816: // STATE 10555 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10555] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4817: // STATE 10556 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10556] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4818: // STATE 10557 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10557] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4819: // STATE 10558 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10558] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4820: // STATE 10559 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10579:0:1 - 1)
		IfNotBlocked
		reached[1][10559] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10579, 10560, 10579) */
		reached[1][10560] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10579, 10561, 10579) */
		reached[1][10561] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4821: // STATE 10577 - mutant_243.pml:306 - [.(goto)] (0:10579:0 - 6)
		IfNotBlocked
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4822: // STATE 10562 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10579:0:1 - 1)
		IfNotBlocked
		reached[1][10562] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10579, 10563, 10579) */
		reached[1][10563] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10579, 10564, 10579) */
		reached[1][10564] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4823: // STATE 10565 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10579:0:1 - 1)
		IfNotBlocked
		reached[1][10565] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10579, 10566, 10579) */
		reached[1][10566] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10579, 10567, 10579) */
		reached[1][10567] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4824: // STATE 10568 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10579:0:1 - 1)
		IfNotBlocked
		reached[1][10568] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10579, 10569, 10579) */
		reached[1][10569] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10579, 10570, 10579) */
		reached[1][10570] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4825: // STATE 10571 - mutant_243.pml:300 - [((START==ABORT))] (10579:0:1 - 1)
		IfNotBlocked
		reached[1][10571] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10579, 10572, 10579) */
		reached[1][10572] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10579, 10573, 10579) */
		reached[1][10573] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4826: // STATE 10575 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10579:0 - 1)
		IfNotBlocked
		reached[1][10575] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10579, 10577, 10579) */
		reached[1][10577] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4827: // STATE 10579 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10579] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4828: // STATE 10581 - mutant_243.pml:227 - [((_pid==0))] (10589:0:0 - 1)
		IfNotBlocked
		reached[1][10581] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10582, 10589) */
		reached[1][10582] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10588, 10589) */
		reached[1][10588] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4829: // STATE 10583 - mutant_243.pml:229 - [((_pid==1))] (10589:0:0 - 1)
		IfNotBlocked
		reached[1][10583] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10584, 10589) */
		reached[1][10584] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10588, 10589) */
		reached[1][10588] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4830: // STATE 10585 - mutant_243.pml:231 - [((_pid>1))] (10589:0:0 - 1)
		IfNotBlocked
		reached[1][10585] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10586, 10589) */
		reached[1][10586] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10588, 10589) */
		reached[1][10588] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4831: // STATE 10589 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10589] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4832: // STATE 10590 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10718:1 - 1)
		IfNotBlocked
		reached[1][10590] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10718, 10595, 10718) */
		reached[1][10595] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4833: // STATE 10593 - mutant_243.pml:312 - [(1)] (10718:0:1 - 1)
		IfNotBlocked
		reached[1][10593] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10718, 10595, 10718) */
		reached[1][10595] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4834: // STATE 10597 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10597] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4835: // STATE 10598 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10632:0:1 - 1)
		IfNotBlocked
		reached[1][10598] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10632, 10599, 10632) */
		reached[1][10599] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10632, 10600, 10632) */
		reached[1][10600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4836: // STATE 10616 - mutant_243.pml:336 - [.(goto)] (0:10632:0 - 6)
		IfNotBlocked
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4837: // STATE 10601 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10632:0:1 - 1)
		IfNotBlocked
		reached[1][10601] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10632, 10602, 10632) */
		reached[1][10602] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10632, 10603, 10632) */
		reached[1][10603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4838: // STATE 10604 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10632:0:1 - 1)
		IfNotBlocked
		reached[1][10604] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10632, 10605, 10632) */
		reached[1][10605] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10632, 10606, 10632) */
		reached[1][10606] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4839: // STATE 10607 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10632:0:1 - 1)
		IfNotBlocked
		reached[1][10607] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10632, 10608, 10632) */
		reached[1][10608] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10632, 10609, 10632) */
		reached[1][10609] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4840: // STATE 10610 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10632:0:1 - 1)
		IfNotBlocked
		reached[1][10610] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10632, 10611, 10632) */
		reached[1][10611] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10632, 10612, 10632) */
		reached[1][10612] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4841: // STATE 10614 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10632:0 - 1)
		IfNotBlocked
		reached[1][10614] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10632, 10616, 10632) */
		reached[1][10616] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4842: // STATE 10619 - mutant_243.pml:239 - [((_pid==0))] (10627:0:0 - 1)
		IfNotBlocked
		reached[1][10619] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10620, 10627) */
		reached[1][10620] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10626, 10627) */
		reached[1][10626] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4843: // STATE 10621 - mutant_243.pml:241 - [((_pid==1))] (10627:0:0 - 1)
		IfNotBlocked
		reached[1][10621] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10622, 10627) */
		reached[1][10622] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10626, 10627) */
		reached[1][10626] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4844: // STATE 10623 - mutant_243.pml:243 - [((_pid>1))] (10627:0:0 - 1)
		IfNotBlocked
		reached[1][10623] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10624, 10627) */
		reached[1][10624] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10626, 10627) */
		reached[1][10626] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4845: // STATE 10627 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10627] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4846: // STATE 10628 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10718:1 - 1)
		IfNotBlocked
		reached[1][10628] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10718, 10633, 10718) */
		reached[1][10633] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4847: // STATE 10631 - mutant_243.pml:341 - [(1)] (10718:0:1 - 1)
		IfNotBlocked
		reached[1][10631] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10718, 10633, 10718) */
		reached[1][10633] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4848: // STATE 10635 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10635] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4849: // STATE 10636 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10670:0:1 - 1)
		IfNotBlocked
		reached[1][10636] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10670, 10637, 10670) */
		reached[1][10637] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10670, 10638, 10670) */
		reached[1][10638] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4850: // STATE 10654 - mutant_243.pml:365 - [.(goto)] (0:10670:0 - 6)
		IfNotBlocked
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4851: // STATE 10639 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10670:0:1 - 1)
		IfNotBlocked
		reached[1][10639] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10670, 10640, 10670) */
		reached[1][10640] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10670, 10641, 10670) */
		reached[1][10641] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4852: // STATE 10642 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10670:0:1 - 1)
		IfNotBlocked
		reached[1][10642] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10670, 10643, 10670) */
		reached[1][10643] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10670, 10644, 10670) */
		reached[1][10644] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4853: // STATE 10645 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10670:0:1 - 1)
		IfNotBlocked
		reached[1][10645] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10670, 10646, 10670) */
		reached[1][10646] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10670, 10647, 10670) */
		reached[1][10647] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4854: // STATE 10648 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (10670:0:1 - 1)
		IfNotBlocked
		reached[1][10648] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10670, 10649, 10670) */
		reached[1][10649] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10670, 10650, 10670) */
		reached[1][10650] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4855: // STATE 10652 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10670:0 - 1)
		IfNotBlocked
		reached[1][10652] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10670, 10654, 10670) */
		reached[1][10654] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4856: // STATE 10657 - mutant_243.pml:251 - [((_pid==0))] (10665:0:0 - 1)
		IfNotBlocked
		reached[1][10657] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10658, 10665) */
		reached[1][10658] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10664, 10665) */
		reached[1][10664] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4857: // STATE 10659 - mutant_243.pml:253 - [((_pid==1))] (10665:0:0 - 1)
		IfNotBlocked
		reached[1][10659] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10660, 10665) */
		reached[1][10660] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10664, 10665) */
		reached[1][10664] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4858: // STATE 10661 - mutant_243.pml:255 - [((_pid>1))] (10665:0:0 - 1)
		IfNotBlocked
		reached[1][10661] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10662, 10665) */
		reached[1][10662] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10664, 10665) */
		reached[1][10664] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4859: // STATE 10665 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10665] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4860: // STATE 10666 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10718:1 - 1)
		IfNotBlocked
		reached[1][10666] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10718, 10671, 10718) */
		reached[1][10671] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4861: // STATE 10669 - mutant_243.pml:370 - [(1)] (10718:0:1 - 1)
		IfNotBlocked
		reached[1][10669] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10718, 10671, 10718) */
		reached[1][10671] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4862: // STATE 10673 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10673] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4863: // STATE 10674 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10708:0:1 - 1)
		IfNotBlocked
		reached[1][10674] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10708, 10675, 10708) */
		reached[1][10675] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10708, 10676, 10708) */
		reached[1][10676] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4864: // STATE 10692 - mutant_243.pml:394 - [.(goto)] (0:10708:0 - 6)
		IfNotBlocked
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4865: // STATE 10677 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10708:0:1 - 1)
		IfNotBlocked
		reached[1][10677] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10708, 10678, 10708) */
		reached[1][10678] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10708, 10679, 10708) */
		reached[1][10679] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4866: // STATE 10680 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10708:0:1 - 1)
		IfNotBlocked
		reached[1][10680] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10708, 10681, 10708) */
		reached[1][10681] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10708, 10682, 10708) */
		reached[1][10682] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4867: // STATE 10683 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10708:0:1 - 1)
		IfNotBlocked
		reached[1][10683] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10708, 10684, 10708) */
		reached[1][10684] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10708, 10685, 10708) */
		reached[1][10685] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4868: // STATE 10686 - mutant_243.pml:388 - [((STOP==ABORT))] (10708:0:1 - 1)
		IfNotBlocked
		reached[1][10686] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10708, 10687, 10708) */
		reached[1][10687] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10708, 10688, 10708) */
		reached[1][10688] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4869: // STATE 10690 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10708:0 - 1)
		IfNotBlocked
		reached[1][10690] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10708, 10692, 10708) */
		reached[1][10692] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4870: // STATE 10695 - mutant_243.pml:263 - [((_pid==0))] (10703:0:0 - 1)
		IfNotBlocked
		reached[1][10695] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10696, 10703) */
		reached[1][10696] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10702, 10703) */
		reached[1][10702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4871: // STATE 10697 - mutant_243.pml:265 - [((_pid==1))] (10703:0:0 - 1)
		IfNotBlocked
		reached[1][10697] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10698, 10703) */
		reached[1][10698] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10702, 10703) */
		reached[1][10702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4872: // STATE 10699 - mutant_243.pml:267 - [((_pid>1))] (10703:0:0 - 1)
		IfNotBlocked
		reached[1][10699] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10700, 10703) */
		reached[1][10700] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10702, 10703) */
		reached[1][10702] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4873: // STATE 10703 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10703] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4874: // STATE 10704 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10718:1 - 1)
		IfNotBlocked
		reached[1][10704] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10718, 10709, 10718) */
		reached[1][10709] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4875: // STATE 10707 - mutant_243.pml:399 - [(1)] (10718:0:1 - 1)
		IfNotBlocked
		reached[1][10707] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10718, 10709, 10718) */
		reached[1][10709] = 1;
		;
		/* merge: .(goto)(10718, 10712, 10718) */
		reached[1][10712] = 1;
		;
		/* merge: j = (j+1)(10718, 10714, 10718) */
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4876: // STATE 10714 - mutant_243.pml:435 - [j = (j+1)] (0:10718:1 - 13)
		IfNotBlocked
		reached[1][10714] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10719, 10718) */
		reached[1][10719] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4877: // STATE 10716 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10716] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4878: // STATE 10723 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10723] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4879: // STATE 10724 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10724] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4880: // STATE 10725 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10725] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4881: // STATE 10726 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10746:0:1 - 1)
		IfNotBlocked
		reached[1][10726] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10746, 10727, 10746) */
		reached[1][10727] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10746, 10728, 10746) */
		reached[1][10728] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4882: // STATE 10744 - mutant_243.pml:306 - [.(goto)] (0:10746:0 - 6)
		IfNotBlocked
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4883: // STATE 10729 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10746:0:1 - 1)
		IfNotBlocked
		reached[1][10729] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10746, 10730, 10746) */
		reached[1][10730] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10746, 10731, 10746) */
		reached[1][10731] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4884: // STATE 10732 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10746:0:1 - 1)
		IfNotBlocked
		reached[1][10732] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10746, 10733, 10746) */
		reached[1][10733] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10746, 10734, 10746) */
		reached[1][10734] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4885: // STATE 10735 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10746:0:1 - 1)
		IfNotBlocked
		reached[1][10735] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10746, 10736, 10746) */
		reached[1][10736] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10746, 10737, 10746) */
		reached[1][10737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4886: // STATE 10738 - mutant_243.pml:300 - [((START==ABORT))] (10746:0:1 - 1)
		IfNotBlocked
		reached[1][10738] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10746, 10739, 10746) */
		reached[1][10739] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10746, 10740, 10746) */
		reached[1][10740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4887: // STATE 10742 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10746:0 - 1)
		IfNotBlocked
		reached[1][10742] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10746, 10744, 10746) */
		reached[1][10744] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4888: // STATE 10746 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10746] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4889: // STATE 10748 - mutant_243.pml:227 - [((_pid==0))] (10756:0:0 - 1)
		IfNotBlocked
		reached[1][10748] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10749, 10756) */
		reached[1][10749] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10755, 10756) */
		reached[1][10755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4890: // STATE 10750 - mutant_243.pml:229 - [((_pid==1))] (10756:0:0 - 1)
		IfNotBlocked
		reached[1][10750] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10751, 10756) */
		reached[1][10751] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10755, 10756) */
		reached[1][10755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4891: // STATE 10752 - mutant_243.pml:231 - [((_pid>1))] (10756:0:0 - 1)
		IfNotBlocked
		reached[1][10752] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10753, 10756) */
		reached[1][10753] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10755, 10756) */
		reached[1][10755] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4892: // STATE 10756 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10756] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4893: // STATE 10757 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:10885:1 - 1)
		IfNotBlocked
		reached[1][10757] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10885, 10762, 10885) */
		reached[1][10762] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4894: // STATE 10760 - mutant_243.pml:312 - [(1)] (10885:0:1 - 1)
		IfNotBlocked
		reached[1][10760] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10885, 10762, 10885) */
		reached[1][10762] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4895: // STATE 10764 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10764] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4896: // STATE 10765 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10799:0:1 - 1)
		IfNotBlocked
		reached[1][10765] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10799, 10766, 10799) */
		reached[1][10766] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10799, 10767, 10799) */
		reached[1][10767] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4897: // STATE 10783 - mutant_243.pml:336 - [.(goto)] (0:10799:0 - 6)
		IfNotBlocked
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4898: // STATE 10768 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10799:0:1 - 1)
		IfNotBlocked
		reached[1][10768] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10799, 10769, 10799) */
		reached[1][10769] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10799, 10770, 10799) */
		reached[1][10770] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4899: // STATE 10771 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10799:0:1 - 1)
		IfNotBlocked
		reached[1][10771] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10799, 10772, 10799) */
		reached[1][10772] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10799, 10773, 10799) */
		reached[1][10773] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4900: // STATE 10774 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10799:0:1 - 1)
		IfNotBlocked
		reached[1][10774] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10799, 10775, 10799) */
		reached[1][10775] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10799, 10776, 10799) */
		reached[1][10776] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4901: // STATE 10777 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10799:0:1 - 1)
		IfNotBlocked
		reached[1][10777] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10799, 10778, 10799) */
		reached[1][10778] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10799, 10779, 10799) */
		reached[1][10779] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4902: // STATE 10781 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10799:0 - 1)
		IfNotBlocked
		reached[1][10781] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10799, 10783, 10799) */
		reached[1][10783] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4903: // STATE 10786 - mutant_243.pml:239 - [((_pid==0))] (10794:0:0 - 1)
		IfNotBlocked
		reached[1][10786] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10787, 10794) */
		reached[1][10787] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10793, 10794) */
		reached[1][10793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4904: // STATE 10788 - mutant_243.pml:241 - [((_pid==1))] (10794:0:0 - 1)
		IfNotBlocked
		reached[1][10788] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10789, 10794) */
		reached[1][10789] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10793, 10794) */
		reached[1][10793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4905: // STATE 10790 - mutant_243.pml:243 - [((_pid>1))] (10794:0:0 - 1)
		IfNotBlocked
		reached[1][10790] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10791, 10794) */
		reached[1][10791] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10793, 10794) */
		reached[1][10793] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4906: // STATE 10794 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10794] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4907: // STATE 10795 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:10885:1 - 1)
		IfNotBlocked
		reached[1][10795] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10885, 10800, 10885) */
		reached[1][10800] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4908: // STATE 10798 - mutant_243.pml:341 - [(1)] (10885:0:1 - 1)
		IfNotBlocked
		reached[1][10798] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10885, 10800, 10885) */
		reached[1][10800] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4909: // STATE 10802 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10802] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4910: // STATE 10803 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10837:0:1 - 1)
		IfNotBlocked
		reached[1][10803] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10837, 10804, 10837) */
		reached[1][10804] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10837, 10805, 10837) */
		reached[1][10805] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4911: // STATE 10821 - mutant_243.pml:365 - [.(goto)] (0:10837:0 - 6)
		IfNotBlocked
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4912: // STATE 10806 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10837:0:1 - 1)
		IfNotBlocked
		reached[1][10806] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10837, 10807, 10837) */
		reached[1][10807] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10837, 10808, 10837) */
		reached[1][10808] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4913: // STATE 10809 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10837:0:1 - 1)
		IfNotBlocked
		reached[1][10809] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10837, 10810, 10837) */
		reached[1][10810] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10837, 10811, 10837) */
		reached[1][10811] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4914: // STATE 10812 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10837:0:1 - 1)
		IfNotBlocked
		reached[1][10812] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10837, 10813, 10837) */
		reached[1][10813] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10837, 10814, 10837) */
		reached[1][10814] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4915: // STATE 10815 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (10837:0:1 - 1)
		IfNotBlocked
		reached[1][10815] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10837, 10816, 10837) */
		reached[1][10816] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10837, 10817, 10837) */
		reached[1][10817] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4916: // STATE 10819 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10837:0 - 1)
		IfNotBlocked
		reached[1][10819] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10837, 10821, 10837) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4917: // STATE 10824 - mutant_243.pml:251 - [((_pid==0))] (10832:0:0 - 1)
		IfNotBlocked
		reached[1][10824] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10825, 10832) */
		reached[1][10825] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10831, 10832) */
		reached[1][10831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4918: // STATE 10826 - mutant_243.pml:253 - [((_pid==1))] (10832:0:0 - 1)
		IfNotBlocked
		reached[1][10826] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10827, 10832) */
		reached[1][10827] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10831, 10832) */
		reached[1][10831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4919: // STATE 10828 - mutant_243.pml:255 - [((_pid>1))] (10832:0:0 - 1)
		IfNotBlocked
		reached[1][10828] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10829, 10832) */
		reached[1][10829] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10831, 10832) */
		reached[1][10831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4920: // STATE 10832 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10832] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4921: // STATE 10833 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:10885:1 - 1)
		IfNotBlocked
		reached[1][10833] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10885, 10838, 10885) */
		reached[1][10838] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4922: // STATE 10836 - mutant_243.pml:370 - [(1)] (10885:0:1 - 1)
		IfNotBlocked
		reached[1][10836] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10885, 10838, 10885) */
		reached[1][10838] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4923: // STATE 10840 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10840] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4924: // STATE 10841 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10875:0:1 - 1)
		IfNotBlocked
		reached[1][10841] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10875, 10842, 10875) */
		reached[1][10842] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10875, 10843, 10875) */
		reached[1][10843] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4925: // STATE 10859 - mutant_243.pml:394 - [.(goto)] (0:10875:0 - 6)
		IfNotBlocked
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4926: // STATE 10844 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10875:0:1 - 1)
		IfNotBlocked
		reached[1][10844] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10875, 10845, 10875) */
		reached[1][10845] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10875, 10846, 10875) */
		reached[1][10846] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4927: // STATE 10847 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10875:0:1 - 1)
		IfNotBlocked
		reached[1][10847] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10875, 10848, 10875) */
		reached[1][10848] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10875, 10849, 10875) */
		reached[1][10849] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4928: // STATE 10850 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10875:0:1 - 1)
		IfNotBlocked
		reached[1][10850] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10875, 10851, 10875) */
		reached[1][10851] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10875, 10852, 10875) */
		reached[1][10852] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4929: // STATE 10853 - mutant_243.pml:388 - [((STOP==ABORT))] (10875:0:1 - 1)
		IfNotBlocked
		reached[1][10853] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10875, 10854, 10875) */
		reached[1][10854] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10875, 10855, 10875) */
		reached[1][10855] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4930: // STATE 10857 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10875:0 - 1)
		IfNotBlocked
		reached[1][10857] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10875, 10859, 10875) */
		reached[1][10859] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4931: // STATE 10862 - mutant_243.pml:263 - [((_pid==0))] (10870:0:0 - 1)
		IfNotBlocked
		reached[1][10862] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 10863, 10870) */
		reached[1][10863] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10869, 10870) */
		reached[1][10869] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4932: // STATE 10864 - mutant_243.pml:265 - [((_pid==1))] (10870:0:0 - 1)
		IfNotBlocked
		reached[1][10864] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 10865, 10870) */
		reached[1][10865] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10869, 10870) */
		reached[1][10869] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4933: // STATE 10866 - mutant_243.pml:267 - [((_pid>1))] (10870:0:0 - 1)
		IfNotBlocked
		reached[1][10866] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 10867, 10870) */
		reached[1][10867] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10869, 10870) */
		reached[1][10869] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4934: // STATE 10870 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10870] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4935: // STATE 10871 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:10885:1 - 1)
		IfNotBlocked
		reached[1][10871] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(10885, 10876, 10885) */
		reached[1][10876] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4936: // STATE 10874 - mutant_243.pml:399 - [(1)] (10885:0:1 - 1)
		IfNotBlocked
		reached[1][10874] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10885, 10876, 10885) */
		reached[1][10876] = 1;
		;
		/* merge: .(goto)(10885, 10879, 10885) */
		reached[1][10879] = 1;
		;
		/* merge: j = (j-1)(10885, 10881, 10885) */
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4937: // STATE 10881 - mutant_243.pml:446 - [j = (j-1)] (0:10885:1 - 13)
		IfNotBlocked
		reached[1][10881] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10886, 10885) */
		reached[1][10886] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4938: // STATE 10883 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10883] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4939: // STATE 10893 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10893] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 4940: // STATE 10894 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10894] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4941: // STATE 10895 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10895] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4942: // STATE 10896 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (10916:0:1 - 1)
		IfNotBlocked
		reached[1][10896] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10916, 10897, 10916) */
		reached[1][10897] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10916, 10898, 10916) */
		reached[1][10898] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4943: // STATE 10914 - mutant_243.pml:306 - [.(goto)] (0:10916:0 - 6)
		IfNotBlocked
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4944: // STATE 10899 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10916:0:1 - 1)
		IfNotBlocked
		reached[1][10899] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10916, 10900, 10916) */
		reached[1][10900] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10916, 10901, 10916) */
		reached[1][10901] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4945: // STATE 10902 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10916:0:1 - 1)
		IfNotBlocked
		reached[1][10902] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10916, 10903, 10916) */
		reached[1][10903] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10916, 10904, 10916) */
		reached[1][10904] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4946: // STATE 10905 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10916:0:1 - 1)
		IfNotBlocked
		reached[1][10905] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10916, 10906, 10916) */
		reached[1][10906] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10916, 10907, 10916) */
		reached[1][10907] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4947: // STATE 10908 - mutant_243.pml:300 - [((START==ABORT))] (10916:0:1 - 1)
		IfNotBlocked
		reached[1][10908] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10916, 10909, 10916) */
		reached[1][10909] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10916, 10910, 10916) */
		reached[1][10910] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4948: // STATE 10912 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10916:0 - 1)
		IfNotBlocked
		reached[1][10912] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10916, 10914, 10916) */
		reached[1][10914] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4949: // STATE 10916 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10916] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4950: // STATE 10918 - mutant_243.pml:227 - [((_pid==0))] (10926:0:0 - 1)
		IfNotBlocked
		reached[1][10918] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 10919, 10926) */
		reached[1][10919] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10925, 10926) */
		reached[1][10925] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4951: // STATE 10920 - mutant_243.pml:229 - [((_pid==1))] (10926:0:0 - 1)
		IfNotBlocked
		reached[1][10920] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 10921, 10926) */
		reached[1][10921] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10925, 10926) */
		reached[1][10925] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4952: // STATE 10922 - mutant_243.pml:231 - [((_pid>1))] (10926:0:0 - 1)
		IfNotBlocked
		reached[1][10922] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 10923, 10926) */
		reached[1][10923] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10925, 10926) */
		reached[1][10925] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4953: // STATE 10926 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10926] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4954: // STATE 10927 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11055:1 - 1)
		IfNotBlocked
		reached[1][10927] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11055, 10932, 11055) */
		reached[1][10932] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4955: // STATE 10930 - mutant_243.pml:312 - [(1)] (11055:0:1 - 1)
		IfNotBlocked
		reached[1][10930] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11055, 10932, 11055) */
		reached[1][10932] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4956: // STATE 10934 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10934] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4957: // STATE 10935 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10969:0:1 - 1)
		IfNotBlocked
		reached[1][10935] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(10969, 10936, 10969) */
		reached[1][10936] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(10969, 10937, 10969) */
		reached[1][10937] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4958: // STATE 10953 - mutant_243.pml:336 - [.(goto)] (0:10969:0 - 6)
		IfNotBlocked
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4959: // STATE 10938 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10969:0:1 - 1)
		IfNotBlocked
		reached[1][10938] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10969, 10939, 10969) */
		reached[1][10939] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(10969, 10940, 10969) */
		reached[1][10940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4960: // STATE 10941 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10969:0:1 - 1)
		IfNotBlocked
		reached[1][10941] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10969, 10942, 10969) */
		reached[1][10942] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10969, 10943, 10969) */
		reached[1][10943] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4961: // STATE 10944 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10969:0:1 - 1)
		IfNotBlocked
		reached[1][10944] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10969, 10945, 10969) */
		reached[1][10945] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(10969, 10946, 10969) */
		reached[1][10946] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4962: // STATE 10947 - mutant_243.pml:330 - [((PAUSE==ABORT))] (10969:0:1 - 1)
		IfNotBlocked
		reached[1][10947] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(10969, 10948, 10969) */
		reached[1][10948] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(10969, 10949, 10969) */
		reached[1][10949] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4963: // STATE 10951 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:10969:0 - 1)
		IfNotBlocked
		reached[1][10951] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(10969, 10953, 10969) */
		reached[1][10953] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4964: // STATE 10956 - mutant_243.pml:239 - [((_pid==0))] (10964:0:0 - 1)
		IfNotBlocked
		reached[1][10956] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10957, 10964) */
		reached[1][10957] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10963, 10964) */
		reached[1][10963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4965: // STATE 10958 - mutant_243.pml:241 - [((_pid==1))] (10964:0:0 - 1)
		IfNotBlocked
		reached[1][10958] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 10959, 10964) */
		reached[1][10959] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10963, 10964) */
		reached[1][10963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4966: // STATE 10960 - mutant_243.pml:243 - [((_pid>1))] (10964:0:0 - 1)
		IfNotBlocked
		reached[1][10960] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 10961, 10964) */
		reached[1][10961] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 10963, 10964) */
		reached[1][10963] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4967: // STATE 10964 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10964] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4968: // STATE 10965 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11055:1 - 1)
		IfNotBlocked
		reached[1][10965] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11055, 10970, 11055) */
		reached[1][10970] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4969: // STATE 10968 - mutant_243.pml:341 - [(1)] (11055:0:1 - 1)
		IfNotBlocked
		reached[1][10968] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11055, 10970, 11055) */
		reached[1][10970] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4970: // STATE 10972 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10972] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4971: // STATE 10973 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (11007:0:1 - 1)
		IfNotBlocked
		reached[1][10973] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11007, 10974, 11007) */
		reached[1][10974] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11007, 10975, 11007) */
		reached[1][10975] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4972: // STATE 10991 - mutant_243.pml:365 - [.(goto)] (0:11007:0 - 6)
		IfNotBlocked
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4973: // STATE 10976 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (11007:0:1 - 1)
		IfNotBlocked
		reached[1][10976] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11007, 10977, 11007) */
		reached[1][10977] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11007, 10978, 11007) */
		reached[1][10978] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4974: // STATE 10979 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11007:0:1 - 1)
		IfNotBlocked
		reached[1][10979] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11007, 10980, 11007) */
		reached[1][10980] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11007, 10981, 11007) */
		reached[1][10981] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4975: // STATE 10982 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11007:0:1 - 1)
		IfNotBlocked
		reached[1][10982] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11007, 10983, 11007) */
		reached[1][10983] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11007, 10984, 11007) */
		reached[1][10984] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4976: // STATE 10985 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (11007:0:1 - 1)
		IfNotBlocked
		reached[1][10985] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11007, 10986, 11007) */
		reached[1][10986] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11007, 10987, 11007) */
		reached[1][10987] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4977: // STATE 10989 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11007:0 - 1)
		IfNotBlocked
		reached[1][10989] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11007, 10991, 11007) */
		reached[1][10991] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4978: // STATE 10994 - mutant_243.pml:251 - [((_pid==0))] (11002:0:0 - 1)
		IfNotBlocked
		reached[1][10994] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10995, 11002) */
		reached[1][10995] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11001, 11002) */
		reached[1][11001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4979: // STATE 10996 - mutant_243.pml:253 - [((_pid==1))] (11002:0:0 - 1)
		IfNotBlocked
		reached[1][10996] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 10997, 11002) */
		reached[1][10997] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11001, 11002) */
		reached[1][11001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4980: // STATE 10998 - mutant_243.pml:255 - [((_pid>1))] (11002:0:0 - 1)
		IfNotBlocked
		reached[1][10998] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 10999, 11002) */
		reached[1][10999] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11001, 11002) */
		reached[1][11001] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4981: // STATE 11002 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11002] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4982: // STATE 11003 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11055:1 - 1)
		IfNotBlocked
		reached[1][11003] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11055, 11008, 11055) */
		reached[1][11008] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4983: // STATE 11006 - mutant_243.pml:370 - [(1)] (11055:0:1 - 1)
		IfNotBlocked
		reached[1][11006] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11055, 11008, 11055) */
		reached[1][11008] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4984: // STATE 11010 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11010] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4985: // STATE 11011 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (11045:0:1 - 1)
		IfNotBlocked
		reached[1][11011] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11045, 11012, 11045) */
		reached[1][11012] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11045, 11013, 11045) */
		reached[1][11013] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4986: // STATE 11029 - mutant_243.pml:394 - [.(goto)] (0:11045:0 - 6)
		IfNotBlocked
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4987: // STATE 11014 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (11045:0:1 - 1)
		IfNotBlocked
		reached[1][11014] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11045, 11015, 11045) */
		reached[1][11015] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11045, 11016, 11045) */
		reached[1][11016] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4988: // STATE 11017 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11045:0:1 - 1)
		IfNotBlocked
		reached[1][11017] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11045, 11018, 11045) */
		reached[1][11018] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11045, 11019, 11045) */
		reached[1][11019] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4989: // STATE 11020 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11045:0:1 - 1)
		IfNotBlocked
		reached[1][11020] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11045, 11021, 11045) */
		reached[1][11021] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11045, 11022, 11045) */
		reached[1][11022] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4990: // STATE 11023 - mutant_243.pml:388 - [((STOP==ABORT))] (11045:0:1 - 1)
		IfNotBlocked
		reached[1][11023] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11045, 11024, 11045) */
		reached[1][11024] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11045, 11025, 11045) */
		reached[1][11025] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4991: // STATE 11027 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11045:0 - 1)
		IfNotBlocked
		reached[1][11027] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11045, 11029, 11045) */
		reached[1][11029] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4992: // STATE 11032 - mutant_243.pml:263 - [((_pid==0))] (11040:0:0 - 1)
		IfNotBlocked
		reached[1][11032] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11033, 11040) */
		reached[1][11033] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11039, 11040) */
		reached[1][11039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4993: // STATE 11034 - mutant_243.pml:265 - [((_pid==1))] (11040:0:0 - 1)
		IfNotBlocked
		reached[1][11034] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11035, 11040) */
		reached[1][11035] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11039, 11040) */
		reached[1][11039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4994: // STATE 11036 - mutant_243.pml:267 - [((_pid>1))] (11040:0:0 - 1)
		IfNotBlocked
		reached[1][11036] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11037, 11040) */
		reached[1][11037] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11039, 11040) */
		reached[1][11039] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4995: // STATE 11040 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11040] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4996: // STATE 11041 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11055:1 - 1)
		IfNotBlocked
		reached[1][11041] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11055, 11046, 11055) */
		reached[1][11046] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4997: // STATE 11044 - mutant_243.pml:399 - [(1)] (11055:0:1 - 1)
		IfNotBlocked
		reached[1][11044] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11055, 11046, 11055) */
		reached[1][11046] = 1;
		;
		/* merge: .(goto)(11055, 11049, 11055) */
		reached[1][11049] = 1;
		;
		/* merge: j = (j+1)(11055, 11051, 11055) */
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4998: // STATE 11051 - mutant_243.pml:435 - [j = (j+1)] (0:11055:1 - 13)
		IfNotBlocked
		reached[1][11051] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11056, 11055) */
		reached[1][11056] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4999: // STATE 11053 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5000: // STATE 11059 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11059] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5001: // STATE 11060 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11060] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5002: // STATE 11061 - mutant_243.pml:227 - [((_pid==0))] (11069:0:0 - 1)
		IfNotBlocked
		reached[1][11061] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11062, 11069) */
		reached[1][11062] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11068, 11069) */
		reached[1][11068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5003: // STATE 11063 - mutant_243.pml:229 - [((_pid==1))] (11069:0:0 - 1)
		IfNotBlocked
		reached[1][11063] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11064, 11069) */
		reached[1][11064] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11068, 11069) */
		reached[1][11068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5004: // STATE 11065 - mutant_243.pml:231 - [((_pid>1))] (11069:0:0 - 1)
		IfNotBlocked
		reached[1][11065] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11066, 11069) */
		reached[1][11066] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11068, 11069) */
		reached[1][11068] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5005: // STATE 11069 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11069] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5006: // STATE 11070 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11114:1 - 1)
		IfNotBlocked
		reached[1][11070] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11114, 11109, 11114) */
		reached[1][11109] = 1;
		;
		/* merge: j = (j+1)(11114, 11110, 11114) */
		reached[1][11110] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11115, 11114) */
		reached[1][11115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5007: // STATE 11072 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11072] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5008: // STATE 11073 - mutant_243.pml:251 - [((_pid==0))] (11081:0:0 - 1)
		IfNotBlocked
		reached[1][11073] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11074, 11081) */
		reached[1][11074] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11080, 11081) */
		reached[1][11080] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5009: // STATE 11075 - mutant_243.pml:253 - [((_pid==1))] (11081:0:0 - 1)
		IfNotBlocked
		reached[1][11075] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11076, 11081) */
		reached[1][11076] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11080, 11081) */
		reached[1][11080] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5010: // STATE 11077 - mutant_243.pml:255 - [((_pid>1))] (11081:0:0 - 1)
		IfNotBlocked
		reached[1][11077] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11078, 11081) */
		reached[1][11078] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11080, 11081) */
		reached[1][11080] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5011: // STATE 11081 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11081] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5012: // STATE 11082 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11114:1 - 1)
		IfNotBlocked
		reached[1][11082] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11114, 11109, 11114) */
		reached[1][11109] = 1;
		;
		/* merge: j = (j+1)(11114, 11110, 11114) */
		reached[1][11110] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11115, 11114) */
		reached[1][11115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5013: // STATE 11084 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11084] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5014: // STATE 11085 - mutant_243.pml:239 - [((_pid==0))] (11093:0:0 - 1)
		IfNotBlocked
		reached[1][11085] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11086, 11093) */
		reached[1][11086] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11092, 11093) */
		reached[1][11092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5015: // STATE 11087 - mutant_243.pml:241 - [((_pid==1))] (11093:0:0 - 1)
		IfNotBlocked
		reached[1][11087] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11088, 11093) */
		reached[1][11088] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11092, 11093) */
		reached[1][11092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5016: // STATE 11089 - mutant_243.pml:243 - [((_pid>1))] (11093:0:0 - 1)
		IfNotBlocked
		reached[1][11089] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11090, 11093) */
		reached[1][11090] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11092, 11093) */
		reached[1][11092] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5017: // STATE 11093 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11093] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5018: // STATE 11094 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11114:1 - 1)
		IfNotBlocked
		reached[1][11094] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11114, 11109, 11114) */
		reached[1][11109] = 1;
		;
		/* merge: j = (j+1)(11114, 11110, 11114) */
		reached[1][11110] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11115, 11114) */
		reached[1][11115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5019: // STATE 11096 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11096] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5020: // STATE 11097 - mutant_243.pml:263 - [((_pid==0))] (11105:0:0 - 1)
		IfNotBlocked
		reached[1][11097] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11098, 11105) */
		reached[1][11098] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11104, 11105) */
		reached[1][11104] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5021: // STATE 11099 - mutant_243.pml:265 - [((_pid==1))] (11105:0:0 - 1)
		IfNotBlocked
		reached[1][11099] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11100, 11105) */
		reached[1][11100] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11104, 11105) */
		reached[1][11104] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5022: // STATE 11101 - mutant_243.pml:267 - [((_pid>1))] (11105:0:0 - 1)
		IfNotBlocked
		reached[1][11101] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11102, 11105) */
		reached[1][11102] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11104, 11105) */
		reached[1][11104] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5023: // STATE 11105 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11105] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5024: // STATE 11106 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11114:1 - 1)
		IfNotBlocked
		reached[1][11106] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11114, 11109, 11114) */
		reached[1][11109] = 1;
		;
		/* merge: j = (j+1)(11114, 11110, 11114) */
		reached[1][11110] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11115, 11114) */
		reached[1][11115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5025: // STATE 11110 - mutant_243.pml:475 - [j = (j+1)] (0:11114:1 - 5)
		IfNotBlocked
		reached[1][11110] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11115, 11114) */
		reached[1][11115] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5026: // STATE 11112 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][11112] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 5027: // STATE 11128 - mutant_243.pml:5 - [(((0==0)&&(12==0)))] (11139:0:0 - 1)
		IfNotBlocked
		reached[1][11128] = 1;
		if (!(((0==0)&&(12==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',7,9)(0, 11129, 11139) */
		reached[1][11129] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 7, 9);
		/* merge: .(goto)(0, 11137, 11139) */
		reached[1][11137] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5028: // STATE 11130 - mutant_243.pml:7 - [(((0==0)&&(12>0)))] (11139:0:0 - 1)
		IfNotBlocked
		reached[1][11130] = 1;
		if (!(((0==0)&&(12>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',7,12,9)(0, 11131, 11139) */
		reached[1][11131] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 7, 12, 9);
		/* merge: .(goto)(0, 11137, 11139) */
		reached[1][11137] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5029: // STATE 11132 - mutant_243.pml:9 - [(((0>0)&&(12==0)))] (11139:0:0 - 1)
		IfNotBlocked
		reached[1][11132] = 1;
		if (!(((0>0)&&(12==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,7,9)(0, 11133, 11139) */
		reached[1][11133] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 7, 9);
		/* merge: .(goto)(0, 11137, 11139) */
		reached[1][11137] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5030: // STATE 11134 - mutant_243.pml:11 - [(((0>0)&&(12>0)))] (11139:0:0 - 1)
		IfNotBlocked
		reached[1][11134] = 1;
		if (!(((0>0)&&(12>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,7,12,9)(0, 11135, 11139) */
		reached[1][11135] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 7, 12, 9);
		/* merge: .(goto)(0, 11137, 11139) */
		reached[1][11137] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5031: // STATE 11139 - mutant_243.pml:570 - [states[0] = 9] (0:0:1 - 5)
		IfNotBlocked
		reached[1][11139] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 9;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5032: // STATE 11141 - mutant_243.pml:662 - [((commands[0]==ABORT))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11141] = 1;
		if (!((now.commands[0]==13)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5033: // STATE 11142 - mutant_243.pml:663 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11142] = 1;
		spin_assert((((now.states[0]==2)||(now.states[0]==3))||(now.states[0]==7)), "(((states[0]==2)||(states[0]==3))||(states[0]==7))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 5034: // STATE 11143 - mutant_243.pml:5 - [(((0==0)&&(13==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11143] = 1;
		if (!(((0==0)&&(13==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5035: // STATE 11144 - mutant_243.pml:6 - [printf('Supervisor: (%e, _) -> %e\\n',states[0],10)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11144] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", now.states[0], 10);
		_m = 3; goto P999; /* 0 */
	case 5036: // STATE 11145 - mutant_243.pml:7 - [(((0==0)&&(13>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11145] = 1;
		if (!(((0==0)&&(13>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5037: // STATE 11146 - mutant_243.pml:8 - [printf('Supervisor: (%e, %e) -> %e\\n',states[0],13,10)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11146] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", now.states[0], 13, 10);
		_m = 3; goto P999; /* 0 */
	case 5038: // STATE 11147 - mutant_243.pml:9 - [(((0>0)&&(13==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11147] = 1;
		if (!(((0>0)&&(13==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5039: // STATE 11148 - mutant_243.pml:10 - [printf('Worker %d: (%e, _) -> %e\\n',0,states[0],10)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11148] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, now.states[0], 10);
		_m = 3; goto P999; /* 0 */
	case 5040: // STATE 11149 - mutant_243.pml:11 - [(((0>0)&&(13>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11149] = 1;
		if (!(((0>0)&&(13>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5041: // STATE 11150 - mutant_243.pml:12 - [printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],13,10)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11150] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, now.states[0], 13, 10);
		_m = 3; goto P999; /* 0 */
	case 5042: // STATE 11154 - mutant_243.pml:564 - [states[0] = 10] (0:0:1 - 5)
		IfNotBlocked
		reached[1][11154] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 10;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5043: // STATE 11155 - mutant_243.pml:552 - [((10==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11155] = 1;
		if (!((10==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5044: // STATE 11156 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11156] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5045: // STATE 11157 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11157] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 5046: // STATE 11158 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11158] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5047: // STATE 11160 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11160] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5048: // STATE 11161 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11161] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5049: // STATE 11162 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11162] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5050: // STATE 11163 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11163] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5051: // STATE 11164 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (11184:0:1 - 1)
		IfNotBlocked
		reached[1][11164] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11184, 11165, 11184) */
		reached[1][11165] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11184, 11166, 11184) */
		reached[1][11166] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5052: // STATE 11182 - mutant_243.pml:306 - [.(goto)] (0:11184:0 - 6)
		IfNotBlocked
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5053: // STATE 11167 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (11184:0:1 - 1)
		IfNotBlocked
		reached[1][11167] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11184, 11168, 11184) */
		reached[1][11168] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11184, 11169, 11184) */
		reached[1][11169] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5054: // STATE 11170 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11184:0:1 - 1)
		IfNotBlocked
		reached[1][11170] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11184, 11171, 11184) */
		reached[1][11171] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11184, 11172, 11184) */
		reached[1][11172] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5055: // STATE 11173 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11184:0:1 - 1)
		IfNotBlocked
		reached[1][11173] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11184, 11174, 11184) */
		reached[1][11174] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11184, 11175, 11184) */
		reached[1][11175] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5056: // STATE 11176 - mutant_243.pml:300 - [((START==ABORT))] (11184:0:1 - 1)
		IfNotBlocked
		reached[1][11176] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11184, 11177, 11184) */
		reached[1][11177] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11184, 11178, 11184) */
		reached[1][11178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5057: // STATE 11180 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11184:0 - 1)
		IfNotBlocked
		reached[1][11180] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11184, 11182, 11184) */
		reached[1][11182] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5058: // STATE 11184 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11184] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5059: // STATE 11186 - mutant_243.pml:227 - [((_pid==0))] (11194:0:0 - 1)
		IfNotBlocked
		reached[1][11186] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11187, 11194) */
		reached[1][11187] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11193, 11194) */
		reached[1][11193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5060: // STATE 11188 - mutant_243.pml:229 - [((_pid==1))] (11194:0:0 - 1)
		IfNotBlocked
		reached[1][11188] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11189, 11194) */
		reached[1][11189] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11193, 11194) */
		reached[1][11193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5061: // STATE 11190 - mutant_243.pml:231 - [((_pid>1))] (11194:0:0 - 1)
		IfNotBlocked
		reached[1][11190] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11191, 11194) */
		reached[1][11191] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11193, 11194) */
		reached[1][11193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5062: // STATE 11194 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11194] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5063: // STATE 11195 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11323:1 - 1)
		IfNotBlocked
		reached[1][11195] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11323, 11200, 11323) */
		reached[1][11200] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5064: // STATE 11198 - mutant_243.pml:312 - [(1)] (11323:0:1 - 1)
		IfNotBlocked
		reached[1][11198] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11323, 11200, 11323) */
		reached[1][11200] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5065: // STATE 11202 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11202] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5066: // STATE 11203 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (11237:0:1 - 1)
		IfNotBlocked
		reached[1][11203] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11237, 11204, 11237) */
		reached[1][11204] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11237, 11205, 11237) */
		reached[1][11205] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5067: // STATE 11221 - mutant_243.pml:336 - [.(goto)] (0:11237:0 - 6)
		IfNotBlocked
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5068: // STATE 11206 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (11237:0:1 - 1)
		IfNotBlocked
		reached[1][11206] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11237, 11207, 11237) */
		reached[1][11207] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11237, 11208, 11237) */
		reached[1][11208] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5069: // STATE 11209 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11237:0:1 - 1)
		IfNotBlocked
		reached[1][11209] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11237, 11210, 11237) */
		reached[1][11210] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11237, 11211, 11237) */
		reached[1][11211] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5070: // STATE 11212 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11237:0:1 - 1)
		IfNotBlocked
		reached[1][11212] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11237, 11213, 11237) */
		reached[1][11213] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11237, 11214, 11237) */
		reached[1][11214] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5071: // STATE 11215 - mutant_243.pml:330 - [((PAUSE==ABORT))] (11237:0:1 - 1)
		IfNotBlocked
		reached[1][11215] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11237, 11216, 11237) */
		reached[1][11216] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11237, 11217, 11237) */
		reached[1][11217] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5072: // STATE 11219 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11237:0 - 1)
		IfNotBlocked
		reached[1][11219] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11237, 11221, 11237) */
		reached[1][11221] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5073: // STATE 11224 - mutant_243.pml:239 - [((_pid==0))] (11232:0:0 - 1)
		IfNotBlocked
		reached[1][11224] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11225, 11232) */
		reached[1][11225] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11231, 11232) */
		reached[1][11231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5074: // STATE 11226 - mutant_243.pml:241 - [((_pid==1))] (11232:0:0 - 1)
		IfNotBlocked
		reached[1][11226] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11227, 11232) */
		reached[1][11227] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11231, 11232) */
		reached[1][11231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5075: // STATE 11228 - mutant_243.pml:243 - [((_pid>1))] (11232:0:0 - 1)
		IfNotBlocked
		reached[1][11228] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11229, 11232) */
		reached[1][11229] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11231, 11232) */
		reached[1][11231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5076: // STATE 11232 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11232] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5077: // STATE 11233 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11323:1 - 1)
		IfNotBlocked
		reached[1][11233] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11323, 11238, 11323) */
		reached[1][11238] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5078: // STATE 11236 - mutant_243.pml:341 - [(1)] (11323:0:1 - 1)
		IfNotBlocked
		reached[1][11236] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11323, 11238, 11323) */
		reached[1][11238] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5079: // STATE 11240 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11240] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5080: // STATE 11241 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (11275:0:1 - 1)
		IfNotBlocked
		reached[1][11241] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11275, 11242, 11275) */
		reached[1][11242] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11275, 11243, 11275) */
		reached[1][11243] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5081: // STATE 11259 - mutant_243.pml:365 - [.(goto)] (0:11275:0 - 6)
		IfNotBlocked
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5082: // STATE 11244 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (11275:0:1 - 1)
		IfNotBlocked
		reached[1][11244] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11275, 11245, 11275) */
		reached[1][11245] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11275, 11246, 11275) */
		reached[1][11246] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5083: // STATE 11247 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11275:0:1 - 1)
		IfNotBlocked
		reached[1][11247] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11275, 11248, 11275) */
		reached[1][11248] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11275, 11249, 11275) */
		reached[1][11249] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5084: // STATE 11250 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11275:0:1 - 1)
		IfNotBlocked
		reached[1][11250] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11275, 11251, 11275) */
		reached[1][11251] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11275, 11252, 11275) */
		reached[1][11252] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5085: // STATE 11253 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (11275:0:1 - 1)
		IfNotBlocked
		reached[1][11253] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11275, 11254, 11275) */
		reached[1][11254] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11275, 11255, 11275) */
		reached[1][11255] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5086: // STATE 11257 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11275:0 - 1)
		IfNotBlocked
		reached[1][11257] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11275, 11259, 11275) */
		reached[1][11259] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5087: // STATE 11262 - mutant_243.pml:251 - [((_pid==0))] (11270:0:0 - 1)
		IfNotBlocked
		reached[1][11262] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11263, 11270) */
		reached[1][11263] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11269, 11270) */
		reached[1][11269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5088: // STATE 11264 - mutant_243.pml:253 - [((_pid==1))] (11270:0:0 - 1)
		IfNotBlocked
		reached[1][11264] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11265, 11270) */
		reached[1][11265] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11269, 11270) */
		reached[1][11269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5089: // STATE 11266 - mutant_243.pml:255 - [((_pid>1))] (11270:0:0 - 1)
		IfNotBlocked
		reached[1][11266] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11267, 11270) */
		reached[1][11267] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11269, 11270) */
		reached[1][11269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5090: // STATE 11270 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11270] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5091: // STATE 11271 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11323:1 - 1)
		IfNotBlocked
		reached[1][11271] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11323, 11276, 11323) */
		reached[1][11276] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5092: // STATE 11274 - mutant_243.pml:370 - [(1)] (11323:0:1 - 1)
		IfNotBlocked
		reached[1][11274] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11323, 11276, 11323) */
		reached[1][11276] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5093: // STATE 11278 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11278] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5094: // STATE 11279 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (11313:0:1 - 1)
		IfNotBlocked
		reached[1][11279] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11313, 11280, 11313) */
		reached[1][11280] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11313, 11281, 11313) */
		reached[1][11281] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5095: // STATE 11297 - mutant_243.pml:394 - [.(goto)] (0:11313:0 - 6)
		IfNotBlocked
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5096: // STATE 11282 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (11313:0:1 - 1)
		IfNotBlocked
		reached[1][11282] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11313, 11283, 11313) */
		reached[1][11283] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11313, 11284, 11313) */
		reached[1][11284] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5097: // STATE 11285 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11313:0:1 - 1)
		IfNotBlocked
		reached[1][11285] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11313, 11286, 11313) */
		reached[1][11286] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11313, 11287, 11313) */
		reached[1][11287] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5098: // STATE 11288 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11313:0:1 - 1)
		IfNotBlocked
		reached[1][11288] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11313, 11289, 11313) */
		reached[1][11289] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11313, 11290, 11313) */
		reached[1][11290] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5099: // STATE 11291 - mutant_243.pml:388 - [((STOP==ABORT))] (11313:0:1 - 1)
		IfNotBlocked
		reached[1][11291] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11313, 11292, 11313) */
		reached[1][11292] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11313, 11293, 11313) */
		reached[1][11293] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5100: // STATE 11295 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11313:0 - 1)
		IfNotBlocked
		reached[1][11295] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11313, 11297, 11313) */
		reached[1][11297] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5101: // STATE 11300 - mutant_243.pml:263 - [((_pid==0))] (11308:0:0 - 1)
		IfNotBlocked
		reached[1][11300] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11301, 11308) */
		reached[1][11301] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11307, 11308) */
		reached[1][11307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5102: // STATE 11302 - mutant_243.pml:265 - [((_pid==1))] (11308:0:0 - 1)
		IfNotBlocked
		reached[1][11302] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11303, 11308) */
		reached[1][11303] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11307, 11308) */
		reached[1][11307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5103: // STATE 11304 - mutant_243.pml:267 - [((_pid>1))] (11308:0:0 - 1)
		IfNotBlocked
		reached[1][11304] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11305, 11308) */
		reached[1][11305] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11307, 11308) */
		reached[1][11307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5104: // STATE 11308 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11308] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5105: // STATE 11309 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11323:1 - 1)
		IfNotBlocked
		reached[1][11309] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11323, 11314, 11323) */
		reached[1][11314] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5106: // STATE 11312 - mutant_243.pml:399 - [(1)] (11323:0:1 - 1)
		IfNotBlocked
		reached[1][11312] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11323, 11314, 11323) */
		reached[1][11314] = 1;
		;
		/* merge: .(goto)(11323, 11317, 11323) */
		reached[1][11317] = 1;
		;
		/* merge: j = (j+1)(11323, 11319, 11323) */
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5107: // STATE 11319 - mutant_243.pml:435 - [j = (j+1)] (0:11323:1 - 13)
		IfNotBlocked
		reached[1][11319] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11324, 11323) */
		reached[1][11324] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5108: // STATE 11321 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11321] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5109: // STATE 11328 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11328] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5110: // STATE 11329 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11329] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5111: // STATE 11330 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11330] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5112: // STATE 11331 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (11351:0:1 - 1)
		IfNotBlocked
		reached[1][11331] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11351, 11332, 11351) */
		reached[1][11332] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11351, 11333, 11351) */
		reached[1][11333] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5113: // STATE 11349 - mutant_243.pml:306 - [.(goto)] (0:11351:0 - 6)
		IfNotBlocked
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5114: // STATE 11334 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (11351:0:1 - 1)
		IfNotBlocked
		reached[1][11334] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11351, 11335, 11351) */
		reached[1][11335] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11351, 11336, 11351) */
		reached[1][11336] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5115: // STATE 11337 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11351:0:1 - 1)
		IfNotBlocked
		reached[1][11337] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11351, 11338, 11351) */
		reached[1][11338] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11351, 11339, 11351) */
		reached[1][11339] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5116: // STATE 11340 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11351:0:1 - 1)
		IfNotBlocked
		reached[1][11340] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11351, 11341, 11351) */
		reached[1][11341] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11351, 11342, 11351) */
		reached[1][11342] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5117: // STATE 11343 - mutant_243.pml:300 - [((START==ABORT))] (11351:0:1 - 1)
		IfNotBlocked
		reached[1][11343] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11351, 11344, 11351) */
		reached[1][11344] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11351, 11345, 11351) */
		reached[1][11345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5118: // STATE 11347 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11351:0 - 1)
		IfNotBlocked
		reached[1][11347] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11351, 11349, 11351) */
		reached[1][11349] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5119: // STATE 11351 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11351] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5120: // STATE 11353 - mutant_243.pml:227 - [((_pid==0))] (11361:0:0 - 1)
		IfNotBlocked
		reached[1][11353] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11354, 11361) */
		reached[1][11354] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11360, 11361) */
		reached[1][11360] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5121: // STATE 11355 - mutant_243.pml:229 - [((_pid==1))] (11361:0:0 - 1)
		IfNotBlocked
		reached[1][11355] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11356, 11361) */
		reached[1][11356] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11360, 11361) */
		reached[1][11360] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5122: // STATE 11357 - mutant_243.pml:231 - [((_pid>1))] (11361:0:0 - 1)
		IfNotBlocked
		reached[1][11357] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11358, 11361) */
		reached[1][11358] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11360, 11361) */
		reached[1][11360] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5123: // STATE 11361 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11361] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5124: // STATE 11362 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11490:1 - 1)
		IfNotBlocked
		reached[1][11362] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11490, 11367, 11490) */
		reached[1][11367] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5125: // STATE 11365 - mutant_243.pml:312 - [(1)] (11490:0:1 - 1)
		IfNotBlocked
		reached[1][11365] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11490, 11367, 11490) */
		reached[1][11367] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5126: // STATE 11369 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11369] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5127: // STATE 11370 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (11404:0:1 - 1)
		IfNotBlocked
		reached[1][11370] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11404, 11371, 11404) */
		reached[1][11371] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11404, 11372, 11404) */
		reached[1][11372] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5128: // STATE 11388 - mutant_243.pml:336 - [.(goto)] (0:11404:0 - 6)
		IfNotBlocked
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5129: // STATE 11373 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (11404:0:1 - 1)
		IfNotBlocked
		reached[1][11373] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11404, 11374, 11404) */
		reached[1][11374] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11404, 11375, 11404) */
		reached[1][11375] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5130: // STATE 11376 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11404:0:1 - 1)
		IfNotBlocked
		reached[1][11376] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11404, 11377, 11404) */
		reached[1][11377] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11404, 11378, 11404) */
		reached[1][11378] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5131: // STATE 11379 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11404:0:1 - 1)
		IfNotBlocked
		reached[1][11379] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11404, 11380, 11404) */
		reached[1][11380] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11404, 11381, 11404) */
		reached[1][11381] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5132: // STATE 11382 - mutant_243.pml:330 - [((PAUSE==ABORT))] (11404:0:1 - 1)
		IfNotBlocked
		reached[1][11382] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11404, 11383, 11404) */
		reached[1][11383] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11404, 11384, 11404) */
		reached[1][11384] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5133: // STATE 11386 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11404:0 - 1)
		IfNotBlocked
		reached[1][11386] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11404, 11388, 11404) */
		reached[1][11388] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5134: // STATE 11391 - mutant_243.pml:239 - [((_pid==0))] (11399:0:0 - 1)
		IfNotBlocked
		reached[1][11391] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11392, 11399) */
		reached[1][11392] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11398, 11399) */
		reached[1][11398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5135: // STATE 11393 - mutant_243.pml:241 - [((_pid==1))] (11399:0:0 - 1)
		IfNotBlocked
		reached[1][11393] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11394, 11399) */
		reached[1][11394] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11398, 11399) */
		reached[1][11398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5136: // STATE 11395 - mutant_243.pml:243 - [((_pid>1))] (11399:0:0 - 1)
		IfNotBlocked
		reached[1][11395] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11396, 11399) */
		reached[1][11396] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11398, 11399) */
		reached[1][11398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5137: // STATE 11399 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11399] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5138: // STATE 11400 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11490:1 - 1)
		IfNotBlocked
		reached[1][11400] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11490, 11405, 11490) */
		reached[1][11405] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5139: // STATE 11403 - mutant_243.pml:341 - [(1)] (11490:0:1 - 1)
		IfNotBlocked
		reached[1][11403] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11490, 11405, 11490) */
		reached[1][11405] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5140: // STATE 11407 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11407] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5141: // STATE 11408 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (11442:0:1 - 1)
		IfNotBlocked
		reached[1][11408] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11442, 11409, 11442) */
		reached[1][11409] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11442, 11410, 11442) */
		reached[1][11410] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5142: // STATE 11426 - mutant_243.pml:365 - [.(goto)] (0:11442:0 - 6)
		IfNotBlocked
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5143: // STATE 11411 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (11442:0:1 - 1)
		IfNotBlocked
		reached[1][11411] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11442, 11412, 11442) */
		reached[1][11412] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11442, 11413, 11442) */
		reached[1][11413] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5144: // STATE 11414 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11442:0:1 - 1)
		IfNotBlocked
		reached[1][11414] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11442, 11415, 11442) */
		reached[1][11415] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11442, 11416, 11442) */
		reached[1][11416] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5145: // STATE 11417 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11442:0:1 - 1)
		IfNotBlocked
		reached[1][11417] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11442, 11418, 11442) */
		reached[1][11418] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11442, 11419, 11442) */
		reached[1][11419] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5146: // STATE 11420 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (11442:0:1 - 1)
		IfNotBlocked
		reached[1][11420] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11442, 11421, 11442) */
		reached[1][11421] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11442, 11422, 11442) */
		reached[1][11422] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5147: // STATE 11424 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11442:0 - 1)
		IfNotBlocked
		reached[1][11424] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11442, 11426, 11442) */
		reached[1][11426] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5148: // STATE 11429 - mutant_243.pml:251 - [((_pid==0))] (11437:0:0 - 1)
		IfNotBlocked
		reached[1][11429] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11430, 11437) */
		reached[1][11430] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11436, 11437) */
		reached[1][11436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5149: // STATE 11431 - mutant_243.pml:253 - [((_pid==1))] (11437:0:0 - 1)
		IfNotBlocked
		reached[1][11431] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11432, 11437) */
		reached[1][11432] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11436, 11437) */
		reached[1][11436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5150: // STATE 11433 - mutant_243.pml:255 - [((_pid>1))] (11437:0:0 - 1)
		IfNotBlocked
		reached[1][11433] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11434, 11437) */
		reached[1][11434] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11436, 11437) */
		reached[1][11436] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5151: // STATE 11437 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11437] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5152: // STATE 11438 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11490:1 - 1)
		IfNotBlocked
		reached[1][11438] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11490, 11443, 11490) */
		reached[1][11443] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5153: // STATE 11441 - mutant_243.pml:370 - [(1)] (11490:0:1 - 1)
		IfNotBlocked
		reached[1][11441] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11490, 11443, 11490) */
		reached[1][11443] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5154: // STATE 11445 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11445] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5155: // STATE 11446 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (11480:0:1 - 1)
		IfNotBlocked
		reached[1][11446] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11480, 11447, 11480) */
		reached[1][11447] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11480, 11448, 11480) */
		reached[1][11448] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5156: // STATE 11464 - mutant_243.pml:394 - [.(goto)] (0:11480:0 - 6)
		IfNotBlocked
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5157: // STATE 11449 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (11480:0:1 - 1)
		IfNotBlocked
		reached[1][11449] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11480, 11450, 11480) */
		reached[1][11450] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11480, 11451, 11480) */
		reached[1][11451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5158: // STATE 11452 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11480:0:1 - 1)
		IfNotBlocked
		reached[1][11452] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11480, 11453, 11480) */
		reached[1][11453] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11480, 11454, 11480) */
		reached[1][11454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5159: // STATE 11455 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11480:0:1 - 1)
		IfNotBlocked
		reached[1][11455] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11480, 11456, 11480) */
		reached[1][11456] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11480, 11457, 11480) */
		reached[1][11457] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5160: // STATE 11458 - mutant_243.pml:388 - [((STOP==ABORT))] (11480:0:1 - 1)
		IfNotBlocked
		reached[1][11458] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11480, 11459, 11480) */
		reached[1][11459] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11480, 11460, 11480) */
		reached[1][11460] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5161: // STATE 11462 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11480:0 - 1)
		IfNotBlocked
		reached[1][11462] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11480, 11464, 11480) */
		reached[1][11464] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5162: // STATE 11467 - mutant_243.pml:263 - [((_pid==0))] (11475:0:0 - 1)
		IfNotBlocked
		reached[1][11467] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11468, 11475) */
		reached[1][11468] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11474, 11475) */
		reached[1][11474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5163: // STATE 11469 - mutant_243.pml:265 - [((_pid==1))] (11475:0:0 - 1)
		IfNotBlocked
		reached[1][11469] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11470, 11475) */
		reached[1][11470] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11474, 11475) */
		reached[1][11474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5164: // STATE 11471 - mutant_243.pml:267 - [((_pid>1))] (11475:0:0 - 1)
		IfNotBlocked
		reached[1][11471] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11472, 11475) */
		reached[1][11472] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11474, 11475) */
		reached[1][11474] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5165: // STATE 11475 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11475] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5166: // STATE 11476 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11490:1 - 1)
		IfNotBlocked
		reached[1][11476] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11490, 11481, 11490) */
		reached[1][11481] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5167: // STATE 11479 - mutant_243.pml:399 - [(1)] (11490:0:1 - 1)
		IfNotBlocked
		reached[1][11479] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11490, 11481, 11490) */
		reached[1][11481] = 1;
		;
		/* merge: .(goto)(11490, 11484, 11490) */
		reached[1][11484] = 1;
		;
		/* merge: j = (j-1)(11490, 11486, 11490) */
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5168: // STATE 11486 - mutant_243.pml:446 - [j = (j-1)] (0:11490:1 - 13)
		IfNotBlocked
		reached[1][11486] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11491, 11490) */
		reached[1][11491] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5169: // STATE 11488 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11488] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5170: // STATE 11498 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11498] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 5171: // STATE 11499 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11499] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5172: // STATE 11500 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11500] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5173: // STATE 11501 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (11521:0:1 - 1)
		IfNotBlocked
		reached[1][11501] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11521, 11502, 11521) */
		reached[1][11502] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11521, 11503, 11521) */
		reached[1][11503] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5174: // STATE 11519 - mutant_243.pml:306 - [.(goto)] (0:11521:0 - 6)
		IfNotBlocked
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5175: // STATE 11504 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (11521:0:1 - 1)
		IfNotBlocked
		reached[1][11504] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11521, 11505, 11521) */
		reached[1][11505] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11521, 11506, 11521) */
		reached[1][11506] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5176: // STATE 11507 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11521:0:1 - 1)
		IfNotBlocked
		reached[1][11507] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11521, 11508, 11521) */
		reached[1][11508] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11521, 11509, 11521) */
		reached[1][11509] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5177: // STATE 11510 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11521:0:1 - 1)
		IfNotBlocked
		reached[1][11510] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11521, 11511, 11521) */
		reached[1][11511] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11521, 11512, 11521) */
		reached[1][11512] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5178: // STATE 11513 - mutant_243.pml:300 - [((START==ABORT))] (11521:0:1 - 1)
		IfNotBlocked
		reached[1][11513] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11521, 11514, 11521) */
		reached[1][11514] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11521, 11515, 11521) */
		reached[1][11515] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5179: // STATE 11517 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11521:0 - 1)
		IfNotBlocked
		reached[1][11517] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11521, 11519, 11521) */
		reached[1][11519] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5180: // STATE 11521 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11521] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5181: // STATE 11523 - mutant_243.pml:227 - [((_pid==0))] (11531:0:0 - 1)
		IfNotBlocked
		reached[1][11523] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11524, 11531) */
		reached[1][11524] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11530, 11531) */
		reached[1][11530] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5182: // STATE 11525 - mutant_243.pml:229 - [((_pid==1))] (11531:0:0 - 1)
		IfNotBlocked
		reached[1][11525] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11526, 11531) */
		reached[1][11526] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11530, 11531) */
		reached[1][11530] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5183: // STATE 11527 - mutant_243.pml:231 - [((_pid>1))] (11531:0:0 - 1)
		IfNotBlocked
		reached[1][11527] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11528, 11531) */
		reached[1][11528] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11530, 11531) */
		reached[1][11530] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5184: // STATE 11531 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11531] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5185: // STATE 11532 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11660:1 - 1)
		IfNotBlocked
		reached[1][11532] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11660, 11537, 11660) */
		reached[1][11537] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5186: // STATE 11535 - mutant_243.pml:312 - [(1)] (11660:0:1 - 1)
		IfNotBlocked
		reached[1][11535] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11660, 11537, 11660) */
		reached[1][11537] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5187: // STATE 11539 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11539] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5188: // STATE 11540 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (11574:0:1 - 1)
		IfNotBlocked
		reached[1][11540] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11574, 11541, 11574) */
		reached[1][11541] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11574, 11542, 11574) */
		reached[1][11542] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5189: // STATE 11558 - mutant_243.pml:336 - [.(goto)] (0:11574:0 - 6)
		IfNotBlocked
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5190: // STATE 11543 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (11574:0:1 - 1)
		IfNotBlocked
		reached[1][11543] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11574, 11544, 11574) */
		reached[1][11544] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11574, 11545, 11574) */
		reached[1][11545] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5191: // STATE 11546 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11574:0:1 - 1)
		IfNotBlocked
		reached[1][11546] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11574, 11547, 11574) */
		reached[1][11547] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11574, 11548, 11574) */
		reached[1][11548] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5192: // STATE 11549 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11574:0:1 - 1)
		IfNotBlocked
		reached[1][11549] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11574, 11550, 11574) */
		reached[1][11550] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11574, 11551, 11574) */
		reached[1][11551] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5193: // STATE 11552 - mutant_243.pml:330 - [((PAUSE==ABORT))] (11574:0:1 - 1)
		IfNotBlocked
		reached[1][11552] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11574, 11553, 11574) */
		reached[1][11553] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11574, 11554, 11574) */
		reached[1][11554] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5194: // STATE 11556 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11574:0 - 1)
		IfNotBlocked
		reached[1][11556] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11574, 11558, 11574) */
		reached[1][11558] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5195: // STATE 11561 - mutant_243.pml:239 - [((_pid==0))] (11569:0:0 - 1)
		IfNotBlocked
		reached[1][11561] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11562, 11569) */
		reached[1][11562] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11568, 11569) */
		reached[1][11568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5196: // STATE 11563 - mutant_243.pml:241 - [((_pid==1))] (11569:0:0 - 1)
		IfNotBlocked
		reached[1][11563] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11564, 11569) */
		reached[1][11564] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11568, 11569) */
		reached[1][11568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5197: // STATE 11565 - mutant_243.pml:243 - [((_pid>1))] (11569:0:0 - 1)
		IfNotBlocked
		reached[1][11565] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11566, 11569) */
		reached[1][11566] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11568, 11569) */
		reached[1][11568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5198: // STATE 11569 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11569] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5199: // STATE 11570 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11660:1 - 1)
		IfNotBlocked
		reached[1][11570] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11660, 11575, 11660) */
		reached[1][11575] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5200: // STATE 11573 - mutant_243.pml:341 - [(1)] (11660:0:1 - 1)
		IfNotBlocked
		reached[1][11573] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11660, 11575, 11660) */
		reached[1][11575] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5201: // STATE 11577 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11577] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5202: // STATE 11578 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (11612:0:1 - 1)
		IfNotBlocked
		reached[1][11578] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11612, 11579, 11612) */
		reached[1][11579] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11612, 11580, 11612) */
		reached[1][11580] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5203: // STATE 11596 - mutant_243.pml:365 - [.(goto)] (0:11612:0 - 6)
		IfNotBlocked
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5204: // STATE 11581 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (11612:0:1 - 1)
		IfNotBlocked
		reached[1][11581] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11612, 11582, 11612) */
		reached[1][11582] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11612, 11583, 11612) */
		reached[1][11583] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5205: // STATE 11584 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11612:0:1 - 1)
		IfNotBlocked
		reached[1][11584] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11612, 11585, 11612) */
		reached[1][11585] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11612, 11586, 11612) */
		reached[1][11586] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5206: // STATE 11587 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11612:0:1 - 1)
		IfNotBlocked
		reached[1][11587] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11612, 11588, 11612) */
		reached[1][11588] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11612, 11589, 11612) */
		reached[1][11589] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5207: // STATE 11590 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (11612:0:1 - 1)
		IfNotBlocked
		reached[1][11590] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11612, 11591, 11612) */
		reached[1][11591] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11612, 11592, 11612) */
		reached[1][11592] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5208: // STATE 11594 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11612:0 - 1)
		IfNotBlocked
		reached[1][11594] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11612, 11596, 11612) */
		reached[1][11596] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5209: // STATE 11599 - mutant_243.pml:251 - [((_pid==0))] (11607:0:0 - 1)
		IfNotBlocked
		reached[1][11599] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11600, 11607) */
		reached[1][11600] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11606, 11607) */
		reached[1][11606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5210: // STATE 11601 - mutant_243.pml:253 - [((_pid==1))] (11607:0:0 - 1)
		IfNotBlocked
		reached[1][11601] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11602, 11607) */
		reached[1][11602] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11606, 11607) */
		reached[1][11606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5211: // STATE 11603 - mutant_243.pml:255 - [((_pid>1))] (11607:0:0 - 1)
		IfNotBlocked
		reached[1][11603] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11604, 11607) */
		reached[1][11604] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11606, 11607) */
		reached[1][11606] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5212: // STATE 11607 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11607] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5213: // STATE 11608 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11660:1 - 1)
		IfNotBlocked
		reached[1][11608] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11660, 11613, 11660) */
		reached[1][11613] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5214: // STATE 11611 - mutant_243.pml:370 - [(1)] (11660:0:1 - 1)
		IfNotBlocked
		reached[1][11611] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11660, 11613, 11660) */
		reached[1][11613] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5215: // STATE 11615 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11615] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5216: // STATE 11616 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (11650:0:1 - 1)
		IfNotBlocked
		reached[1][11616] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11650, 11617, 11650) */
		reached[1][11617] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11650, 11618, 11650) */
		reached[1][11618] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5217: // STATE 11634 - mutant_243.pml:394 - [.(goto)] (0:11650:0 - 6)
		IfNotBlocked
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5218: // STATE 11619 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (11650:0:1 - 1)
		IfNotBlocked
		reached[1][11619] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11650, 11620, 11650) */
		reached[1][11620] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11650, 11621, 11650) */
		reached[1][11621] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5219: // STATE 11622 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11650:0:1 - 1)
		IfNotBlocked
		reached[1][11622] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11650, 11623, 11650) */
		reached[1][11623] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11650, 11624, 11650) */
		reached[1][11624] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5220: // STATE 11625 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11650:0:1 - 1)
		IfNotBlocked
		reached[1][11625] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11650, 11626, 11650) */
		reached[1][11626] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11650, 11627, 11650) */
		reached[1][11627] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5221: // STATE 11628 - mutant_243.pml:388 - [((STOP==ABORT))] (11650:0:1 - 1)
		IfNotBlocked
		reached[1][11628] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11650, 11629, 11650) */
		reached[1][11629] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11650, 11630, 11650) */
		reached[1][11630] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5222: // STATE 11632 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11650:0 - 1)
		IfNotBlocked
		reached[1][11632] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11650, 11634, 11650) */
		reached[1][11634] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5223: // STATE 11637 - mutant_243.pml:263 - [((_pid==0))] (11645:0:0 - 1)
		IfNotBlocked
		reached[1][11637] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11638, 11645) */
		reached[1][11638] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11644, 11645) */
		reached[1][11644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5224: // STATE 11639 - mutant_243.pml:265 - [((_pid==1))] (11645:0:0 - 1)
		IfNotBlocked
		reached[1][11639] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11640, 11645) */
		reached[1][11640] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11644, 11645) */
		reached[1][11644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5225: // STATE 11641 - mutant_243.pml:267 - [((_pid>1))] (11645:0:0 - 1)
		IfNotBlocked
		reached[1][11641] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11642, 11645) */
		reached[1][11642] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11644, 11645) */
		reached[1][11644] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5226: // STATE 11645 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11645] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5227: // STATE 11646 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11660:1 - 1)
		IfNotBlocked
		reached[1][11646] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11660, 11651, 11660) */
		reached[1][11651] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5228: // STATE 11649 - mutant_243.pml:399 - [(1)] (11660:0:1 - 1)
		IfNotBlocked
		reached[1][11649] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11660, 11651, 11660) */
		reached[1][11651] = 1;
		;
		/* merge: .(goto)(11660, 11654, 11660) */
		reached[1][11654] = 1;
		;
		/* merge: j = (j+1)(11660, 11656, 11660) */
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5229: // STATE 11656 - mutant_243.pml:435 - [j = (j+1)] (0:11660:1 - 13)
		IfNotBlocked
		reached[1][11656] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11661, 11660) */
		reached[1][11661] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5230: // STATE 11658 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11658] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5231: // STATE 11664 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11664] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5232: // STATE 11665 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11665] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5233: // STATE 11666 - mutant_243.pml:227 - [((_pid==0))] (11674:0:0 - 1)
		IfNotBlocked
		reached[1][11666] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11667, 11674) */
		reached[1][11667] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11673, 11674) */
		reached[1][11673] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5234: // STATE 11668 - mutant_243.pml:229 - [((_pid==1))] (11674:0:0 - 1)
		IfNotBlocked
		reached[1][11668] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11669, 11674) */
		reached[1][11669] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11673, 11674) */
		reached[1][11673] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5235: // STATE 11670 - mutant_243.pml:231 - [((_pid>1))] (11674:0:0 - 1)
		IfNotBlocked
		reached[1][11670] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11671, 11674) */
		reached[1][11671] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11673, 11674) */
		reached[1][11673] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5236: // STATE 11674 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11674] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5237: // STATE 11675 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11719:1 - 1)
		IfNotBlocked
		reached[1][11675] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11719, 11714, 11719) */
		reached[1][11714] = 1;
		;
		/* merge: j = (j+1)(11719, 11715, 11719) */
		reached[1][11715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11720, 11719) */
		reached[1][11720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5238: // STATE 11677 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11677] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5239: // STATE 11678 - mutant_243.pml:251 - [((_pid==0))] (11686:0:0 - 1)
		IfNotBlocked
		reached[1][11678] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11679, 11686) */
		reached[1][11679] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11685, 11686) */
		reached[1][11685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5240: // STATE 11680 - mutant_243.pml:253 - [((_pid==1))] (11686:0:0 - 1)
		IfNotBlocked
		reached[1][11680] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11681, 11686) */
		reached[1][11681] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11685, 11686) */
		reached[1][11685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5241: // STATE 11682 - mutant_243.pml:255 - [((_pid>1))] (11686:0:0 - 1)
		IfNotBlocked
		reached[1][11682] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11683, 11686) */
		reached[1][11683] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11685, 11686) */
		reached[1][11685] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5242: // STATE 11686 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11686] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5243: // STATE 11687 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11719:1 - 1)
		IfNotBlocked
		reached[1][11687] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11719, 11714, 11719) */
		reached[1][11714] = 1;
		;
		/* merge: j = (j+1)(11719, 11715, 11719) */
		reached[1][11715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11720, 11719) */
		reached[1][11720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5244: // STATE 11689 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11689] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5245: // STATE 11690 - mutant_243.pml:239 - [((_pid==0))] (11698:0:0 - 1)
		IfNotBlocked
		reached[1][11690] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11691, 11698) */
		reached[1][11691] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11697, 11698) */
		reached[1][11697] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5246: // STATE 11692 - mutant_243.pml:241 - [((_pid==1))] (11698:0:0 - 1)
		IfNotBlocked
		reached[1][11692] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11693, 11698) */
		reached[1][11693] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11697, 11698) */
		reached[1][11697] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5247: // STATE 11694 - mutant_243.pml:243 - [((_pid>1))] (11698:0:0 - 1)
		IfNotBlocked
		reached[1][11694] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11695, 11698) */
		reached[1][11695] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11697, 11698) */
		reached[1][11697] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5248: // STATE 11698 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11698] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5249: // STATE 11699 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11719:1 - 1)
		IfNotBlocked
		reached[1][11699] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11719, 11714, 11719) */
		reached[1][11714] = 1;
		;
		/* merge: j = (j+1)(11719, 11715, 11719) */
		reached[1][11715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11720, 11719) */
		reached[1][11720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5250: // STATE 11701 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11701] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5251: // STATE 11702 - mutant_243.pml:263 - [((_pid==0))] (11710:0:0 - 1)
		IfNotBlocked
		reached[1][11702] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11703, 11710) */
		reached[1][11703] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11709, 11710) */
		reached[1][11709] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5252: // STATE 11704 - mutant_243.pml:265 - [((_pid==1))] (11710:0:0 - 1)
		IfNotBlocked
		reached[1][11704] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11705, 11710) */
		reached[1][11705] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11709, 11710) */
		reached[1][11709] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5253: // STATE 11706 - mutant_243.pml:267 - [((_pid>1))] (11710:0:0 - 1)
		IfNotBlocked
		reached[1][11706] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11707, 11710) */
		reached[1][11707] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11709, 11710) */
		reached[1][11709] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5254: // STATE 11710 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11710] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5255: // STATE 11711 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11719:1 - 1)
		IfNotBlocked
		reached[1][11711] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11719, 11714, 11719) */
		reached[1][11714] = 1;
		;
		/* merge: j = (j+1)(11719, 11715, 11719) */
		reached[1][11715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11720, 11719) */
		reached[1][11720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5256: // STATE 11715 - mutant_243.pml:475 - [j = (j+1)] (0:11719:1 - 5)
		IfNotBlocked
		reached[1][11715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11720, 11719) */
		reached[1][11720] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5257: // STATE 11717 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11717] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5258: // STATE 11728 - mutant_243.pml:554 - [((10==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11728] = 1;
		if (!((10==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5259: // STATE 11729 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11729] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5260: // STATE 11730 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11730] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 5261: // STATE 11731 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11731] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5262: // STATE 11733 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11733] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5263: // STATE 11734 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11734] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5264: // STATE 11735 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11735] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5265: // STATE 11736 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11736] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5266: // STATE 11737 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (11757:0:1 - 1)
		IfNotBlocked
		reached[1][11737] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11757, 11738, 11757) */
		reached[1][11738] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11757, 11739, 11757) */
		reached[1][11739] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5267: // STATE 11755 - mutant_243.pml:306 - [.(goto)] (0:11757:0 - 6)
		IfNotBlocked
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5268: // STATE 11740 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (11757:0:1 - 1)
		IfNotBlocked
		reached[1][11740] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11757, 11741, 11757) */
		reached[1][11741] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11757, 11742, 11757) */
		reached[1][11742] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5269: // STATE 11743 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11757:0:1 - 1)
		IfNotBlocked
		reached[1][11743] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11757, 11744, 11757) */
		reached[1][11744] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11757, 11745, 11757) */
		reached[1][11745] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5270: // STATE 11746 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11757:0:1 - 1)
		IfNotBlocked
		reached[1][11746] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11757, 11747, 11757) */
		reached[1][11747] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11757, 11748, 11757) */
		reached[1][11748] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5271: // STATE 11749 - mutant_243.pml:300 - [((START==ABORT))] (11757:0:1 - 1)
		IfNotBlocked
		reached[1][11749] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11757, 11750, 11757) */
		reached[1][11750] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11757, 11751, 11757) */
		reached[1][11751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5272: // STATE 11753 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11757:0 - 1)
		IfNotBlocked
		reached[1][11753] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11757, 11755, 11757) */
		reached[1][11755] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5273: // STATE 11757 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11757] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5274: // STATE 11759 - mutant_243.pml:227 - [((_pid==0))] (11767:0:0 - 1)
		IfNotBlocked
		reached[1][11759] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11760, 11767) */
		reached[1][11760] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11766, 11767) */
		reached[1][11766] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5275: // STATE 11761 - mutant_243.pml:229 - [((_pid==1))] (11767:0:0 - 1)
		IfNotBlocked
		reached[1][11761] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11762, 11767) */
		reached[1][11762] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11766, 11767) */
		reached[1][11766] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5276: // STATE 11763 - mutant_243.pml:231 - [((_pid>1))] (11767:0:0 - 1)
		IfNotBlocked
		reached[1][11763] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11764, 11767) */
		reached[1][11764] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11766, 11767) */
		reached[1][11766] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5277: // STATE 11767 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11767] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5278: // STATE 11768 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:11896:1 - 1)
		IfNotBlocked
		reached[1][11768] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11896, 11773, 11896) */
		reached[1][11773] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5279: // STATE 11771 - mutant_243.pml:312 - [(1)] (11896:0:1 - 1)
		IfNotBlocked
		reached[1][11771] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11896, 11773, 11896) */
		reached[1][11773] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5280: // STATE 11775 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11775] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5281: // STATE 11776 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (11810:0:1 - 1)
		IfNotBlocked
		reached[1][11776] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11810, 11777, 11810) */
		reached[1][11777] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11810, 11778, 11810) */
		reached[1][11778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5282: // STATE 11794 - mutant_243.pml:336 - [.(goto)] (0:11810:0 - 6)
		IfNotBlocked
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5283: // STATE 11779 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (11810:0:1 - 1)
		IfNotBlocked
		reached[1][11779] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11810, 11780, 11810) */
		reached[1][11780] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11810, 11781, 11810) */
		reached[1][11781] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5284: // STATE 11782 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11810:0:1 - 1)
		IfNotBlocked
		reached[1][11782] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11810, 11783, 11810) */
		reached[1][11783] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11810, 11784, 11810) */
		reached[1][11784] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5285: // STATE 11785 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11810:0:1 - 1)
		IfNotBlocked
		reached[1][11785] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11810, 11786, 11810) */
		reached[1][11786] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11810, 11787, 11810) */
		reached[1][11787] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5286: // STATE 11788 - mutant_243.pml:330 - [((PAUSE==ABORT))] (11810:0:1 - 1)
		IfNotBlocked
		reached[1][11788] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11810, 11789, 11810) */
		reached[1][11789] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11810, 11790, 11810) */
		reached[1][11790] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5287: // STATE 11792 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11810:0 - 1)
		IfNotBlocked
		reached[1][11792] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11810, 11794, 11810) */
		reached[1][11794] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5288: // STATE 11797 - mutant_243.pml:239 - [((_pid==0))] (11805:0:0 - 1)
		IfNotBlocked
		reached[1][11797] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11798, 11805) */
		reached[1][11798] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11804, 11805) */
		reached[1][11804] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5289: // STATE 11799 - mutant_243.pml:241 - [((_pid==1))] (11805:0:0 - 1)
		IfNotBlocked
		reached[1][11799] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11800, 11805) */
		reached[1][11800] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11804, 11805) */
		reached[1][11804] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5290: // STATE 11801 - mutant_243.pml:243 - [((_pid>1))] (11805:0:0 - 1)
		IfNotBlocked
		reached[1][11801] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11802, 11805) */
		reached[1][11802] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11804, 11805) */
		reached[1][11804] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5291: // STATE 11805 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11805] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5292: // STATE 11806 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:11896:1 - 1)
		IfNotBlocked
		reached[1][11806] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11896, 11811, 11896) */
		reached[1][11811] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5293: // STATE 11809 - mutant_243.pml:341 - [(1)] (11896:0:1 - 1)
		IfNotBlocked
		reached[1][11809] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11896, 11811, 11896) */
		reached[1][11811] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5294: // STATE 11813 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11813] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5295: // STATE 11814 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (11848:0:1 - 1)
		IfNotBlocked
		reached[1][11814] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11848, 11815, 11848) */
		reached[1][11815] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11848, 11816, 11848) */
		reached[1][11816] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5296: // STATE 11832 - mutant_243.pml:365 - [.(goto)] (0:11848:0 - 6)
		IfNotBlocked
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5297: // STATE 11817 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (11848:0:1 - 1)
		IfNotBlocked
		reached[1][11817] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11848, 11818, 11848) */
		reached[1][11818] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11848, 11819, 11848) */
		reached[1][11819] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5298: // STATE 11820 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11848:0:1 - 1)
		IfNotBlocked
		reached[1][11820] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11848, 11821, 11848) */
		reached[1][11821] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11848, 11822, 11848) */
		reached[1][11822] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5299: // STATE 11823 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11848:0:1 - 1)
		IfNotBlocked
		reached[1][11823] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11848, 11824, 11848) */
		reached[1][11824] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11848, 11825, 11848) */
		reached[1][11825] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5300: // STATE 11826 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (11848:0:1 - 1)
		IfNotBlocked
		reached[1][11826] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11848, 11827, 11848) */
		reached[1][11827] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11848, 11828, 11848) */
		reached[1][11828] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5301: // STATE 11830 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11848:0 - 1)
		IfNotBlocked
		reached[1][11830] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11848, 11832, 11848) */
		reached[1][11832] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5302: // STATE 11835 - mutant_243.pml:251 - [((_pid==0))] (11843:0:0 - 1)
		IfNotBlocked
		reached[1][11835] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11836, 11843) */
		reached[1][11836] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11842, 11843) */
		reached[1][11842] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5303: // STATE 11837 - mutant_243.pml:253 - [((_pid==1))] (11843:0:0 - 1)
		IfNotBlocked
		reached[1][11837] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 11838, 11843) */
		reached[1][11838] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11842, 11843) */
		reached[1][11842] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5304: // STATE 11839 - mutant_243.pml:255 - [((_pid>1))] (11843:0:0 - 1)
		IfNotBlocked
		reached[1][11839] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 11840, 11843) */
		reached[1][11840] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11842, 11843) */
		reached[1][11842] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5305: // STATE 11843 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11843] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5306: // STATE 11844 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:11896:1 - 1)
		IfNotBlocked
		reached[1][11844] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11896, 11849, 11896) */
		reached[1][11849] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5307: // STATE 11847 - mutant_243.pml:370 - [(1)] (11896:0:1 - 1)
		IfNotBlocked
		reached[1][11847] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11896, 11849, 11896) */
		reached[1][11849] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5308: // STATE 11851 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11851] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5309: // STATE 11852 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (11886:0:1 - 1)
		IfNotBlocked
		reached[1][11852] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11886, 11853, 11886) */
		reached[1][11853] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11886, 11854, 11886) */
		reached[1][11854] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5310: // STATE 11870 - mutant_243.pml:394 - [.(goto)] (0:11886:0 - 6)
		IfNotBlocked
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5311: // STATE 11855 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (11886:0:1 - 1)
		IfNotBlocked
		reached[1][11855] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11886, 11856, 11886) */
		reached[1][11856] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11886, 11857, 11886) */
		reached[1][11857] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5312: // STATE 11858 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11886:0:1 - 1)
		IfNotBlocked
		reached[1][11858] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11886, 11859, 11886) */
		reached[1][11859] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11886, 11860, 11886) */
		reached[1][11860] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5313: // STATE 11861 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11886:0:1 - 1)
		IfNotBlocked
		reached[1][11861] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11886, 11862, 11886) */
		reached[1][11862] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11886, 11863, 11886) */
		reached[1][11863] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5314: // STATE 11864 - mutant_243.pml:388 - [((STOP==ABORT))] (11886:0:1 - 1)
		IfNotBlocked
		reached[1][11864] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11886, 11865, 11886) */
		reached[1][11865] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11886, 11866, 11886) */
		reached[1][11866] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5315: // STATE 11868 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11886:0 - 1)
		IfNotBlocked
		reached[1][11868] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11886, 11870, 11886) */
		reached[1][11870] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5316: // STATE 11873 - mutant_243.pml:263 - [((_pid==0))] (11881:0:0 - 1)
		IfNotBlocked
		reached[1][11873] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 11874, 11881) */
		reached[1][11874] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11880, 11881) */
		reached[1][11880] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5317: // STATE 11875 - mutant_243.pml:265 - [((_pid==1))] (11881:0:0 - 1)
		IfNotBlocked
		reached[1][11875] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 11876, 11881) */
		reached[1][11876] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11880, 11881) */
		reached[1][11880] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5318: // STATE 11877 - mutant_243.pml:267 - [((_pid>1))] (11881:0:0 - 1)
		IfNotBlocked
		reached[1][11877] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 11878, 11881) */
		reached[1][11878] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11880, 11881) */
		reached[1][11880] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5319: // STATE 11881 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11881] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5320: // STATE 11882 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:11896:1 - 1)
		IfNotBlocked
		reached[1][11882] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(11896, 11887, 11896) */
		reached[1][11887] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5321: // STATE 11885 - mutant_243.pml:399 - [(1)] (11896:0:1 - 1)
		IfNotBlocked
		reached[1][11885] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(11896, 11887, 11896) */
		reached[1][11887] = 1;
		;
		/* merge: .(goto)(11896, 11890, 11896) */
		reached[1][11890] = 1;
		;
		/* merge: j = (j+1)(11896, 11892, 11896) */
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5322: // STATE 11892 - mutant_243.pml:435 - [j = (j+1)] (0:11896:1 - 13)
		IfNotBlocked
		reached[1][11892] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 11897, 11896) */
		reached[1][11897] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5323: // STATE 11894 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11894] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5324: // STATE 11901 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][11901] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5325: // STATE 11902 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11902] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5326: // STATE 11903 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11903] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5327: // STATE 11904 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (11924:0:1 - 1)
		IfNotBlocked
		reached[1][11904] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11924, 11905, 11924) */
		reached[1][11905] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11924, 11906, 11924) */
		reached[1][11906] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5328: // STATE 11922 - mutant_243.pml:306 - [.(goto)] (0:11924:0 - 6)
		IfNotBlocked
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5329: // STATE 11907 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (11924:0:1 - 1)
		IfNotBlocked
		reached[1][11907] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11924, 11908, 11924) */
		reached[1][11908] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11924, 11909, 11924) */
		reached[1][11909] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5330: // STATE 11910 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11924:0:1 - 1)
		IfNotBlocked
		reached[1][11910] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11924, 11911, 11924) */
		reached[1][11911] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11924, 11912, 11924) */
		reached[1][11912] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5331: // STATE 11913 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11924:0:1 - 1)
		IfNotBlocked
		reached[1][11913] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11924, 11914, 11924) */
		reached[1][11914] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11924, 11915, 11924) */
		reached[1][11915] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5332: // STATE 11916 - mutant_243.pml:300 - [((START==ABORT))] (11924:0:1 - 1)
		IfNotBlocked
		reached[1][11916] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11924, 11917, 11924) */
		reached[1][11917] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11924, 11918, 11924) */
		reached[1][11918] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5333: // STATE 11920 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11924:0 - 1)
		IfNotBlocked
		reached[1][11920] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11924, 11922, 11924) */
		reached[1][11922] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5334: // STATE 11924 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11924] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5335: // STATE 11926 - mutant_243.pml:227 - [((_pid==0))] (11934:0:0 - 1)
		IfNotBlocked
		reached[1][11926] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 11927, 11934) */
		reached[1][11927] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11933, 11934) */
		reached[1][11933] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5336: // STATE 11928 - mutant_243.pml:229 - [((_pid==1))] (11934:0:0 - 1)
		IfNotBlocked
		reached[1][11928] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 11929, 11934) */
		reached[1][11929] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11933, 11934) */
		reached[1][11933] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5337: // STATE 11930 - mutant_243.pml:231 - [((_pid>1))] (11934:0:0 - 1)
		IfNotBlocked
		reached[1][11930] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 11931, 11934) */
		reached[1][11931] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11933, 11934) */
		reached[1][11933] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5338: // STATE 11934 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11934] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5339: // STATE 11935 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12063:1 - 1)
		IfNotBlocked
		reached[1][11935] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12063, 11940, 12063) */
		reached[1][11940] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5340: // STATE 11938 - mutant_243.pml:312 - [(1)] (12063:0:1 - 1)
		IfNotBlocked
		reached[1][11938] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12063, 11940, 12063) */
		reached[1][11940] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5341: // STATE 11942 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11942] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5342: // STATE 11943 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (11977:0:1 - 1)
		IfNotBlocked
		reached[1][11943] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(11977, 11944, 11977) */
		reached[1][11944] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(11977, 11945, 11977) */
		reached[1][11945] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5343: // STATE 11961 - mutant_243.pml:336 - [.(goto)] (0:11977:0 - 6)
		IfNotBlocked
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5344: // STATE 11946 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (11977:0:1 - 1)
		IfNotBlocked
		reached[1][11946] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(11977, 11947, 11977) */
		reached[1][11947] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(11977, 11948, 11977) */
		reached[1][11948] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5345: // STATE 11949 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (11977:0:1 - 1)
		IfNotBlocked
		reached[1][11949] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(11977, 11950, 11977) */
		reached[1][11950] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(11977, 11951, 11977) */
		reached[1][11951] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5346: // STATE 11952 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (11977:0:1 - 1)
		IfNotBlocked
		reached[1][11952] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(11977, 11953, 11977) */
		reached[1][11953] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(11977, 11954, 11977) */
		reached[1][11954] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5347: // STATE 11955 - mutant_243.pml:330 - [((PAUSE==ABORT))] (11977:0:1 - 1)
		IfNotBlocked
		reached[1][11955] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(11977, 11956, 11977) */
		reached[1][11956] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(11977, 11957, 11977) */
		reached[1][11957] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5348: // STATE 11959 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:11977:0 - 1)
		IfNotBlocked
		reached[1][11959] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(11977, 11961, 11977) */
		reached[1][11961] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5349: // STATE 11964 - mutant_243.pml:239 - [((_pid==0))] (11972:0:0 - 1)
		IfNotBlocked
		reached[1][11964] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11965, 11972) */
		reached[1][11965] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11971, 11972) */
		reached[1][11971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5350: // STATE 11966 - mutant_243.pml:241 - [((_pid==1))] (11972:0:0 - 1)
		IfNotBlocked
		reached[1][11966] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 11967, 11972) */
		reached[1][11967] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11971, 11972) */
		reached[1][11971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5351: // STATE 11968 - mutant_243.pml:243 - [((_pid>1))] (11972:0:0 - 1)
		IfNotBlocked
		reached[1][11968] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 11969, 11972) */
		reached[1][11969] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 11971, 11972) */
		reached[1][11971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5352: // STATE 11972 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][11972] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5353: // STATE 11973 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12063:1 - 1)
		IfNotBlocked
		reached[1][11973] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12063, 11978, 12063) */
		reached[1][11978] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5354: // STATE 11976 - mutant_243.pml:341 - [(1)] (12063:0:1 - 1)
		IfNotBlocked
		reached[1][11976] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12063, 11978, 12063) */
		reached[1][11978] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5355: // STATE 11980 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][11980] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5356: // STATE 11981 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (12015:0:1 - 1)
		IfNotBlocked
		reached[1][11981] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12015, 11982, 12015) */
		reached[1][11982] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12015, 11983, 12015) */
		reached[1][11983] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5357: // STATE 11999 - mutant_243.pml:365 - [.(goto)] (0:12015:0 - 6)
		IfNotBlocked
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5358: // STATE 11984 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (12015:0:1 - 1)
		IfNotBlocked
		reached[1][11984] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12015, 11985, 12015) */
		reached[1][11985] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12015, 11986, 12015) */
		reached[1][11986] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5359: // STATE 11987 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12015:0:1 - 1)
		IfNotBlocked
		reached[1][11987] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12015, 11988, 12015) */
		reached[1][11988] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12015, 11989, 12015) */
		reached[1][11989] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5360: // STATE 11990 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12015:0:1 - 1)
		IfNotBlocked
		reached[1][11990] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12015, 11991, 12015) */
		reached[1][11991] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12015, 11992, 12015) */
		reached[1][11992] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5361: // STATE 11993 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (12015:0:1 - 1)
		IfNotBlocked
		reached[1][11993] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12015, 11994, 12015) */
		reached[1][11994] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12015, 11995, 12015) */
		reached[1][11995] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5362: // STATE 11997 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12015:0 - 1)
		IfNotBlocked
		reached[1][11997] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12015, 11999, 12015) */
		reached[1][11999] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5363: // STATE 12002 - mutant_243.pml:251 - [((_pid==0))] (12010:0:0 - 1)
		IfNotBlocked
		reached[1][12002] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12003, 12010) */
		reached[1][12003] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12009, 12010) */
		reached[1][12009] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5364: // STATE 12004 - mutant_243.pml:253 - [((_pid==1))] (12010:0:0 - 1)
		IfNotBlocked
		reached[1][12004] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12005, 12010) */
		reached[1][12005] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12009, 12010) */
		reached[1][12009] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5365: // STATE 12006 - mutant_243.pml:255 - [((_pid>1))] (12010:0:0 - 1)
		IfNotBlocked
		reached[1][12006] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12007, 12010) */
		reached[1][12007] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12009, 12010) */
		reached[1][12009] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5366: // STATE 12010 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12010] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5367: // STATE 12011 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12063:1 - 1)
		IfNotBlocked
		reached[1][12011] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12063, 12016, 12063) */
		reached[1][12016] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5368: // STATE 12014 - mutant_243.pml:370 - [(1)] (12063:0:1 - 1)
		IfNotBlocked
		reached[1][12014] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12063, 12016, 12063) */
		reached[1][12016] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5369: // STATE 12018 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12018] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5370: // STATE 12019 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (12053:0:1 - 1)
		IfNotBlocked
		reached[1][12019] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12053, 12020, 12053) */
		reached[1][12020] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12053, 12021, 12053) */
		reached[1][12021] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5371: // STATE 12037 - mutant_243.pml:394 - [.(goto)] (0:12053:0 - 6)
		IfNotBlocked
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5372: // STATE 12022 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (12053:0:1 - 1)
		IfNotBlocked
		reached[1][12022] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12053, 12023, 12053) */
		reached[1][12023] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12053, 12024, 12053) */
		reached[1][12024] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5373: // STATE 12025 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12053:0:1 - 1)
		IfNotBlocked
		reached[1][12025] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12053, 12026, 12053) */
		reached[1][12026] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12053, 12027, 12053) */
		reached[1][12027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5374: // STATE 12028 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12053:0:1 - 1)
		IfNotBlocked
		reached[1][12028] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12053, 12029, 12053) */
		reached[1][12029] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12053, 12030, 12053) */
		reached[1][12030] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5375: // STATE 12031 - mutant_243.pml:388 - [((STOP==ABORT))] (12053:0:1 - 1)
		IfNotBlocked
		reached[1][12031] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12053, 12032, 12053) */
		reached[1][12032] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12053, 12033, 12053) */
		reached[1][12033] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5376: // STATE 12035 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12053:0 - 1)
		IfNotBlocked
		reached[1][12035] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12053, 12037, 12053) */
		reached[1][12037] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5377: // STATE 12040 - mutant_243.pml:263 - [((_pid==0))] (12048:0:0 - 1)
		IfNotBlocked
		reached[1][12040] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12041, 12048) */
		reached[1][12041] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12047, 12048) */
		reached[1][12047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5378: // STATE 12042 - mutant_243.pml:265 - [((_pid==1))] (12048:0:0 - 1)
		IfNotBlocked
		reached[1][12042] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12043, 12048) */
		reached[1][12043] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12047, 12048) */
		reached[1][12047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5379: // STATE 12044 - mutant_243.pml:267 - [((_pid>1))] (12048:0:0 - 1)
		IfNotBlocked
		reached[1][12044] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12045, 12048) */
		reached[1][12045] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12047, 12048) */
		reached[1][12047] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5380: // STATE 12048 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12048] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5381: // STATE 12049 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12063:1 - 1)
		IfNotBlocked
		reached[1][12049] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12063, 12054, 12063) */
		reached[1][12054] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5382: // STATE 12052 - mutant_243.pml:399 - [(1)] (12063:0:1 - 1)
		IfNotBlocked
		reached[1][12052] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12063, 12054, 12063) */
		reached[1][12054] = 1;
		;
		/* merge: .(goto)(12063, 12057, 12063) */
		reached[1][12057] = 1;
		;
		/* merge: j = (j-1)(12063, 12059, 12063) */
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5383: // STATE 12059 - mutant_243.pml:446 - [j = (j-1)] (0:12063:1 - 13)
		IfNotBlocked
		reached[1][12059] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12064, 12063) */
		reached[1][12064] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5384: // STATE 12061 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12061] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5385: // STATE 12071 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12071] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 5386: // STATE 12072 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12072] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5387: // STATE 12073 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12073] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5388: // STATE 12074 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (12094:0:1 - 1)
		IfNotBlocked
		reached[1][12074] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12094, 12075, 12094) */
		reached[1][12075] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12094, 12076, 12094) */
		reached[1][12076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5389: // STATE 12092 - mutant_243.pml:306 - [.(goto)] (0:12094:0 - 6)
		IfNotBlocked
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5390: // STATE 12077 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (12094:0:1 - 1)
		IfNotBlocked
		reached[1][12077] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12094, 12078, 12094) */
		reached[1][12078] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12094, 12079, 12094) */
		reached[1][12079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5391: // STATE 12080 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12094:0:1 - 1)
		IfNotBlocked
		reached[1][12080] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12094, 12081, 12094) */
		reached[1][12081] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12094, 12082, 12094) */
		reached[1][12082] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5392: // STATE 12083 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12094:0:1 - 1)
		IfNotBlocked
		reached[1][12083] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12094, 12084, 12094) */
		reached[1][12084] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12094, 12085, 12094) */
		reached[1][12085] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5393: // STATE 12086 - mutant_243.pml:300 - [((START==ABORT))] (12094:0:1 - 1)
		IfNotBlocked
		reached[1][12086] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12094, 12087, 12094) */
		reached[1][12087] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12094, 12088, 12094) */
		reached[1][12088] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5394: // STATE 12090 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12094:0 - 1)
		IfNotBlocked
		reached[1][12090] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12094, 12092, 12094) */
		reached[1][12092] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5395: // STATE 12094 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12094] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5396: // STATE 12096 - mutant_243.pml:227 - [((_pid==0))] (12104:0:0 - 1)
		IfNotBlocked
		reached[1][12096] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12097, 12104) */
		reached[1][12097] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12103, 12104) */
		reached[1][12103] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5397: // STATE 12098 - mutant_243.pml:229 - [((_pid==1))] (12104:0:0 - 1)
		IfNotBlocked
		reached[1][12098] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12099, 12104) */
		reached[1][12099] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12103, 12104) */
		reached[1][12103] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5398: // STATE 12100 - mutant_243.pml:231 - [((_pid>1))] (12104:0:0 - 1)
		IfNotBlocked
		reached[1][12100] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12101, 12104) */
		reached[1][12101] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12103, 12104) */
		reached[1][12103] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5399: // STATE 12104 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12104] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5400: // STATE 12105 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12233:1 - 1)
		IfNotBlocked
		reached[1][12105] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12233, 12110, 12233) */
		reached[1][12110] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5401: // STATE 12108 - mutant_243.pml:312 - [(1)] (12233:0:1 - 1)
		IfNotBlocked
		reached[1][12108] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12233, 12110, 12233) */
		reached[1][12110] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5402: // STATE 12112 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12112] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5403: // STATE 12113 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (12147:0:1 - 1)
		IfNotBlocked
		reached[1][12113] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12147, 12114, 12147) */
		reached[1][12114] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12147, 12115, 12147) */
		reached[1][12115] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5404: // STATE 12131 - mutant_243.pml:336 - [.(goto)] (0:12147:0 - 6)
		IfNotBlocked
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5405: // STATE 12116 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (12147:0:1 - 1)
		IfNotBlocked
		reached[1][12116] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12147, 12117, 12147) */
		reached[1][12117] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12147, 12118, 12147) */
		reached[1][12118] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5406: // STATE 12119 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12147:0:1 - 1)
		IfNotBlocked
		reached[1][12119] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12147, 12120, 12147) */
		reached[1][12120] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12147, 12121, 12147) */
		reached[1][12121] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5407: // STATE 12122 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12147:0:1 - 1)
		IfNotBlocked
		reached[1][12122] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12147, 12123, 12147) */
		reached[1][12123] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12147, 12124, 12147) */
		reached[1][12124] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5408: // STATE 12125 - mutant_243.pml:330 - [((PAUSE==ABORT))] (12147:0:1 - 1)
		IfNotBlocked
		reached[1][12125] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12147, 12126, 12147) */
		reached[1][12126] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12147, 12127, 12147) */
		reached[1][12127] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5409: // STATE 12129 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12147:0 - 1)
		IfNotBlocked
		reached[1][12129] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12147, 12131, 12147) */
		reached[1][12131] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5410: // STATE 12134 - mutant_243.pml:239 - [((_pid==0))] (12142:0:0 - 1)
		IfNotBlocked
		reached[1][12134] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12135, 12142) */
		reached[1][12135] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12141, 12142) */
		reached[1][12141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5411: // STATE 12136 - mutant_243.pml:241 - [((_pid==1))] (12142:0:0 - 1)
		IfNotBlocked
		reached[1][12136] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12137, 12142) */
		reached[1][12137] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12141, 12142) */
		reached[1][12141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5412: // STATE 12138 - mutant_243.pml:243 - [((_pid>1))] (12142:0:0 - 1)
		IfNotBlocked
		reached[1][12138] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12139, 12142) */
		reached[1][12139] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12141, 12142) */
		reached[1][12141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5413: // STATE 12142 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12142] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5414: // STATE 12143 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12233:1 - 1)
		IfNotBlocked
		reached[1][12143] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12233, 12148, 12233) */
		reached[1][12148] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5415: // STATE 12146 - mutant_243.pml:341 - [(1)] (12233:0:1 - 1)
		IfNotBlocked
		reached[1][12146] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12233, 12148, 12233) */
		reached[1][12148] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5416: // STATE 12150 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12150] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5417: // STATE 12151 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (12185:0:1 - 1)
		IfNotBlocked
		reached[1][12151] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12185, 12152, 12185) */
		reached[1][12152] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12185, 12153, 12185) */
		reached[1][12153] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5418: // STATE 12169 - mutant_243.pml:365 - [.(goto)] (0:12185:0 - 6)
		IfNotBlocked
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5419: // STATE 12154 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (12185:0:1 - 1)
		IfNotBlocked
		reached[1][12154] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12185, 12155, 12185) */
		reached[1][12155] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12185, 12156, 12185) */
		reached[1][12156] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5420: // STATE 12157 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12185:0:1 - 1)
		IfNotBlocked
		reached[1][12157] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12185, 12158, 12185) */
		reached[1][12158] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12185, 12159, 12185) */
		reached[1][12159] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5421: // STATE 12160 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12185:0:1 - 1)
		IfNotBlocked
		reached[1][12160] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12185, 12161, 12185) */
		reached[1][12161] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12185, 12162, 12185) */
		reached[1][12162] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5422: // STATE 12163 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (12185:0:1 - 1)
		IfNotBlocked
		reached[1][12163] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12185, 12164, 12185) */
		reached[1][12164] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12185, 12165, 12185) */
		reached[1][12165] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5423: // STATE 12167 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12185:0 - 1)
		IfNotBlocked
		reached[1][12167] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12185, 12169, 12185) */
		reached[1][12169] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5424: // STATE 12172 - mutant_243.pml:251 - [((_pid==0))] (12180:0:0 - 1)
		IfNotBlocked
		reached[1][12172] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12173, 12180) */
		reached[1][12173] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12179, 12180) */
		reached[1][12179] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5425: // STATE 12174 - mutant_243.pml:253 - [((_pid==1))] (12180:0:0 - 1)
		IfNotBlocked
		reached[1][12174] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12175, 12180) */
		reached[1][12175] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12179, 12180) */
		reached[1][12179] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5426: // STATE 12176 - mutant_243.pml:255 - [((_pid>1))] (12180:0:0 - 1)
		IfNotBlocked
		reached[1][12176] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12177, 12180) */
		reached[1][12177] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12179, 12180) */
		reached[1][12179] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5427: // STATE 12180 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12180] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5428: // STATE 12181 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12233:1 - 1)
		IfNotBlocked
		reached[1][12181] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12233, 12186, 12233) */
		reached[1][12186] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5429: // STATE 12184 - mutant_243.pml:370 - [(1)] (12233:0:1 - 1)
		IfNotBlocked
		reached[1][12184] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12233, 12186, 12233) */
		reached[1][12186] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5430: // STATE 12188 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12188] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5431: // STATE 12189 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (12223:0:1 - 1)
		IfNotBlocked
		reached[1][12189] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12223, 12190, 12223) */
		reached[1][12190] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12223, 12191, 12223) */
		reached[1][12191] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5432: // STATE 12207 - mutant_243.pml:394 - [.(goto)] (0:12223:0 - 6)
		IfNotBlocked
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5433: // STATE 12192 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (12223:0:1 - 1)
		IfNotBlocked
		reached[1][12192] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12223, 12193, 12223) */
		reached[1][12193] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12223, 12194, 12223) */
		reached[1][12194] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5434: // STATE 12195 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12223:0:1 - 1)
		IfNotBlocked
		reached[1][12195] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12223, 12196, 12223) */
		reached[1][12196] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12223, 12197, 12223) */
		reached[1][12197] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5435: // STATE 12198 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12223:0:1 - 1)
		IfNotBlocked
		reached[1][12198] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12223, 12199, 12223) */
		reached[1][12199] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12223, 12200, 12223) */
		reached[1][12200] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5436: // STATE 12201 - mutant_243.pml:388 - [((STOP==ABORT))] (12223:0:1 - 1)
		IfNotBlocked
		reached[1][12201] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12223, 12202, 12223) */
		reached[1][12202] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12223, 12203, 12223) */
		reached[1][12203] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5437: // STATE 12205 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12223:0 - 1)
		IfNotBlocked
		reached[1][12205] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12223, 12207, 12223) */
		reached[1][12207] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5438: // STATE 12210 - mutant_243.pml:263 - [((_pid==0))] (12218:0:0 - 1)
		IfNotBlocked
		reached[1][12210] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12211, 12218) */
		reached[1][12211] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12217, 12218) */
		reached[1][12217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5439: // STATE 12212 - mutant_243.pml:265 - [((_pid==1))] (12218:0:0 - 1)
		IfNotBlocked
		reached[1][12212] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12213, 12218) */
		reached[1][12213] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12217, 12218) */
		reached[1][12217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5440: // STATE 12214 - mutant_243.pml:267 - [((_pid>1))] (12218:0:0 - 1)
		IfNotBlocked
		reached[1][12214] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12215, 12218) */
		reached[1][12215] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12217, 12218) */
		reached[1][12217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5441: // STATE 12218 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12218] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5442: // STATE 12219 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12233:1 - 1)
		IfNotBlocked
		reached[1][12219] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12233, 12224, 12233) */
		reached[1][12224] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5443: // STATE 12222 - mutant_243.pml:399 - [(1)] (12233:0:1 - 1)
		IfNotBlocked
		reached[1][12222] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12233, 12224, 12233) */
		reached[1][12224] = 1;
		;
		/* merge: .(goto)(12233, 12227, 12233) */
		reached[1][12227] = 1;
		;
		/* merge: j = (j+1)(12233, 12229, 12233) */
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5444: // STATE 12229 - mutant_243.pml:435 - [j = (j+1)] (0:12233:1 - 13)
		IfNotBlocked
		reached[1][12229] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12234, 12233) */
		reached[1][12234] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5445: // STATE 12231 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12231] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5446: // STATE 12237 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12237] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5447: // STATE 12238 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12238] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5448: // STATE 12239 - mutant_243.pml:227 - [((_pid==0))] (12247:0:0 - 1)
		IfNotBlocked
		reached[1][12239] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12240, 12247) */
		reached[1][12240] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12246, 12247) */
		reached[1][12246] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5449: // STATE 12241 - mutant_243.pml:229 - [((_pid==1))] (12247:0:0 - 1)
		IfNotBlocked
		reached[1][12241] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12242, 12247) */
		reached[1][12242] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12246, 12247) */
		reached[1][12246] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5450: // STATE 12243 - mutant_243.pml:231 - [((_pid>1))] (12247:0:0 - 1)
		IfNotBlocked
		reached[1][12243] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12244, 12247) */
		reached[1][12244] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12246, 12247) */
		reached[1][12246] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5451: // STATE 12247 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12247] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5452: // STATE 12248 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12292:1 - 1)
		IfNotBlocked
		reached[1][12248] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12292, 12287, 12292) */
		reached[1][12287] = 1;
		;
		/* merge: j = (j+1)(12292, 12288, 12292) */
		reached[1][12288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12293, 12292) */
		reached[1][12293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5453: // STATE 12250 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12250] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5454: // STATE 12251 - mutant_243.pml:251 - [((_pid==0))] (12259:0:0 - 1)
		IfNotBlocked
		reached[1][12251] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12252, 12259) */
		reached[1][12252] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12258, 12259) */
		reached[1][12258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5455: // STATE 12253 - mutant_243.pml:253 - [((_pid==1))] (12259:0:0 - 1)
		IfNotBlocked
		reached[1][12253] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12254, 12259) */
		reached[1][12254] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12258, 12259) */
		reached[1][12258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5456: // STATE 12255 - mutant_243.pml:255 - [((_pid>1))] (12259:0:0 - 1)
		IfNotBlocked
		reached[1][12255] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12256, 12259) */
		reached[1][12256] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12258, 12259) */
		reached[1][12258] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5457: // STATE 12259 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12259] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5458: // STATE 12260 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12292:1 - 1)
		IfNotBlocked
		reached[1][12260] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12292, 12287, 12292) */
		reached[1][12287] = 1;
		;
		/* merge: j = (j+1)(12292, 12288, 12292) */
		reached[1][12288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12293, 12292) */
		reached[1][12293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5459: // STATE 12262 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12262] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5460: // STATE 12263 - mutant_243.pml:239 - [((_pid==0))] (12271:0:0 - 1)
		IfNotBlocked
		reached[1][12263] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12264, 12271) */
		reached[1][12264] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12270, 12271) */
		reached[1][12270] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5461: // STATE 12265 - mutant_243.pml:241 - [((_pid==1))] (12271:0:0 - 1)
		IfNotBlocked
		reached[1][12265] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12266, 12271) */
		reached[1][12266] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12270, 12271) */
		reached[1][12270] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5462: // STATE 12267 - mutant_243.pml:243 - [((_pid>1))] (12271:0:0 - 1)
		IfNotBlocked
		reached[1][12267] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12268, 12271) */
		reached[1][12268] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12270, 12271) */
		reached[1][12270] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5463: // STATE 12271 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12271] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5464: // STATE 12272 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12292:1 - 1)
		IfNotBlocked
		reached[1][12272] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12292, 12287, 12292) */
		reached[1][12287] = 1;
		;
		/* merge: j = (j+1)(12292, 12288, 12292) */
		reached[1][12288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12293, 12292) */
		reached[1][12293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5465: // STATE 12274 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12274] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5466: // STATE 12275 - mutant_243.pml:263 - [((_pid==0))] (12283:0:0 - 1)
		IfNotBlocked
		reached[1][12275] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12276, 12283) */
		reached[1][12276] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12282, 12283) */
		reached[1][12282] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5467: // STATE 12277 - mutant_243.pml:265 - [((_pid==1))] (12283:0:0 - 1)
		IfNotBlocked
		reached[1][12277] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12278, 12283) */
		reached[1][12278] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12282, 12283) */
		reached[1][12282] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5468: // STATE 12279 - mutant_243.pml:267 - [((_pid>1))] (12283:0:0 - 1)
		IfNotBlocked
		reached[1][12279] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12280, 12283) */
		reached[1][12280] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12282, 12283) */
		reached[1][12282] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5469: // STATE 12283 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12283] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5470: // STATE 12284 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12292:1 - 1)
		IfNotBlocked
		reached[1][12284] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12292, 12287, 12292) */
		reached[1][12287] = 1;
		;
		/* merge: j = (j+1)(12292, 12288, 12292) */
		reached[1][12288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12293, 12292) */
		reached[1][12293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5471: // STATE 12288 - mutant_243.pml:475 - [j = (j+1)] (0:12292:1 - 5)
		IfNotBlocked
		reached[1][12288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12293, 12292) */
		reached[1][12293] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5472: // STATE 12290 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12290] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5473: // STATE 12301 - mutant_243.pml:556 - [(((10==ABORTING)||(10==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12301] = 1;
		if (!(((10==10)||(10==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5474: // STATE 12302 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12302] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5475: // STATE 12303 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12303] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 5476: // STATE 12304 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12304] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5477: // STATE 12306 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12306] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5478: // STATE 12307 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12307] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5479: // STATE 12308 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12308] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5480: // STATE 12309 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12309] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5481: // STATE 12310 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (12330:0:1 - 1)
		IfNotBlocked
		reached[1][12310] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12330, 12311, 12330) */
		reached[1][12311] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12330, 12312, 12330) */
		reached[1][12312] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5482: // STATE 12328 - mutant_243.pml:306 - [.(goto)] (0:12330:0 - 6)
		IfNotBlocked
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5483: // STATE 12313 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (12330:0:1 - 1)
		IfNotBlocked
		reached[1][12313] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12330, 12314, 12330) */
		reached[1][12314] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12330, 12315, 12330) */
		reached[1][12315] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5484: // STATE 12316 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12330:0:1 - 1)
		IfNotBlocked
		reached[1][12316] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12330, 12317, 12330) */
		reached[1][12317] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12330, 12318, 12330) */
		reached[1][12318] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5485: // STATE 12319 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12330:0:1 - 1)
		IfNotBlocked
		reached[1][12319] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12330, 12320, 12330) */
		reached[1][12320] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12330, 12321, 12330) */
		reached[1][12321] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5486: // STATE 12322 - mutant_243.pml:300 - [((START==ABORT))] (12330:0:1 - 1)
		IfNotBlocked
		reached[1][12322] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12330, 12323, 12330) */
		reached[1][12323] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12330, 12324, 12330) */
		reached[1][12324] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5487: // STATE 12326 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12330:0 - 1)
		IfNotBlocked
		reached[1][12326] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12330, 12328, 12330) */
		reached[1][12328] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5488: // STATE 12330 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12330] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5489: // STATE 12332 - mutant_243.pml:227 - [((_pid==0))] (12340:0:0 - 1)
		IfNotBlocked
		reached[1][12332] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12333, 12340) */
		reached[1][12333] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12339, 12340) */
		reached[1][12339] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5490: // STATE 12334 - mutant_243.pml:229 - [((_pid==1))] (12340:0:0 - 1)
		IfNotBlocked
		reached[1][12334] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12335, 12340) */
		reached[1][12335] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12339, 12340) */
		reached[1][12339] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5491: // STATE 12336 - mutant_243.pml:231 - [((_pid>1))] (12340:0:0 - 1)
		IfNotBlocked
		reached[1][12336] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12337, 12340) */
		reached[1][12337] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12339, 12340) */
		reached[1][12339] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5492: // STATE 12340 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12340] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5493: // STATE 12341 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12469:1 - 1)
		IfNotBlocked
		reached[1][12341] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12469, 12346, 12469) */
		reached[1][12346] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5494: // STATE 12344 - mutant_243.pml:312 - [(1)] (12469:0:1 - 1)
		IfNotBlocked
		reached[1][12344] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12469, 12346, 12469) */
		reached[1][12346] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5495: // STATE 12348 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12348] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5496: // STATE 12349 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (12383:0:1 - 1)
		IfNotBlocked
		reached[1][12349] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12383, 12350, 12383) */
		reached[1][12350] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12383, 12351, 12383) */
		reached[1][12351] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5497: // STATE 12367 - mutant_243.pml:336 - [.(goto)] (0:12383:0 - 6)
		IfNotBlocked
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5498: // STATE 12352 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (12383:0:1 - 1)
		IfNotBlocked
		reached[1][12352] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12383, 12353, 12383) */
		reached[1][12353] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12383, 12354, 12383) */
		reached[1][12354] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5499: // STATE 12355 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12383:0:1 - 1)
		IfNotBlocked
		reached[1][12355] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12383, 12356, 12383) */
		reached[1][12356] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12383, 12357, 12383) */
		reached[1][12357] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5500: // STATE 12358 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12383:0:1 - 1)
		IfNotBlocked
		reached[1][12358] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12383, 12359, 12383) */
		reached[1][12359] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12383, 12360, 12383) */
		reached[1][12360] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5501: // STATE 12361 - mutant_243.pml:330 - [((PAUSE==ABORT))] (12383:0:1 - 1)
		IfNotBlocked
		reached[1][12361] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12383, 12362, 12383) */
		reached[1][12362] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12383, 12363, 12383) */
		reached[1][12363] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5502: // STATE 12365 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12383:0 - 1)
		IfNotBlocked
		reached[1][12365] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12383, 12367, 12383) */
		reached[1][12367] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5503: // STATE 12370 - mutant_243.pml:239 - [((_pid==0))] (12378:0:0 - 1)
		IfNotBlocked
		reached[1][12370] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12371, 12378) */
		reached[1][12371] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12377, 12378) */
		reached[1][12377] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5504: // STATE 12372 - mutant_243.pml:241 - [((_pid==1))] (12378:0:0 - 1)
		IfNotBlocked
		reached[1][12372] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12373, 12378) */
		reached[1][12373] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12377, 12378) */
		reached[1][12377] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5505: // STATE 12374 - mutant_243.pml:243 - [((_pid>1))] (12378:0:0 - 1)
		IfNotBlocked
		reached[1][12374] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12375, 12378) */
		reached[1][12375] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12377, 12378) */
		reached[1][12377] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5506: // STATE 12378 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12378] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5507: // STATE 12379 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12469:1 - 1)
		IfNotBlocked
		reached[1][12379] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12469, 12384, 12469) */
		reached[1][12384] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5508: // STATE 12382 - mutant_243.pml:341 - [(1)] (12469:0:1 - 1)
		IfNotBlocked
		reached[1][12382] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12469, 12384, 12469) */
		reached[1][12384] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5509: // STATE 12386 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12386] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5510: // STATE 12387 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (12421:0:1 - 1)
		IfNotBlocked
		reached[1][12387] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12421, 12388, 12421) */
		reached[1][12388] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12421, 12389, 12421) */
		reached[1][12389] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5511: // STATE 12405 - mutant_243.pml:365 - [.(goto)] (0:12421:0 - 6)
		IfNotBlocked
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5512: // STATE 12390 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (12421:0:1 - 1)
		IfNotBlocked
		reached[1][12390] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12421, 12391, 12421) */
		reached[1][12391] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12421, 12392, 12421) */
		reached[1][12392] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5513: // STATE 12393 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12421:0:1 - 1)
		IfNotBlocked
		reached[1][12393] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12421, 12394, 12421) */
		reached[1][12394] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12421, 12395, 12421) */
		reached[1][12395] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5514: // STATE 12396 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12421:0:1 - 1)
		IfNotBlocked
		reached[1][12396] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12421, 12397, 12421) */
		reached[1][12397] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12421, 12398, 12421) */
		reached[1][12398] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5515: // STATE 12399 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (12421:0:1 - 1)
		IfNotBlocked
		reached[1][12399] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12421, 12400, 12421) */
		reached[1][12400] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12421, 12401, 12421) */
		reached[1][12401] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5516: // STATE 12403 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12421:0 - 1)
		IfNotBlocked
		reached[1][12403] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12421, 12405, 12421) */
		reached[1][12405] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5517: // STATE 12408 - mutant_243.pml:251 - [((_pid==0))] (12416:0:0 - 1)
		IfNotBlocked
		reached[1][12408] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12409, 12416) */
		reached[1][12409] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12415, 12416) */
		reached[1][12415] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5518: // STATE 12410 - mutant_243.pml:253 - [((_pid==1))] (12416:0:0 - 1)
		IfNotBlocked
		reached[1][12410] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12411, 12416) */
		reached[1][12411] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12415, 12416) */
		reached[1][12415] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5519: // STATE 12412 - mutant_243.pml:255 - [((_pid>1))] (12416:0:0 - 1)
		IfNotBlocked
		reached[1][12412] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12413, 12416) */
		reached[1][12413] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12415, 12416) */
		reached[1][12415] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5520: // STATE 12416 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12416] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5521: // STATE 12417 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12469:1 - 1)
		IfNotBlocked
		reached[1][12417] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12469, 12422, 12469) */
		reached[1][12422] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5522: // STATE 12420 - mutant_243.pml:370 - [(1)] (12469:0:1 - 1)
		IfNotBlocked
		reached[1][12420] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12469, 12422, 12469) */
		reached[1][12422] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5523: // STATE 12424 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12424] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5524: // STATE 12425 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (12459:0:1 - 1)
		IfNotBlocked
		reached[1][12425] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12459, 12426, 12459) */
		reached[1][12426] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12459, 12427, 12459) */
		reached[1][12427] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5525: // STATE 12443 - mutant_243.pml:394 - [.(goto)] (0:12459:0 - 6)
		IfNotBlocked
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5526: // STATE 12428 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (12459:0:1 - 1)
		IfNotBlocked
		reached[1][12428] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12459, 12429, 12459) */
		reached[1][12429] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12459, 12430, 12459) */
		reached[1][12430] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5527: // STATE 12431 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12459:0:1 - 1)
		IfNotBlocked
		reached[1][12431] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12459, 12432, 12459) */
		reached[1][12432] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12459, 12433, 12459) */
		reached[1][12433] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5528: // STATE 12434 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12459:0:1 - 1)
		IfNotBlocked
		reached[1][12434] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12459, 12435, 12459) */
		reached[1][12435] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12459, 12436, 12459) */
		reached[1][12436] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5529: // STATE 12437 - mutant_243.pml:388 - [((STOP==ABORT))] (12459:0:1 - 1)
		IfNotBlocked
		reached[1][12437] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12459, 12438, 12459) */
		reached[1][12438] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12459, 12439, 12459) */
		reached[1][12439] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5530: // STATE 12441 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12459:0 - 1)
		IfNotBlocked
		reached[1][12441] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12459, 12443, 12459) */
		reached[1][12443] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5531: // STATE 12446 - mutant_243.pml:263 - [((_pid==0))] (12454:0:0 - 1)
		IfNotBlocked
		reached[1][12446] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12447, 12454) */
		reached[1][12447] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12453, 12454) */
		reached[1][12453] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5532: // STATE 12448 - mutant_243.pml:265 - [((_pid==1))] (12454:0:0 - 1)
		IfNotBlocked
		reached[1][12448] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12449, 12454) */
		reached[1][12449] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12453, 12454) */
		reached[1][12453] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5533: // STATE 12450 - mutant_243.pml:267 - [((_pid>1))] (12454:0:0 - 1)
		IfNotBlocked
		reached[1][12450] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12451, 12454) */
		reached[1][12451] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12453, 12454) */
		reached[1][12453] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5534: // STATE 12454 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12454] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5535: // STATE 12455 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12469:1 - 1)
		IfNotBlocked
		reached[1][12455] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12469, 12460, 12469) */
		reached[1][12460] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5536: // STATE 12458 - mutant_243.pml:399 - [(1)] (12469:0:1 - 1)
		IfNotBlocked
		reached[1][12458] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12469, 12460, 12469) */
		reached[1][12460] = 1;
		;
		/* merge: .(goto)(12469, 12463, 12469) */
		reached[1][12463] = 1;
		;
		/* merge: j = (j+1)(12469, 12465, 12469) */
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5537: // STATE 12465 - mutant_243.pml:435 - [j = (j+1)] (0:12469:1 - 13)
		IfNotBlocked
		reached[1][12465] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12470, 12469) */
		reached[1][12470] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5538: // STATE 12467 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12467] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5539: // STATE 12474 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12474] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5540: // STATE 12475 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12475] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5541: // STATE 12476 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12476] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5542: // STATE 12477 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (12497:0:1 - 1)
		IfNotBlocked
		reached[1][12477] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12497, 12478, 12497) */
		reached[1][12478] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12497, 12479, 12497) */
		reached[1][12479] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5543: // STATE 12495 - mutant_243.pml:306 - [.(goto)] (0:12497:0 - 6)
		IfNotBlocked
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5544: // STATE 12480 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (12497:0:1 - 1)
		IfNotBlocked
		reached[1][12480] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12497, 12481, 12497) */
		reached[1][12481] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12497, 12482, 12497) */
		reached[1][12482] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5545: // STATE 12483 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12497:0:1 - 1)
		IfNotBlocked
		reached[1][12483] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12497, 12484, 12497) */
		reached[1][12484] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12497, 12485, 12497) */
		reached[1][12485] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5546: // STATE 12486 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12497:0:1 - 1)
		IfNotBlocked
		reached[1][12486] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12497, 12487, 12497) */
		reached[1][12487] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12497, 12488, 12497) */
		reached[1][12488] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5547: // STATE 12489 - mutant_243.pml:300 - [((START==ABORT))] (12497:0:1 - 1)
		IfNotBlocked
		reached[1][12489] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12497, 12490, 12497) */
		reached[1][12490] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12497, 12491, 12497) */
		reached[1][12491] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5548: // STATE 12493 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12497:0 - 1)
		IfNotBlocked
		reached[1][12493] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12497, 12495, 12497) */
		reached[1][12495] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5549: // STATE 12497 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12497] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5550: // STATE 12499 - mutant_243.pml:227 - [((_pid==0))] (12507:0:0 - 1)
		IfNotBlocked
		reached[1][12499] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12500, 12507) */
		reached[1][12500] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12506, 12507) */
		reached[1][12506] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5551: // STATE 12501 - mutant_243.pml:229 - [((_pid==1))] (12507:0:0 - 1)
		IfNotBlocked
		reached[1][12501] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12502, 12507) */
		reached[1][12502] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12506, 12507) */
		reached[1][12506] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5552: // STATE 12503 - mutant_243.pml:231 - [((_pid>1))] (12507:0:0 - 1)
		IfNotBlocked
		reached[1][12503] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12504, 12507) */
		reached[1][12504] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12506, 12507) */
		reached[1][12506] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5553: // STATE 12507 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12507] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5554: // STATE 12508 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12636:1 - 1)
		IfNotBlocked
		reached[1][12508] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12636, 12513, 12636) */
		reached[1][12513] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5555: // STATE 12511 - mutant_243.pml:312 - [(1)] (12636:0:1 - 1)
		IfNotBlocked
		reached[1][12511] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12636, 12513, 12636) */
		reached[1][12513] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5556: // STATE 12515 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12515] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5557: // STATE 12516 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (12550:0:1 - 1)
		IfNotBlocked
		reached[1][12516] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12550, 12517, 12550) */
		reached[1][12517] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12550, 12518, 12550) */
		reached[1][12518] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5558: // STATE 12534 - mutant_243.pml:336 - [.(goto)] (0:12550:0 - 6)
		IfNotBlocked
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5559: // STATE 12519 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (12550:0:1 - 1)
		IfNotBlocked
		reached[1][12519] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12550, 12520, 12550) */
		reached[1][12520] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12550, 12521, 12550) */
		reached[1][12521] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5560: // STATE 12522 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12550:0:1 - 1)
		IfNotBlocked
		reached[1][12522] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12550, 12523, 12550) */
		reached[1][12523] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12550, 12524, 12550) */
		reached[1][12524] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5561: // STATE 12525 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12550:0:1 - 1)
		IfNotBlocked
		reached[1][12525] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12550, 12526, 12550) */
		reached[1][12526] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12550, 12527, 12550) */
		reached[1][12527] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5562: // STATE 12528 - mutant_243.pml:330 - [((PAUSE==ABORT))] (12550:0:1 - 1)
		IfNotBlocked
		reached[1][12528] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12550, 12529, 12550) */
		reached[1][12529] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12550, 12530, 12550) */
		reached[1][12530] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5563: // STATE 12532 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12550:0 - 1)
		IfNotBlocked
		reached[1][12532] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12550, 12534, 12550) */
		reached[1][12534] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5564: // STATE 12537 - mutant_243.pml:239 - [((_pid==0))] (12545:0:0 - 1)
		IfNotBlocked
		reached[1][12537] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12538, 12545) */
		reached[1][12538] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12544, 12545) */
		reached[1][12544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5565: // STATE 12539 - mutant_243.pml:241 - [((_pid==1))] (12545:0:0 - 1)
		IfNotBlocked
		reached[1][12539] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12540, 12545) */
		reached[1][12540] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12544, 12545) */
		reached[1][12544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5566: // STATE 12541 - mutant_243.pml:243 - [((_pid>1))] (12545:0:0 - 1)
		IfNotBlocked
		reached[1][12541] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12542, 12545) */
		reached[1][12542] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12544, 12545) */
		reached[1][12544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5567: // STATE 12545 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12545] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5568: // STATE 12546 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12636:1 - 1)
		IfNotBlocked
		reached[1][12546] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12636, 12551, 12636) */
		reached[1][12551] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5569: // STATE 12549 - mutant_243.pml:341 - [(1)] (12636:0:1 - 1)
		IfNotBlocked
		reached[1][12549] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12636, 12551, 12636) */
		reached[1][12551] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5570: // STATE 12553 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12553] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5571: // STATE 12554 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (12588:0:1 - 1)
		IfNotBlocked
		reached[1][12554] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12588, 12555, 12588) */
		reached[1][12555] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12588, 12556, 12588) */
		reached[1][12556] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5572: // STATE 12572 - mutant_243.pml:365 - [.(goto)] (0:12588:0 - 6)
		IfNotBlocked
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5573: // STATE 12557 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (12588:0:1 - 1)
		IfNotBlocked
		reached[1][12557] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12588, 12558, 12588) */
		reached[1][12558] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12588, 12559, 12588) */
		reached[1][12559] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5574: // STATE 12560 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12588:0:1 - 1)
		IfNotBlocked
		reached[1][12560] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12588, 12561, 12588) */
		reached[1][12561] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12588, 12562, 12588) */
		reached[1][12562] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5575: // STATE 12563 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12588:0:1 - 1)
		IfNotBlocked
		reached[1][12563] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12588, 12564, 12588) */
		reached[1][12564] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12588, 12565, 12588) */
		reached[1][12565] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5576: // STATE 12566 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (12588:0:1 - 1)
		IfNotBlocked
		reached[1][12566] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12588, 12567, 12588) */
		reached[1][12567] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12588, 12568, 12588) */
		reached[1][12568] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5577: // STATE 12570 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12588:0 - 1)
		IfNotBlocked
		reached[1][12570] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12588, 12572, 12588) */
		reached[1][12572] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5578: // STATE 12575 - mutant_243.pml:251 - [((_pid==0))] (12583:0:0 - 1)
		IfNotBlocked
		reached[1][12575] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12576, 12583) */
		reached[1][12576] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12582, 12583) */
		reached[1][12582] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5579: // STATE 12577 - mutant_243.pml:253 - [((_pid==1))] (12583:0:0 - 1)
		IfNotBlocked
		reached[1][12577] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12578, 12583) */
		reached[1][12578] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12582, 12583) */
		reached[1][12582] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5580: // STATE 12579 - mutant_243.pml:255 - [((_pid>1))] (12583:0:0 - 1)
		IfNotBlocked
		reached[1][12579] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12580, 12583) */
		reached[1][12580] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12582, 12583) */
		reached[1][12582] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5581: // STATE 12583 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12583] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5582: // STATE 12584 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12636:1 - 1)
		IfNotBlocked
		reached[1][12584] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12636, 12589, 12636) */
		reached[1][12589] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5583: // STATE 12587 - mutant_243.pml:370 - [(1)] (12636:0:1 - 1)
		IfNotBlocked
		reached[1][12587] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12636, 12589, 12636) */
		reached[1][12589] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5584: // STATE 12591 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12591] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5585: // STATE 12592 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (12626:0:1 - 1)
		IfNotBlocked
		reached[1][12592] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12626, 12593, 12626) */
		reached[1][12593] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12626, 12594, 12626) */
		reached[1][12594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5586: // STATE 12610 - mutant_243.pml:394 - [.(goto)] (0:12626:0 - 6)
		IfNotBlocked
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5587: // STATE 12595 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (12626:0:1 - 1)
		IfNotBlocked
		reached[1][12595] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12626, 12596, 12626) */
		reached[1][12596] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12626, 12597, 12626) */
		reached[1][12597] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5588: // STATE 12598 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12626:0:1 - 1)
		IfNotBlocked
		reached[1][12598] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12626, 12599, 12626) */
		reached[1][12599] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12626, 12600, 12626) */
		reached[1][12600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5589: // STATE 12601 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12626:0:1 - 1)
		IfNotBlocked
		reached[1][12601] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12626, 12602, 12626) */
		reached[1][12602] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12626, 12603, 12626) */
		reached[1][12603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5590: // STATE 12604 - mutant_243.pml:388 - [((STOP==ABORT))] (12626:0:1 - 1)
		IfNotBlocked
		reached[1][12604] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12626, 12605, 12626) */
		reached[1][12605] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12626, 12606, 12626) */
		reached[1][12606] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5591: // STATE 12608 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12626:0 - 1)
		IfNotBlocked
		reached[1][12608] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12626, 12610, 12626) */
		reached[1][12610] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5592: // STATE 12613 - mutant_243.pml:263 - [((_pid==0))] (12621:0:0 - 1)
		IfNotBlocked
		reached[1][12613] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12614, 12621) */
		reached[1][12614] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12620, 12621) */
		reached[1][12620] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5593: // STATE 12615 - mutant_243.pml:265 - [((_pid==1))] (12621:0:0 - 1)
		IfNotBlocked
		reached[1][12615] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12616, 12621) */
		reached[1][12616] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12620, 12621) */
		reached[1][12620] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5594: // STATE 12617 - mutant_243.pml:267 - [((_pid>1))] (12621:0:0 - 1)
		IfNotBlocked
		reached[1][12617] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12618, 12621) */
		reached[1][12618] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12620, 12621) */
		reached[1][12620] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5595: // STATE 12621 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12621] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5596: // STATE 12622 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12636:1 - 1)
		IfNotBlocked
		reached[1][12622] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12636, 12627, 12636) */
		reached[1][12627] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5597: // STATE 12625 - mutant_243.pml:399 - [(1)] (12636:0:1 - 1)
		IfNotBlocked
		reached[1][12625] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12636, 12627, 12636) */
		reached[1][12627] = 1;
		;
		/* merge: .(goto)(12636, 12630, 12636) */
		reached[1][12630] = 1;
		;
		/* merge: j = (j-1)(12636, 12632, 12636) */
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5598: // STATE 12632 - mutant_243.pml:446 - [j = (j-1)] (0:12636:1 - 13)
		IfNotBlocked
		reached[1][12632] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12637, 12636) */
		reached[1][12637] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5599: // STATE 12634 - mutant_243.pml:448 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12634] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5600: // STATE 12644 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12644] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 5601: // STATE 12645 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12645] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5602: // STATE 12646 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12646] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5603: // STATE 12647 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (12667:0:1 - 1)
		IfNotBlocked
		reached[1][12647] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12667, 12648, 12667) */
		reached[1][12648] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12667, 12649, 12667) */
		reached[1][12649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5604: // STATE 12665 - mutant_243.pml:306 - [.(goto)] (0:12667:0 - 6)
		IfNotBlocked
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5605: // STATE 12650 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (12667:0:1 - 1)
		IfNotBlocked
		reached[1][12650] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12667, 12651, 12667) */
		reached[1][12651] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12667, 12652, 12667) */
		reached[1][12652] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5606: // STATE 12653 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12667:0:1 - 1)
		IfNotBlocked
		reached[1][12653] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12667, 12654, 12667) */
		reached[1][12654] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12667, 12655, 12667) */
		reached[1][12655] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5607: // STATE 12656 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12667:0:1 - 1)
		IfNotBlocked
		reached[1][12656] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12667, 12657, 12667) */
		reached[1][12657] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12667, 12658, 12667) */
		reached[1][12658] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5608: // STATE 12659 - mutant_243.pml:300 - [((START==ABORT))] (12667:0:1 - 1)
		IfNotBlocked
		reached[1][12659] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12667, 12660, 12667) */
		reached[1][12660] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12667, 12661, 12667) */
		reached[1][12661] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5609: // STATE 12663 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12667:0 - 1)
		IfNotBlocked
		reached[1][12663] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12667, 12665, 12667) */
		reached[1][12665] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5610: // STATE 12667 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12667] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5611: // STATE 12669 - mutant_243.pml:227 - [((_pid==0))] (12677:0:0 - 1)
		IfNotBlocked
		reached[1][12669] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12670, 12677) */
		reached[1][12670] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12676, 12677) */
		reached[1][12676] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5612: // STATE 12671 - mutant_243.pml:229 - [((_pid==1))] (12677:0:0 - 1)
		IfNotBlocked
		reached[1][12671] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12672, 12677) */
		reached[1][12672] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12676, 12677) */
		reached[1][12676] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5613: // STATE 12673 - mutant_243.pml:231 - [((_pid>1))] (12677:0:0 - 1)
		IfNotBlocked
		reached[1][12673] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12674, 12677) */
		reached[1][12674] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12676, 12677) */
		reached[1][12676] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5614: // STATE 12677 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12677] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5615: // STATE 12678 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12806:1 - 1)
		IfNotBlocked
		reached[1][12678] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12806, 12683, 12806) */
		reached[1][12683] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5616: // STATE 12681 - mutant_243.pml:312 - [(1)] (12806:0:1 - 1)
		IfNotBlocked
		reached[1][12681] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12806, 12683, 12806) */
		reached[1][12683] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5617: // STATE 12685 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12685] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5618: // STATE 12686 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (12720:0:1 - 1)
		IfNotBlocked
		reached[1][12686] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12720, 12687, 12720) */
		reached[1][12687] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12720, 12688, 12720) */
		reached[1][12688] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5619: // STATE 12704 - mutant_243.pml:336 - [.(goto)] (0:12720:0 - 6)
		IfNotBlocked
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5620: // STATE 12689 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (12720:0:1 - 1)
		IfNotBlocked
		reached[1][12689] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12720, 12690, 12720) */
		reached[1][12690] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12720, 12691, 12720) */
		reached[1][12691] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5621: // STATE 12692 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12720:0:1 - 1)
		IfNotBlocked
		reached[1][12692] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12720, 12693, 12720) */
		reached[1][12693] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12720, 12694, 12720) */
		reached[1][12694] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5622: // STATE 12695 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12720:0:1 - 1)
		IfNotBlocked
		reached[1][12695] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12720, 12696, 12720) */
		reached[1][12696] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12720, 12697, 12720) */
		reached[1][12697] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5623: // STATE 12698 - mutant_243.pml:330 - [((PAUSE==ABORT))] (12720:0:1 - 1)
		IfNotBlocked
		reached[1][12698] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12720, 12699, 12720) */
		reached[1][12699] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12720, 12700, 12720) */
		reached[1][12700] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5624: // STATE 12702 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12720:0 - 1)
		IfNotBlocked
		reached[1][12702] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12720, 12704, 12720) */
		reached[1][12704] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5625: // STATE 12707 - mutant_243.pml:239 - [((_pid==0))] (12715:0:0 - 1)
		IfNotBlocked
		reached[1][12707] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12708, 12715) */
		reached[1][12708] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12714, 12715) */
		reached[1][12714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5626: // STATE 12709 - mutant_243.pml:241 - [((_pid==1))] (12715:0:0 - 1)
		IfNotBlocked
		reached[1][12709] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12710, 12715) */
		reached[1][12710] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12714, 12715) */
		reached[1][12714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5627: // STATE 12711 - mutant_243.pml:243 - [((_pid>1))] (12715:0:0 - 1)
		IfNotBlocked
		reached[1][12711] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12712, 12715) */
		reached[1][12712] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12714, 12715) */
		reached[1][12714] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5628: // STATE 12715 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12715] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5629: // STATE 12716 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12806:1 - 1)
		IfNotBlocked
		reached[1][12716] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12806, 12721, 12806) */
		reached[1][12721] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5630: // STATE 12719 - mutant_243.pml:341 - [(1)] (12806:0:1 - 1)
		IfNotBlocked
		reached[1][12719] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12806, 12721, 12806) */
		reached[1][12721] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5631: // STATE 12723 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12723] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5632: // STATE 12724 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (12758:0:1 - 1)
		IfNotBlocked
		reached[1][12724] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12758, 12725, 12758) */
		reached[1][12725] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12758, 12726, 12758) */
		reached[1][12726] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5633: // STATE 12742 - mutant_243.pml:365 - [.(goto)] (0:12758:0 - 6)
		IfNotBlocked
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5634: // STATE 12727 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (12758:0:1 - 1)
		IfNotBlocked
		reached[1][12727] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12758, 12728, 12758) */
		reached[1][12728] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12758, 12729, 12758) */
		reached[1][12729] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5635: // STATE 12730 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12758:0:1 - 1)
		IfNotBlocked
		reached[1][12730] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12758, 12731, 12758) */
		reached[1][12731] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12758, 12732, 12758) */
		reached[1][12732] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5636: // STATE 12733 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12758:0:1 - 1)
		IfNotBlocked
		reached[1][12733] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12758, 12734, 12758) */
		reached[1][12734] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12758, 12735, 12758) */
		reached[1][12735] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5637: // STATE 12736 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (12758:0:1 - 1)
		IfNotBlocked
		reached[1][12736] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12758, 12737, 12758) */
		reached[1][12737] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12758, 12738, 12758) */
		reached[1][12738] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5638: // STATE 12740 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12758:0 - 1)
		IfNotBlocked
		reached[1][12740] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12758, 12742, 12758) */
		reached[1][12742] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5639: // STATE 12745 - mutant_243.pml:251 - [((_pid==0))] (12753:0:0 - 1)
		IfNotBlocked
		reached[1][12745] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12746, 12753) */
		reached[1][12746] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12752, 12753) */
		reached[1][12752] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5640: // STATE 12747 - mutant_243.pml:253 - [((_pid==1))] (12753:0:0 - 1)
		IfNotBlocked
		reached[1][12747] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12748, 12753) */
		reached[1][12748] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12752, 12753) */
		reached[1][12752] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5641: // STATE 12749 - mutant_243.pml:255 - [((_pid>1))] (12753:0:0 - 1)
		IfNotBlocked
		reached[1][12749] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12750, 12753) */
		reached[1][12750] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12752, 12753) */
		reached[1][12752] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5642: // STATE 12753 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12753] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5643: // STATE 12754 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12806:1 - 1)
		IfNotBlocked
		reached[1][12754] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12806, 12759, 12806) */
		reached[1][12759] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5644: // STATE 12757 - mutant_243.pml:370 - [(1)] (12806:0:1 - 1)
		IfNotBlocked
		reached[1][12757] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12806, 12759, 12806) */
		reached[1][12759] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5645: // STATE 12761 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12761] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5646: // STATE 12762 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (12796:0:1 - 1)
		IfNotBlocked
		reached[1][12762] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12796, 12763, 12796) */
		reached[1][12763] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12796, 12764, 12796) */
		reached[1][12764] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5647: // STATE 12780 - mutant_243.pml:394 - [.(goto)] (0:12796:0 - 6)
		IfNotBlocked
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5648: // STATE 12765 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (12796:0:1 - 1)
		IfNotBlocked
		reached[1][12765] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12796, 12766, 12796) */
		reached[1][12766] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12796, 12767, 12796) */
		reached[1][12767] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5649: // STATE 12768 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12796:0:1 - 1)
		IfNotBlocked
		reached[1][12768] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12796, 12769, 12796) */
		reached[1][12769] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12796, 12770, 12796) */
		reached[1][12770] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5650: // STATE 12771 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12796:0:1 - 1)
		IfNotBlocked
		reached[1][12771] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12796, 12772, 12796) */
		reached[1][12772] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12796, 12773, 12796) */
		reached[1][12773] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5651: // STATE 12774 - mutant_243.pml:388 - [((STOP==ABORT))] (12796:0:1 - 1)
		IfNotBlocked
		reached[1][12774] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12796, 12775, 12796) */
		reached[1][12775] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12796, 12776, 12796) */
		reached[1][12776] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5652: // STATE 12778 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12796:0 - 1)
		IfNotBlocked
		reached[1][12778] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12796, 12780, 12796) */
		reached[1][12780] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5653: // STATE 12783 - mutant_243.pml:263 - [((_pid==0))] (12791:0:0 - 1)
		IfNotBlocked
		reached[1][12783] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12784, 12791) */
		reached[1][12784] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12790, 12791) */
		reached[1][12790] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5654: // STATE 12785 - mutant_243.pml:265 - [((_pid==1))] (12791:0:0 - 1)
		IfNotBlocked
		reached[1][12785] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12786, 12791) */
		reached[1][12786] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12790, 12791) */
		reached[1][12790] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5655: // STATE 12787 - mutant_243.pml:267 - [((_pid>1))] (12791:0:0 - 1)
		IfNotBlocked
		reached[1][12787] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12788, 12791) */
		reached[1][12788] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12790, 12791) */
		reached[1][12790] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5656: // STATE 12791 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12791] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5657: // STATE 12792 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12806:1 - 1)
		IfNotBlocked
		reached[1][12792] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12806, 12797, 12806) */
		reached[1][12797] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5658: // STATE 12795 - mutant_243.pml:399 - [(1)] (12806:0:1 - 1)
		IfNotBlocked
		reached[1][12795] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(12806, 12797, 12806) */
		reached[1][12797] = 1;
		;
		/* merge: .(goto)(12806, 12800, 12806) */
		reached[1][12800] = 1;
		;
		/* merge: j = (j+1)(12806, 12802, 12806) */
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5659: // STATE 12802 - mutant_243.pml:435 - [j = (j+1)] (0:12806:1 - 13)
		IfNotBlocked
		reached[1][12802] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12807, 12806) */
		reached[1][12807] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5660: // STATE 12804 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12804] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5661: // STATE 12810 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12810] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5662: // STATE 12811 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12811] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5663: // STATE 12812 - mutant_243.pml:227 - [((_pid==0))] (12820:0:0 - 1)
		IfNotBlocked
		reached[1][12812] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12813, 12820) */
		reached[1][12813] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12819, 12820) */
		reached[1][12819] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5664: // STATE 12814 - mutant_243.pml:229 - [((_pid==1))] (12820:0:0 - 1)
		IfNotBlocked
		reached[1][12814] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12815, 12820) */
		reached[1][12815] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12819, 12820) */
		reached[1][12819] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5665: // STATE 12816 - mutant_243.pml:231 - [((_pid>1))] (12820:0:0 - 1)
		IfNotBlocked
		reached[1][12816] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12817, 12820) */
		reached[1][12817] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12819, 12820) */
		reached[1][12819] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5666: // STATE 12820 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12820] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5667: // STATE 12821 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:12865:1 - 1)
		IfNotBlocked
		reached[1][12821] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12865, 12860, 12865) */
		reached[1][12860] = 1;
		;
		/* merge: j = (j+1)(12865, 12861, 12865) */
		reached[1][12861] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12866, 12865) */
		reached[1][12866] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5668: // STATE 12823 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12823] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5669: // STATE 12824 - mutant_243.pml:251 - [((_pid==0))] (12832:0:0 - 1)
		IfNotBlocked
		reached[1][12824] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12825, 12832) */
		reached[1][12825] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12831, 12832) */
		reached[1][12831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5670: // STATE 12826 - mutant_243.pml:253 - [((_pid==1))] (12832:0:0 - 1)
		IfNotBlocked
		reached[1][12826] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12827, 12832) */
		reached[1][12827] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12831, 12832) */
		reached[1][12831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5671: // STATE 12828 - mutant_243.pml:255 - [((_pid>1))] (12832:0:0 - 1)
		IfNotBlocked
		reached[1][12828] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12829, 12832) */
		reached[1][12829] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12831, 12832) */
		reached[1][12831] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5672: // STATE 12832 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12832] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5673: // STATE 12833 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:12865:1 - 1)
		IfNotBlocked
		reached[1][12833] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12865, 12860, 12865) */
		reached[1][12860] = 1;
		;
		/* merge: j = (j+1)(12865, 12861, 12865) */
		reached[1][12861] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12866, 12865) */
		reached[1][12866] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5674: // STATE 12835 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12835] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5675: // STATE 12836 - mutant_243.pml:239 - [((_pid==0))] (12844:0:0 - 1)
		IfNotBlocked
		reached[1][12836] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12837, 12844) */
		reached[1][12837] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12843, 12844) */
		reached[1][12843] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5676: // STATE 12838 - mutant_243.pml:241 - [((_pid==1))] (12844:0:0 - 1)
		IfNotBlocked
		reached[1][12838] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12839, 12844) */
		reached[1][12839] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12843, 12844) */
		reached[1][12843] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5677: // STATE 12840 - mutant_243.pml:243 - [((_pid>1))] (12844:0:0 - 1)
		IfNotBlocked
		reached[1][12840] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12841, 12844) */
		reached[1][12841] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12843, 12844) */
		reached[1][12843] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5678: // STATE 12844 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12844] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5679: // STATE 12845 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:12865:1 - 1)
		IfNotBlocked
		reached[1][12845] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12865, 12860, 12865) */
		reached[1][12860] = 1;
		;
		/* merge: j = (j+1)(12865, 12861, 12865) */
		reached[1][12861] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12866, 12865) */
		reached[1][12866] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5680: // STATE 12847 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12847] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5681: // STATE 12848 - mutant_243.pml:263 - [((_pid==0))] (12856:0:0 - 1)
		IfNotBlocked
		reached[1][12848] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 12849, 12856) */
		reached[1][12849] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12855, 12856) */
		reached[1][12855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5682: // STATE 12850 - mutant_243.pml:265 - [((_pid==1))] (12856:0:0 - 1)
		IfNotBlocked
		reached[1][12850] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 12851, 12856) */
		reached[1][12851] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12855, 12856) */
		reached[1][12855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5683: // STATE 12852 - mutant_243.pml:267 - [((_pid>1))] (12856:0:0 - 1)
		IfNotBlocked
		reached[1][12852] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 12853, 12856) */
		reached[1][12853] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12855, 12856) */
		reached[1][12855] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5684: // STATE 12856 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12856] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5685: // STATE 12857 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:12865:1 - 1)
		IfNotBlocked
		reached[1][12857] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(12865, 12860, 12865) */
		reached[1][12860] = 1;
		;
		/* merge: j = (j+1)(12865, 12861, 12865) */
		reached[1][12861] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12866, 12865) */
		reached[1][12866] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5686: // STATE 12861 - mutant_243.pml:475 - [j = (j+1)] (0:12865:1 - 5)
		IfNotBlocked
		reached[1][12861] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 12866, 12865) */
		reached[1][12866] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5687: // STATE 12863 - mutant_243.pml:477 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12863] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5688: // STATE 12880 - mutant_243.pml:552 - [((11==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12880] = 1;
		if (!((11==3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5689: // STATE 12881 - mutant_243.pml:483 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12881] = 1;
		if (!(((6==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5690: // STATE 12882 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12882] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 5691: // STATE 12883 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][12883] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5692: // STATE 12885 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12885] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5693: // STATE 12886 - mutant_243.pml:454 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12886] = 1;
		if (!(((6==5)||(6==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5694: // STATE 12887 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12887] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5695: // STATE 12888 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12888] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5696: // STATE 12889 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (12909:0:1 - 1)
		IfNotBlocked
		reached[1][12889] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12909, 12890, 12909) */
		reached[1][12890] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12909, 12891, 12909) */
		reached[1][12891] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5697: // STATE 12907 - mutant_243.pml:306 - [.(goto)] (0:12909:0 - 6)
		IfNotBlocked
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5698: // STATE 12892 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (12909:0:1 - 1)
		IfNotBlocked
		reached[1][12892] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12909, 12893, 12909) */
		reached[1][12893] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12909, 12894, 12909) */
		reached[1][12894] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5699: // STATE 12895 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12909:0:1 - 1)
		IfNotBlocked
		reached[1][12895] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12909, 12896, 12909) */
		reached[1][12896] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12909, 12897, 12909) */
		reached[1][12897] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5700: // STATE 12898 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12909:0:1 - 1)
		IfNotBlocked
		reached[1][12898] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12909, 12899, 12909) */
		reached[1][12899] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12909, 12900, 12909) */
		reached[1][12900] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5701: // STATE 12901 - mutant_243.pml:300 - [((START==ABORT))] (12909:0:1 - 1)
		IfNotBlocked
		reached[1][12901] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12909, 12902, 12909) */
		reached[1][12902] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12909, 12903, 12909) */
		reached[1][12903] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5702: // STATE 12905 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12909:0 - 1)
		IfNotBlocked
		reached[1][12905] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12909, 12907, 12909) */
		reached[1][12907] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5703: // STATE 12909 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12909] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5704: // STATE 12911 - mutant_243.pml:227 - [((_pid==0))] (12919:0:0 - 1)
		IfNotBlocked
		reached[1][12911] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 12912, 12919) */
		reached[1][12912] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12918, 12919) */
		reached[1][12918] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5705: // STATE 12913 - mutant_243.pml:229 - [((_pid==1))] (12919:0:0 - 1)
		IfNotBlocked
		reached[1][12913] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 12914, 12919) */
		reached[1][12914] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12918, 12919) */
		reached[1][12918] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5706: // STATE 12915 - mutant_243.pml:231 - [((_pid>1))] (12919:0:0 - 1)
		IfNotBlocked
		reached[1][12915] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 12916, 12919) */
		reached[1][12916] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12918, 12919) */
		reached[1][12918] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5707: // STATE 12919 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12919] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5708: // STATE 12920 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13048:1 - 1)
		IfNotBlocked
		reached[1][12920] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13048, 12925, 13048) */
		reached[1][12925] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5709: // STATE 12923 - mutant_243.pml:312 - [(1)] (13048:0:1 - 1)
		IfNotBlocked
		reached[1][12923] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13048, 12925, 13048) */
		reached[1][12925] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5710: // STATE 12927 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12927] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5711: // STATE 12928 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (12962:0:1 - 1)
		IfNotBlocked
		reached[1][12928] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(12962, 12929, 12962) */
		reached[1][12929] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(12962, 12930, 12962) */
		reached[1][12930] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5712: // STATE 12946 - mutant_243.pml:336 - [.(goto)] (0:12962:0 - 6)
		IfNotBlocked
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5713: // STATE 12931 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (12962:0:1 - 1)
		IfNotBlocked
		reached[1][12931] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(12962, 12932, 12962) */
		reached[1][12932] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(12962, 12933, 12962) */
		reached[1][12933] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5714: // STATE 12934 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (12962:0:1 - 1)
		IfNotBlocked
		reached[1][12934] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(12962, 12935, 12962) */
		reached[1][12935] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(12962, 12936, 12962) */
		reached[1][12936] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5715: // STATE 12937 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (12962:0:1 - 1)
		IfNotBlocked
		reached[1][12937] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(12962, 12938, 12962) */
		reached[1][12938] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(12962, 12939, 12962) */
		reached[1][12939] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5716: // STATE 12940 - mutant_243.pml:330 - [((PAUSE==ABORT))] (12962:0:1 - 1)
		IfNotBlocked
		reached[1][12940] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(12962, 12941, 12962) */
		reached[1][12941] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(12962, 12942, 12962) */
		reached[1][12942] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5717: // STATE 12944 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:12962:0 - 1)
		IfNotBlocked
		reached[1][12944] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(12962, 12946, 12962) */
		reached[1][12946] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5718: // STATE 12949 - mutant_243.pml:239 - [((_pid==0))] (12957:0:0 - 1)
		IfNotBlocked
		reached[1][12949] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12950, 12957) */
		reached[1][12950] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12956, 12957) */
		reached[1][12956] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5719: // STATE 12951 - mutant_243.pml:241 - [((_pid==1))] (12957:0:0 - 1)
		IfNotBlocked
		reached[1][12951] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 12952, 12957) */
		reached[1][12952] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12956, 12957) */
		reached[1][12956] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5720: // STATE 12953 - mutant_243.pml:243 - [((_pid>1))] (12957:0:0 - 1)
		IfNotBlocked
		reached[1][12953] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 12954, 12957) */
		reached[1][12954] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12956, 12957) */
		reached[1][12956] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5721: // STATE 12957 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12957] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5722: // STATE 12958 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13048:1 - 1)
		IfNotBlocked
		reached[1][12958] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13048, 12963, 13048) */
		reached[1][12963] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5723: // STATE 12961 - mutant_243.pml:341 - [(1)] (13048:0:1 - 1)
		IfNotBlocked
		reached[1][12961] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13048, 12963, 13048) */
		reached[1][12963] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5724: // STATE 12965 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][12965] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5725: // STATE 12966 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13000:0:1 - 1)
		IfNotBlocked
		reached[1][12966] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13000, 12967, 13000) */
		reached[1][12967] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13000, 12968, 13000) */
		reached[1][12968] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5726: // STATE 12984 - mutant_243.pml:365 - [.(goto)] (0:13000:0 - 6)
		IfNotBlocked
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5727: // STATE 12969 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13000:0:1 - 1)
		IfNotBlocked
		reached[1][12969] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13000, 12970, 13000) */
		reached[1][12970] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13000, 12971, 13000) */
		reached[1][12971] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5728: // STATE 12972 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13000:0:1 - 1)
		IfNotBlocked
		reached[1][12972] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13000, 12973, 13000) */
		reached[1][12973] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13000, 12974, 13000) */
		reached[1][12974] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5729: // STATE 12975 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13000:0:1 - 1)
		IfNotBlocked
		reached[1][12975] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13000, 12976, 13000) */
		reached[1][12976] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13000, 12977, 13000) */
		reached[1][12977] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5730: // STATE 12978 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13000:0:1 - 1)
		IfNotBlocked
		reached[1][12978] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13000, 12979, 13000) */
		reached[1][12979] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13000, 12980, 13000) */
		reached[1][12980] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5731: // STATE 12982 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13000:0 - 1)
		IfNotBlocked
		reached[1][12982] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13000, 12984, 13000) */
		reached[1][12984] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5732: // STATE 12987 - mutant_243.pml:251 - [((_pid==0))] (12995:0:0 - 1)
		IfNotBlocked
		reached[1][12987] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12988, 12995) */
		reached[1][12988] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12994, 12995) */
		reached[1][12994] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5733: // STATE 12989 - mutant_243.pml:253 - [((_pid==1))] (12995:0:0 - 1)
		IfNotBlocked
		reached[1][12989] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 12990, 12995) */
		reached[1][12990] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12994, 12995) */
		reached[1][12994] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5734: // STATE 12991 - mutant_243.pml:255 - [((_pid>1))] (12995:0:0 - 1)
		IfNotBlocked
		reached[1][12991] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 12992, 12995) */
		reached[1][12992] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 12994, 12995) */
		reached[1][12994] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5735: // STATE 12995 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][12995] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5736: // STATE 12996 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13048:1 - 1)
		IfNotBlocked
		reached[1][12996] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13048, 13001, 13048) */
		reached[1][13001] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5737: // STATE 12999 - mutant_243.pml:370 - [(1)] (13048:0:1 - 1)
		IfNotBlocked
		reached[1][12999] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13048, 13001, 13048) */
		reached[1][13001] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5738: // STATE 13003 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13003] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5739: // STATE 13004 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13038:0:1 - 1)
		IfNotBlocked
		reached[1][13004] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13038, 13005, 13038) */
		reached[1][13005] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13038, 13006, 13038) */
		reached[1][13006] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5740: // STATE 13022 - mutant_243.pml:394 - [.(goto)] (0:13038:0 - 6)
		IfNotBlocked
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5741: // STATE 13007 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13038:0:1 - 1)
		IfNotBlocked
		reached[1][13007] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13038, 13008, 13038) */
		reached[1][13008] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13038, 13009, 13038) */
		reached[1][13009] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5742: // STATE 13010 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13038:0:1 - 1)
		IfNotBlocked
		reached[1][13010] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13038, 13011, 13038) */
		reached[1][13011] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13038, 13012, 13038) */
		reached[1][13012] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5743: // STATE 13013 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13038:0:1 - 1)
		IfNotBlocked
		reached[1][13013] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13038, 13014, 13038) */
		reached[1][13014] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13038, 13015, 13038) */
		reached[1][13015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5744: // STATE 13016 - mutant_243.pml:388 - [((STOP==ABORT))] (13038:0:1 - 1)
		IfNotBlocked
		reached[1][13016] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13038, 13017, 13038) */
		reached[1][13017] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13038, 13018, 13038) */
		reached[1][13018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5745: // STATE 13020 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13038:0 - 1)
		IfNotBlocked
		reached[1][13020] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13038, 13022, 13038) */
		reached[1][13022] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5746: // STATE 13025 - mutant_243.pml:263 - [((_pid==0))] (13033:0:0 - 1)
		IfNotBlocked
		reached[1][13025] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13026, 13033) */
		reached[1][13026] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13032, 13033) */
		reached[1][13032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5747: // STATE 13027 - mutant_243.pml:265 - [((_pid==1))] (13033:0:0 - 1)
		IfNotBlocked
		reached[1][13027] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13028, 13033) */
		reached[1][13028] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13032, 13033) */
		reached[1][13032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5748: // STATE 13029 - mutant_243.pml:267 - [((_pid>1))] (13033:0:0 - 1)
		IfNotBlocked
		reached[1][13029] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13030, 13033) */
		reached[1][13030] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13032, 13033) */
		reached[1][13032] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5749: // STATE 13033 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13033] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5750: // STATE 13034 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13048:1 - 1)
		IfNotBlocked
		reached[1][13034] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13048, 13039, 13048) */
		reached[1][13039] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5751: // STATE 13037 - mutant_243.pml:399 - [(1)] (13048:0:1 - 1)
		IfNotBlocked
		reached[1][13037] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13048, 13039, 13048) */
		reached[1][13039] = 1;
		;
		/* merge: .(goto)(13048, 13042, 13048) */
		reached[1][13042] = 1;
		;
		/* merge: j = (j+1)(13048, 13044, 13048) */
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5752: // STATE 13044 - mutant_243.pml:435 - [j = (j+1)] (0:13048:1 - 13)
		IfNotBlocked
		reached[1][13044] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13049, 13048) */
		reached[1][13049] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5753: // STATE 13046 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][13046] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 5754: // STATE 13053 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][13053] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5755: // STATE 13054 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13054] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5756: // STATE 13055 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13055] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5757: // STATE 13056 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (13076:0:1 - 1)
		IfNotBlocked
		reached[1][13056] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13076, 13057, 13076) */
		reached[1][13057] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13076, 13058, 13076) */
		reached[1][13058] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5758: // STATE 13074 - mutant_243.pml:306 - [.(goto)] (0:13076:0 - 6)
		IfNotBlocked
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5759: // STATE 13059 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (13076:0:1 - 1)
		IfNotBlocked
		reached[1][13059] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13076, 13060, 13076) */
		reached[1][13060] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13076, 13061, 13076) */
		reached[1][13061] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5760: // STATE 13062 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13076:0:1 - 1)
		IfNotBlocked
		reached[1][13062] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13076, 13063, 13076) */
		reached[1][13063] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13076, 13064, 13076) */
		reached[1][13064] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5761: // STATE 13065 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13076:0:1 - 1)
		IfNotBlocked
		reached[1][13065] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13076, 13066, 13076) */
		reached[1][13066] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13076, 13067, 13076) */
		reached[1][13067] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5762: // STATE 13068 - mutant_243.pml:300 - [((START==ABORT))] (13076:0:1 - 1)
		IfNotBlocked
		reached[1][13068] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13076, 13069, 13076) */
		reached[1][13069] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13076, 13070, 13076) */
		reached[1][13070] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5763: // STATE 13072 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13076:0 - 1)
		IfNotBlocked
		reached[1][13072] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13076, 13074, 13076) */
		reached[1][13074] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5764: // STATE 13076 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13076] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5765: // STATE 13078 - mutant_243.pml:227 - [((_pid==0))] (13086:0:0 - 1)
		IfNotBlocked
		reached[1][13078] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13079, 13086) */
		reached[1][13079] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13085, 13086) */
		reached[1][13085] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5766: // STATE 13080 - mutant_243.pml:229 - [((_pid==1))] (13086:0:0 - 1)
		IfNotBlocked
		reached[1][13080] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13081, 13086) */
		reached[1][13081] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13085, 13086) */
		reached[1][13085] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5767: // STATE 13082 - mutant_243.pml:231 - [((_pid>1))] (13086:0:0 - 1)
		IfNotBlocked
		reached[1][13082] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13083, 13086) */
		reached[1][13083] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13085, 13086) */
		reached[1][13085] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5768: // STATE 13086 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13086] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5769: // STATE 13087 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13215:1 - 1)
		IfNotBlocked
		reached[1][13087] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13215, 13092, 13215) */
		reached[1][13092] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5770: // STATE 13090 - mutant_243.pml:312 - [(1)] (13215:0:1 - 1)
		IfNotBlocked
		reached[1][13090] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13215, 13092, 13215) */
		reached[1][13092] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5771: // STATE 13094 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13094] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5772: // STATE 13095 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (13129:0:1 - 1)
		IfNotBlocked
		reached[1][13095] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13129, 13096, 13129) */
		reached[1][13096] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13129, 13097, 13129) */
		reached[1][13097] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5773: // STATE 13113 - mutant_243.pml:336 - [.(goto)] (0:13129:0 - 6)
		IfNotBlocked
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5774: // STATE 13098 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (13129:0:1 - 1)
		IfNotBlocked
		reached[1][13098] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13129, 13099, 13129) */
		reached[1][13099] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13129, 13100, 13129) */
		reached[1][13100] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5775: // STATE 13101 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13129:0:1 - 1)
		IfNotBlocked
		reached[1][13101] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13129, 13102, 13129) */
		reached[1][13102] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13129, 13103, 13129) */
		reached[1][13103] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5776: // STATE 13104 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13129:0:1 - 1)
		IfNotBlocked
		reached[1][13104] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13129, 13105, 13129) */
		reached[1][13105] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13129, 13106, 13129) */
		reached[1][13106] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5777: // STATE 13107 - mutant_243.pml:330 - [((PAUSE==ABORT))] (13129:0:1 - 1)
		IfNotBlocked
		reached[1][13107] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13129, 13108, 13129) */
		reached[1][13108] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13129, 13109, 13129) */
		reached[1][13109] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5778: // STATE 13111 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13129:0 - 1)
		IfNotBlocked
		reached[1][13111] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13129, 13113, 13129) */
		reached[1][13113] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5779: // STATE 13116 - mutant_243.pml:239 - [((_pid==0))] (13124:0:0 - 1)
		IfNotBlocked
		reached[1][13116] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13117, 13124) */
		reached[1][13117] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13123, 13124) */
		reached[1][13123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5780: // STATE 13118 - mutant_243.pml:241 - [((_pid==1))] (13124:0:0 - 1)
		IfNotBlocked
		reached[1][13118] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13119, 13124) */
		reached[1][13119] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13123, 13124) */
		reached[1][13123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5781: // STATE 13120 - mutant_243.pml:243 - [((_pid>1))] (13124:0:0 - 1)
		IfNotBlocked
		reached[1][13120] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13121, 13124) */
		reached[1][13121] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13123, 13124) */
		reached[1][13123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5782: // STATE 13124 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13124] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5783: // STATE 13125 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13215:1 - 1)
		IfNotBlocked
		reached[1][13125] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13215, 13130, 13215) */
		reached[1][13130] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5784: // STATE 13128 - mutant_243.pml:341 - [(1)] (13215:0:1 - 1)
		IfNotBlocked
		reached[1][13128] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13215, 13130, 13215) */
		reached[1][13130] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5785: // STATE 13132 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13132] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5786: // STATE 13133 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13167:0:1 - 1)
		IfNotBlocked
		reached[1][13133] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13167, 13134, 13167) */
		reached[1][13134] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13167, 13135, 13167) */
		reached[1][13135] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5787: // STATE 13151 - mutant_243.pml:365 - [.(goto)] (0:13167:0 - 6)
		IfNotBlocked
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5788: // STATE 13136 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13167:0:1 - 1)
		IfNotBlocked
		reached[1][13136] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13167, 13137, 13167) */
		reached[1][13137] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13167, 13138, 13167) */
		reached[1][13138] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5789: // STATE 13139 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13167:0:1 - 1)
		IfNotBlocked
		reached[1][13139] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13167, 13140, 13167) */
		reached[1][13140] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13167, 13141, 13167) */
		reached[1][13141] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5790: // STATE 13142 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13167:0:1 - 1)
		IfNotBlocked
		reached[1][13142] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13167, 13143, 13167) */
		reached[1][13143] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13167, 13144, 13167) */
		reached[1][13144] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5791: // STATE 13145 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13167:0:1 - 1)
		IfNotBlocked
		reached[1][13145] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13167, 13146, 13167) */
		reached[1][13146] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13167, 13147, 13167) */
		reached[1][13147] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5792: // STATE 13149 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13167:0 - 1)
		IfNotBlocked
		reached[1][13149] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13167, 13151, 13167) */
		reached[1][13151] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5793: // STATE 13154 - mutant_243.pml:251 - [((_pid==0))] (13162:0:0 - 1)
		IfNotBlocked
		reached[1][13154] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13155, 13162) */
		reached[1][13155] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13161, 13162) */
		reached[1][13161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5794: // STATE 13156 - mutant_243.pml:253 - [((_pid==1))] (13162:0:0 - 1)
		IfNotBlocked
		reached[1][13156] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13157, 13162) */
		reached[1][13157] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13161, 13162) */
		reached[1][13161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5795: // STATE 13158 - mutant_243.pml:255 - [((_pid>1))] (13162:0:0 - 1)
		IfNotBlocked
		reached[1][13158] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13159, 13162) */
		reached[1][13159] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13161, 13162) */
		reached[1][13161] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5796: // STATE 13162 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13162] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5797: // STATE 13163 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13215:1 - 1)
		IfNotBlocked
		reached[1][13163] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13215, 13168, 13215) */
		reached[1][13168] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5798: // STATE 13166 - mutant_243.pml:370 - [(1)] (13215:0:1 - 1)
		IfNotBlocked
		reached[1][13166] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13215, 13168, 13215) */
		reached[1][13168] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5799: // STATE 13170 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13170] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5800: // STATE 13171 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13205:0:1 - 1)
		IfNotBlocked
		reached[1][13171] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13205, 13172, 13205) */
		reached[1][13172] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13205, 13173, 13205) */
		reached[1][13173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5801: // STATE 13189 - mutant_243.pml:394 - [.(goto)] (0:13205:0 - 6)
		IfNotBlocked
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5802: // STATE 13174 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13205:0:1 - 1)
		IfNotBlocked
		reached[1][13174] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13205, 13175, 13205) */
		reached[1][13175] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13205, 13176, 13205) */
		reached[1][13176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5803: // STATE 13177 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13205:0:1 - 1)
		IfNotBlocked
		reached[1][13177] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13205, 13178, 13205) */
		reached[1][13178] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13205, 13179, 13205) */
		reached[1][13179] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5804: // STATE 13180 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13205:0:1 - 1)
		IfNotBlocked
		reached[1][13180] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13205, 13181, 13205) */
		reached[1][13181] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13205, 13182, 13205) */
		reached[1][13182] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5805: // STATE 13183 - mutant_243.pml:388 - [((STOP==ABORT))] (13205:0:1 - 1)
		IfNotBlocked
		reached[1][13183] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13205, 13184, 13205) */
		reached[1][13184] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13205, 13185, 13205) */
		reached[1][13185] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5806: // STATE 13187 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13205:0 - 1)
		IfNotBlocked
		reached[1][13187] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13205, 13189, 13205) */
		reached[1][13189] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5807: // STATE 13192 - mutant_243.pml:263 - [((_pid==0))] (13200:0:0 - 1)
		IfNotBlocked
		reached[1][13192] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13193, 13200) */
		reached[1][13193] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13199, 13200) */
		reached[1][13199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5808: // STATE 13194 - mutant_243.pml:265 - [((_pid==1))] (13200:0:0 - 1)
		IfNotBlocked
		reached[1][13194] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13195, 13200) */
		reached[1][13195] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13199, 13200) */
		reached[1][13199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5809: // STATE 13196 - mutant_243.pml:267 - [((_pid>1))] (13200:0:0 - 1)
		IfNotBlocked
		reached[1][13196] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13197, 13200) */
		reached[1][13197] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13199, 13200) */
		reached[1][13199] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5810: // STATE 13200 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13200] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5811: // STATE 13201 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13215:1 - 1)
		IfNotBlocked
		reached[1][13201] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13215, 13206, 13215) */
		reached[1][13206] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5812: // STATE 13204 - mutant_243.pml:399 - [(1)] (13215:0:1 - 1)
		IfNotBlocked
		reached[1][13204] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13215, 13206, 13215) */
		reached[1][13206] = 1;
		;
		/* merge: .(goto)(13215, 13209, 13215) */
		reached[1][13209] = 1;
		;
		/* merge: j = (j-1)(13215, 13211, 13215) */
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5813: // STATE 13211 - mutant_243.pml:446 - [j = (j-1)] (0:13215:1 - 13)
		IfNotBlocked
		reached[1][13211] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13216, 13215) */
		reached[1][13216] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5814: // STATE 13213 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][13213] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 5815: // STATE 13223 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',6)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13223] = 1;
		Printf("Supervisor propagating command %e...\n", 6);
		_m = 3; goto P999; /* 0 */
	case 5816: // STATE 13224 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13224] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5817: // STATE 13225 - mutant_243.pml:421 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13225] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5818: // STATE 13226 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (13246:0:1 - 1)
		IfNotBlocked
		reached[1][13226] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13246, 13227, 13246) */
		reached[1][13227] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13246, 13228, 13246) */
		reached[1][13228] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5819: // STATE 13244 - mutant_243.pml:306 - [.(goto)] (0:13246:0 - 6)
		IfNotBlocked
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5820: // STATE 13229 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (13246:0:1 - 1)
		IfNotBlocked
		reached[1][13229] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13246, 13230, 13246) */
		reached[1][13230] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13246, 13231, 13246) */
		reached[1][13231] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5821: // STATE 13232 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13246:0:1 - 1)
		IfNotBlocked
		reached[1][13232] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13246, 13233, 13246) */
		reached[1][13233] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13246, 13234, 13246) */
		reached[1][13234] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5822: // STATE 13235 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13246:0:1 - 1)
		IfNotBlocked
		reached[1][13235] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13246, 13236, 13246) */
		reached[1][13236] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13246, 13237, 13246) */
		reached[1][13237] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5823: // STATE 13238 - mutant_243.pml:300 - [((START==ABORT))] (13246:0:1 - 1)
		IfNotBlocked
		reached[1][13238] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13246, 13239, 13246) */
		reached[1][13239] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13246, 13240, 13246) */
		reached[1][13240] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5824: // STATE 13242 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13246:0 - 1)
		IfNotBlocked
		reached[1][13242] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13246, 13244, 13246) */
		reached[1][13244] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5825: // STATE 13246 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13246] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5826: // STATE 13248 - mutant_243.pml:227 - [((_pid==0))] (13256:0:0 - 1)
		IfNotBlocked
		reached[1][13248] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13249, 13256) */
		reached[1][13249] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13255, 13256) */
		reached[1][13255] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5827: // STATE 13250 - mutant_243.pml:229 - [((_pid==1))] (13256:0:0 - 1)
		IfNotBlocked
		reached[1][13250] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13251, 13256) */
		reached[1][13251] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13255, 13256) */
		reached[1][13255] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5828: // STATE 13252 - mutant_243.pml:231 - [((_pid>1))] (13256:0:0 - 1)
		IfNotBlocked
		reached[1][13252] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13253, 13256) */
		reached[1][13253] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13255, 13256) */
		reached[1][13255] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5829: // STATE 13256 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13256] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5830: // STATE 13257 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13385:1 - 1)
		IfNotBlocked
		reached[1][13257] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13385, 13262, 13385) */
		reached[1][13262] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5831: // STATE 13260 - mutant_243.pml:312 - [(1)] (13385:0:1 - 1)
		IfNotBlocked
		reached[1][13260] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13385, 13262, 13385) */
		reached[1][13262] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5832: // STATE 13264 - mutant_243.pml:423 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13264] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5833: // STATE 13265 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (13299:0:1 - 1)
		IfNotBlocked
		reached[1][13265] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13299, 13266, 13299) */
		reached[1][13266] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13299, 13267, 13299) */
		reached[1][13267] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5834: // STATE 13283 - mutant_243.pml:336 - [.(goto)] (0:13299:0 - 6)
		IfNotBlocked
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5835: // STATE 13268 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (13299:0:1 - 1)
		IfNotBlocked
		reached[1][13268] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13299, 13269, 13299) */
		reached[1][13269] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13299, 13270, 13299) */
		reached[1][13270] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5836: // STATE 13271 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13299:0:1 - 1)
		IfNotBlocked
		reached[1][13271] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13299, 13272, 13299) */
		reached[1][13272] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13299, 13273, 13299) */
		reached[1][13273] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5837: // STATE 13274 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13299:0:1 - 1)
		IfNotBlocked
		reached[1][13274] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13299, 13275, 13299) */
		reached[1][13275] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13299, 13276, 13299) */
		reached[1][13276] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5838: // STATE 13277 - mutant_243.pml:330 - [((PAUSE==ABORT))] (13299:0:1 - 1)
		IfNotBlocked
		reached[1][13277] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13299, 13278, 13299) */
		reached[1][13278] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13299, 13279, 13299) */
		reached[1][13279] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5839: // STATE 13281 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13299:0 - 1)
		IfNotBlocked
		reached[1][13281] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13299, 13283, 13299) */
		reached[1][13283] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5840: // STATE 13286 - mutant_243.pml:239 - [((_pid==0))] (13294:0:0 - 1)
		IfNotBlocked
		reached[1][13286] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13287, 13294) */
		reached[1][13287] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13293, 13294) */
		reached[1][13293] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5841: // STATE 13288 - mutant_243.pml:241 - [((_pid==1))] (13294:0:0 - 1)
		IfNotBlocked
		reached[1][13288] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13289, 13294) */
		reached[1][13289] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13293, 13294) */
		reached[1][13293] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5842: // STATE 13290 - mutant_243.pml:243 - [((_pid>1))] (13294:0:0 - 1)
		IfNotBlocked
		reached[1][13290] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13291, 13294) */
		reached[1][13291] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13293, 13294) */
		reached[1][13293] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5843: // STATE 13294 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13294] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5844: // STATE 13295 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13385:1 - 1)
		IfNotBlocked
		reached[1][13295] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13385, 13300, 13385) */
		reached[1][13300] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5845: // STATE 13298 - mutant_243.pml:341 - [(1)] (13385:0:1 - 1)
		IfNotBlocked
		reached[1][13298] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13385, 13300, 13385) */
		reached[1][13300] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5846: // STATE 13302 - mutant_243.pml:425 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13302] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5847: // STATE 13303 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13337:0:1 - 1)
		IfNotBlocked
		reached[1][13303] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13337, 13304, 13337) */
		reached[1][13304] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13337, 13305, 13337) */
		reached[1][13305] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5848: // STATE 13321 - mutant_243.pml:365 - [.(goto)] (0:13337:0 - 6)
		IfNotBlocked
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5849: // STATE 13306 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13337:0:1 - 1)
		IfNotBlocked
		reached[1][13306] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13337, 13307, 13337) */
		reached[1][13307] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13337, 13308, 13337) */
		reached[1][13308] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5850: // STATE 13309 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13337:0:1 - 1)
		IfNotBlocked
		reached[1][13309] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13337, 13310, 13337) */
		reached[1][13310] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13337, 13311, 13337) */
		reached[1][13311] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5851: // STATE 13312 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13337:0:1 - 1)
		IfNotBlocked
		reached[1][13312] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13337, 13313, 13337) */
		reached[1][13313] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13337, 13314, 13337) */
		reached[1][13314] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5852: // STATE 13315 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13337:0:1 - 1)
		IfNotBlocked
		reached[1][13315] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13337, 13316, 13337) */
		reached[1][13316] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13337, 13317, 13337) */
		reached[1][13317] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5853: // STATE 13319 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13337:0 - 1)
		IfNotBlocked
		reached[1][13319] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13337, 13321, 13337) */
		reached[1][13321] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5854: // STATE 13324 - mutant_243.pml:251 - [((_pid==0))] (13332:0:0 - 1)
		IfNotBlocked
		reached[1][13324] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13325, 13332) */
		reached[1][13325] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13331, 13332) */
		reached[1][13331] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5855: // STATE 13326 - mutant_243.pml:253 - [((_pid==1))] (13332:0:0 - 1)
		IfNotBlocked
		reached[1][13326] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13327, 13332) */
		reached[1][13327] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13331, 13332) */
		reached[1][13331] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5856: // STATE 13328 - mutant_243.pml:255 - [((_pid>1))] (13332:0:0 - 1)
		IfNotBlocked
		reached[1][13328] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13329, 13332) */
		reached[1][13329] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13331, 13332) */
		reached[1][13331] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5857: // STATE 13332 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13332] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5858: // STATE 13333 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13385:1 - 1)
		IfNotBlocked
		reached[1][13333] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13385, 13338, 13385) */
		reached[1][13338] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5859: // STATE 13336 - mutant_243.pml:370 - [(1)] (13385:0:1 - 1)
		IfNotBlocked
		reached[1][13336] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13385, 13338, 13385) */
		reached[1][13338] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5860: // STATE 13340 - mutant_243.pml:427 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13340] = 1;
		if (!(((6==12)||(6==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5861: // STATE 13341 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13375:0:1 - 1)
		IfNotBlocked
		reached[1][13341] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13375, 13342, 13375) */
		reached[1][13342] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13375, 13343, 13375) */
		reached[1][13343] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5862: // STATE 13359 - mutant_243.pml:394 - [.(goto)] (0:13375:0 - 6)
		IfNotBlocked
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5863: // STATE 13344 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13375:0:1 - 1)
		IfNotBlocked
		reached[1][13344] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13375, 13345, 13375) */
		reached[1][13345] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13375, 13346, 13375) */
		reached[1][13346] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5864: // STATE 13347 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13375:0:1 - 1)
		IfNotBlocked
		reached[1][13347] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13375, 13348, 13375) */
		reached[1][13348] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13375, 13349, 13375) */
		reached[1][13349] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5865: // STATE 13350 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13375:0:1 - 1)
		IfNotBlocked
		reached[1][13350] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13375, 13351, 13375) */
		reached[1][13351] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13375, 13352, 13375) */
		reached[1][13352] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5866: // STATE 13353 - mutant_243.pml:388 - [((STOP==ABORT))] (13375:0:1 - 1)
		IfNotBlocked
		reached[1][13353] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13375, 13354, 13375) */
		reached[1][13354] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13375, 13355, 13375) */
		reached[1][13355] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5867: // STATE 13357 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13375:0 - 1)
		IfNotBlocked
		reached[1][13357] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13375, 13359, 13375) */
		reached[1][13359] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5868: // STATE 13362 - mutant_243.pml:263 - [((_pid==0))] (13370:0:0 - 1)
		IfNotBlocked
		reached[1][13362] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13363, 13370) */
		reached[1][13363] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13369, 13370) */
		reached[1][13369] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5869: // STATE 13364 - mutant_243.pml:265 - [((_pid==1))] (13370:0:0 - 1)
		IfNotBlocked
		reached[1][13364] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13365, 13370) */
		reached[1][13365] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13369, 13370) */
		reached[1][13369] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5870: // STATE 13366 - mutant_243.pml:267 - [((_pid>1))] (13370:0:0 - 1)
		IfNotBlocked
		reached[1][13366] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13367, 13370) */
		reached[1][13367] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13369, 13370) */
		reached[1][13369] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5871: // STATE 13370 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13370] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5872: // STATE 13371 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13385:1 - 1)
		IfNotBlocked
		reached[1][13371] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13385, 13376, 13385) */
		reached[1][13376] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5873: // STATE 13374 - mutant_243.pml:399 - [(1)] (13385:0:1 - 1)
		IfNotBlocked
		reached[1][13374] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13385, 13376, 13385) */
		reached[1][13376] = 1;
		;
		/* merge: .(goto)(13385, 13379, 13385) */
		reached[1][13379] = 1;
		;
		/* merge: j = (j+1)(13385, 13381, 13385) */
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5874: // STATE 13381 - mutant_243.pml:435 - [j = (j+1)] (0:13385:1 - 13)
		IfNotBlocked
		reached[1][13381] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13386, 13385) */
		reached[1][13386] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5875: // STATE 13383 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][13383] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5876: // STATE 13389 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13389] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5877: // STATE 13390 - mutant_243.pml:466 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13390] = 1;
		if (!((6==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5878: // STATE 13391 - mutant_243.pml:227 - [((_pid==0))] (13399:0:0 - 1)
		IfNotBlocked
		reached[1][13391] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13392, 13399) */
		reached[1][13392] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13398, 13399) */
		reached[1][13398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5879: // STATE 13393 - mutant_243.pml:229 - [((_pid==1))] (13399:0:0 - 1)
		IfNotBlocked
		reached[1][13393] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13394, 13399) */
		reached[1][13394] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13398, 13399) */
		reached[1][13398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5880: // STATE 13395 - mutant_243.pml:231 - [((_pid>1))] (13399:0:0 - 1)
		IfNotBlocked
		reached[1][13395] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13396, 13399) */
		reached[1][13396] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13398, 13399) */
		reached[1][13398] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5881: // STATE 13399 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13399] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5882: // STATE 13400 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13444:1 - 1)
		IfNotBlocked
		reached[1][13400] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13444, 13439, 13444) */
		reached[1][13439] = 1;
		;
		/* merge: j = (j+1)(13444, 13440, 13444) */
		reached[1][13440] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13445, 13444) */
		reached[1][13445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5883: // STATE 13402 - mutant_243.pml:468 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13402] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5884: // STATE 13403 - mutant_243.pml:251 - [((_pid==0))] (13411:0:0 - 1)
		IfNotBlocked
		reached[1][13403] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13404, 13411) */
		reached[1][13404] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13410, 13411) */
		reached[1][13410] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5885: // STATE 13405 - mutant_243.pml:253 - [((_pid==1))] (13411:0:0 - 1)
		IfNotBlocked
		reached[1][13405] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13406, 13411) */
		reached[1][13406] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13410, 13411) */
		reached[1][13410] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5886: // STATE 13407 - mutant_243.pml:255 - [((_pid>1))] (13411:0:0 - 1)
		IfNotBlocked
		reached[1][13407] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13408, 13411) */
		reached[1][13408] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13410, 13411) */
		reached[1][13410] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5887: // STATE 13411 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13411] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5888: // STATE 13412 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13444:1 - 1)
		IfNotBlocked
		reached[1][13412] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13444, 13439, 13444) */
		reached[1][13439] = 1;
		;
		/* merge: j = (j+1)(13444, 13440, 13444) */
		reached[1][13440] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13445, 13444) */
		reached[1][13445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5889: // STATE 13414 - mutant_243.pml:470 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13414] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5890: // STATE 13415 - mutant_243.pml:239 - [((_pid==0))] (13423:0:0 - 1)
		IfNotBlocked
		reached[1][13415] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13416, 13423) */
		reached[1][13416] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13422, 13423) */
		reached[1][13422] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5891: // STATE 13417 - mutant_243.pml:241 - [((_pid==1))] (13423:0:0 - 1)
		IfNotBlocked
		reached[1][13417] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13418, 13423) */
		reached[1][13418] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13422, 13423) */
		reached[1][13422] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5892: // STATE 13419 - mutant_243.pml:243 - [((_pid>1))] (13423:0:0 - 1)
		IfNotBlocked
		reached[1][13419] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13420, 13423) */
		reached[1][13420] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13422, 13423) */
		reached[1][13422] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5893: // STATE 13423 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13423] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5894: // STATE 13424 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13444:1 - 1)
		IfNotBlocked
		reached[1][13424] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13444, 13439, 13444) */
		reached[1][13439] = 1;
		;
		/* merge: j = (j+1)(13444, 13440, 13444) */
		reached[1][13440] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13445, 13444) */
		reached[1][13445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5895: // STATE 13426 - mutant_243.pml:472 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13426] = 1;
		if (!((6==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5896: // STATE 13427 - mutant_243.pml:263 - [((_pid==0))] (13435:0:0 - 1)
		IfNotBlocked
		reached[1][13427] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13428, 13435) */
		reached[1][13428] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13434, 13435) */
		reached[1][13434] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5897: // STATE 13429 - mutant_243.pml:265 - [((_pid==1))] (13435:0:0 - 1)
		IfNotBlocked
		reached[1][13429] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13430, 13435) */
		reached[1][13430] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13434, 13435) */
		reached[1][13434] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5898: // STATE 13431 - mutant_243.pml:267 - [((_pid>1))] (13435:0:0 - 1)
		IfNotBlocked
		reached[1][13431] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13432, 13435) */
		reached[1][13432] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13434, 13435) */
		reached[1][13434] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5899: // STATE 13435 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13435] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5900: // STATE 13436 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13444:1 - 1)
		IfNotBlocked
		reached[1][13436] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13444, 13439, 13444) */
		reached[1][13439] = 1;
		;
		/* merge: j = (j+1)(13444, 13440, 13444) */
		reached[1][13440] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13445, 13444) */
		reached[1][13445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5901: // STATE 13440 - mutant_243.pml:475 - [j = (j+1)] (0:13444:1 - 5)
		IfNotBlocked
		reached[1][13440] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13445, 13444) */
		reached[1][13445] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5902: // STATE 13442 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][13442] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 5903: // STATE 13453 - mutant_243.pml:554 - [((11==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13453] = 1;
		if (!((11==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5904: // STATE 13454 - mutant_243.pml:483 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13454] = 1;
		if (!(((8==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5905: // STATE 13455 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13455] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 5906: // STATE 13456 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][13456] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5907: // STATE 13458 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13458] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5908: // STATE 13459 - mutant_243.pml:454 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13459] = 1;
		if (!(((8==5)||(8==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5909: // STATE 13460 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13460] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5910: // STATE 13461 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13461] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5911: // STATE 13462 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (13482:0:1 - 1)
		IfNotBlocked
		reached[1][13462] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13482, 13463, 13482) */
		reached[1][13463] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13482, 13464, 13482) */
		reached[1][13464] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5912: // STATE 13480 - mutant_243.pml:306 - [.(goto)] (0:13482:0 - 6)
		IfNotBlocked
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5913: // STATE 13465 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (13482:0:1 - 1)
		IfNotBlocked
		reached[1][13465] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13482, 13466, 13482) */
		reached[1][13466] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13482, 13467, 13482) */
		reached[1][13467] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5914: // STATE 13468 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13482:0:1 - 1)
		IfNotBlocked
		reached[1][13468] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13482, 13469, 13482) */
		reached[1][13469] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13482, 13470, 13482) */
		reached[1][13470] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5915: // STATE 13471 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13482:0:1 - 1)
		IfNotBlocked
		reached[1][13471] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13482, 13472, 13482) */
		reached[1][13472] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13482, 13473, 13482) */
		reached[1][13473] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5916: // STATE 13474 - mutant_243.pml:300 - [((START==ABORT))] (13482:0:1 - 1)
		IfNotBlocked
		reached[1][13474] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13482, 13475, 13482) */
		reached[1][13475] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13482, 13476, 13482) */
		reached[1][13476] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5917: // STATE 13478 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13482:0 - 1)
		IfNotBlocked
		reached[1][13478] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13482, 13480, 13482) */
		reached[1][13480] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5918: // STATE 13482 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13482] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5919: // STATE 13484 - mutant_243.pml:227 - [((_pid==0))] (13492:0:0 - 1)
		IfNotBlocked
		reached[1][13484] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13485, 13492) */
		reached[1][13485] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13491, 13492) */
		reached[1][13491] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5920: // STATE 13486 - mutant_243.pml:229 - [((_pid==1))] (13492:0:0 - 1)
		IfNotBlocked
		reached[1][13486] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13487, 13492) */
		reached[1][13487] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13491, 13492) */
		reached[1][13491] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5921: // STATE 13488 - mutant_243.pml:231 - [((_pid>1))] (13492:0:0 - 1)
		IfNotBlocked
		reached[1][13488] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13489, 13492) */
		reached[1][13489] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13491, 13492) */
		reached[1][13491] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5922: // STATE 13492 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13492] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5923: // STATE 13493 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13621:1 - 1)
		IfNotBlocked
		reached[1][13493] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13621, 13498, 13621) */
		reached[1][13498] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5924: // STATE 13496 - mutant_243.pml:312 - [(1)] (13621:0:1 - 1)
		IfNotBlocked
		reached[1][13496] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13621, 13498, 13621) */
		reached[1][13498] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5925: // STATE 13500 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13500] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5926: // STATE 13501 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (13535:0:1 - 1)
		IfNotBlocked
		reached[1][13501] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13535, 13502, 13535) */
		reached[1][13502] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13535, 13503, 13535) */
		reached[1][13503] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5927: // STATE 13519 - mutant_243.pml:336 - [.(goto)] (0:13535:0 - 6)
		IfNotBlocked
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5928: // STATE 13504 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (13535:0:1 - 1)
		IfNotBlocked
		reached[1][13504] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13535, 13505, 13535) */
		reached[1][13505] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13535, 13506, 13535) */
		reached[1][13506] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5929: // STATE 13507 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13535:0:1 - 1)
		IfNotBlocked
		reached[1][13507] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13535, 13508, 13535) */
		reached[1][13508] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13535, 13509, 13535) */
		reached[1][13509] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5930: // STATE 13510 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13535:0:1 - 1)
		IfNotBlocked
		reached[1][13510] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13535, 13511, 13535) */
		reached[1][13511] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13535, 13512, 13535) */
		reached[1][13512] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5931: // STATE 13513 - mutant_243.pml:330 - [((PAUSE==ABORT))] (13535:0:1 - 1)
		IfNotBlocked
		reached[1][13513] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13535, 13514, 13535) */
		reached[1][13514] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13535, 13515, 13535) */
		reached[1][13515] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5932: // STATE 13517 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13535:0 - 1)
		IfNotBlocked
		reached[1][13517] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13535, 13519, 13535) */
		reached[1][13519] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5933: // STATE 13522 - mutant_243.pml:239 - [((_pid==0))] (13530:0:0 - 1)
		IfNotBlocked
		reached[1][13522] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13523, 13530) */
		reached[1][13523] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13529, 13530) */
		reached[1][13529] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5934: // STATE 13524 - mutant_243.pml:241 - [((_pid==1))] (13530:0:0 - 1)
		IfNotBlocked
		reached[1][13524] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13525, 13530) */
		reached[1][13525] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13529, 13530) */
		reached[1][13529] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5935: // STATE 13526 - mutant_243.pml:243 - [((_pid>1))] (13530:0:0 - 1)
		IfNotBlocked
		reached[1][13526] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13527, 13530) */
		reached[1][13527] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13529, 13530) */
		reached[1][13529] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5936: // STATE 13530 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13530] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5937: // STATE 13531 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13621:1 - 1)
		IfNotBlocked
		reached[1][13531] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13621, 13536, 13621) */
		reached[1][13536] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5938: // STATE 13534 - mutant_243.pml:341 - [(1)] (13621:0:1 - 1)
		IfNotBlocked
		reached[1][13534] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13621, 13536, 13621) */
		reached[1][13536] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5939: // STATE 13538 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13538] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5940: // STATE 13539 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13573:0:1 - 1)
		IfNotBlocked
		reached[1][13539] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13573, 13540, 13573) */
		reached[1][13540] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13573, 13541, 13573) */
		reached[1][13541] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5941: // STATE 13557 - mutant_243.pml:365 - [.(goto)] (0:13573:0 - 6)
		IfNotBlocked
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5942: // STATE 13542 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13573:0:1 - 1)
		IfNotBlocked
		reached[1][13542] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13573, 13543, 13573) */
		reached[1][13543] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13573, 13544, 13573) */
		reached[1][13544] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5943: // STATE 13545 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13573:0:1 - 1)
		IfNotBlocked
		reached[1][13545] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13573, 13546, 13573) */
		reached[1][13546] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13573, 13547, 13573) */
		reached[1][13547] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5944: // STATE 13548 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13573:0:1 - 1)
		IfNotBlocked
		reached[1][13548] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13573, 13549, 13573) */
		reached[1][13549] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13573, 13550, 13573) */
		reached[1][13550] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5945: // STATE 13551 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13573:0:1 - 1)
		IfNotBlocked
		reached[1][13551] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13573, 13552, 13573) */
		reached[1][13552] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13573, 13553, 13573) */
		reached[1][13553] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5946: // STATE 13555 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13573:0 - 1)
		IfNotBlocked
		reached[1][13555] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13573, 13557, 13573) */
		reached[1][13557] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5947: // STATE 13560 - mutant_243.pml:251 - [((_pid==0))] (13568:0:0 - 1)
		IfNotBlocked
		reached[1][13560] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13561, 13568) */
		reached[1][13561] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13567, 13568) */
		reached[1][13567] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5948: // STATE 13562 - mutant_243.pml:253 - [((_pid==1))] (13568:0:0 - 1)
		IfNotBlocked
		reached[1][13562] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13563, 13568) */
		reached[1][13563] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13567, 13568) */
		reached[1][13567] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5949: // STATE 13564 - mutant_243.pml:255 - [((_pid>1))] (13568:0:0 - 1)
		IfNotBlocked
		reached[1][13564] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13565, 13568) */
		reached[1][13565] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13567, 13568) */
		reached[1][13567] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5950: // STATE 13568 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13568] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5951: // STATE 13569 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13621:1 - 1)
		IfNotBlocked
		reached[1][13569] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13621, 13574, 13621) */
		reached[1][13574] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5952: // STATE 13572 - mutant_243.pml:370 - [(1)] (13621:0:1 - 1)
		IfNotBlocked
		reached[1][13572] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13621, 13574, 13621) */
		reached[1][13574] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5953: // STATE 13576 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13576] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5954: // STATE 13577 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13611:0:1 - 1)
		IfNotBlocked
		reached[1][13577] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13611, 13578, 13611) */
		reached[1][13578] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13611, 13579, 13611) */
		reached[1][13579] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5955: // STATE 13595 - mutant_243.pml:394 - [.(goto)] (0:13611:0 - 6)
		IfNotBlocked
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5956: // STATE 13580 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13611:0:1 - 1)
		IfNotBlocked
		reached[1][13580] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13611, 13581, 13611) */
		reached[1][13581] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13611, 13582, 13611) */
		reached[1][13582] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5957: // STATE 13583 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13611:0:1 - 1)
		IfNotBlocked
		reached[1][13583] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13611, 13584, 13611) */
		reached[1][13584] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13611, 13585, 13611) */
		reached[1][13585] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5958: // STATE 13586 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13611:0:1 - 1)
		IfNotBlocked
		reached[1][13586] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13611, 13587, 13611) */
		reached[1][13587] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13611, 13588, 13611) */
		reached[1][13588] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5959: // STATE 13589 - mutant_243.pml:388 - [((STOP==ABORT))] (13611:0:1 - 1)
		IfNotBlocked
		reached[1][13589] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13611, 13590, 13611) */
		reached[1][13590] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13611, 13591, 13611) */
		reached[1][13591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5960: // STATE 13593 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13611:0 - 1)
		IfNotBlocked
		reached[1][13593] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13611, 13595, 13611) */
		reached[1][13595] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5961: // STATE 13598 - mutant_243.pml:263 - [((_pid==0))] (13606:0:0 - 1)
		IfNotBlocked
		reached[1][13598] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13599, 13606) */
		reached[1][13599] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13605, 13606) */
		reached[1][13605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5962: // STATE 13600 - mutant_243.pml:265 - [((_pid==1))] (13606:0:0 - 1)
		IfNotBlocked
		reached[1][13600] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13601, 13606) */
		reached[1][13601] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13605, 13606) */
		reached[1][13605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5963: // STATE 13602 - mutant_243.pml:267 - [((_pid>1))] (13606:0:0 - 1)
		IfNotBlocked
		reached[1][13602] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13603, 13606) */
		reached[1][13603] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13605, 13606) */
		reached[1][13605] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5964: // STATE 13606 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13606] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5965: // STATE 13607 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13621:1 - 1)
		IfNotBlocked
		reached[1][13607] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13621, 13612, 13621) */
		reached[1][13612] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5966: // STATE 13610 - mutant_243.pml:399 - [(1)] (13621:0:1 - 1)
		IfNotBlocked
		reached[1][13610] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13621, 13612, 13621) */
		reached[1][13612] = 1;
		;
		/* merge: .(goto)(13621, 13615, 13621) */
		reached[1][13615] = 1;
		;
		/* merge: j = (j+1)(13621, 13617, 13621) */
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5967: // STATE 13617 - mutant_243.pml:435 - [j = (j+1)] (0:13621:1 - 13)
		IfNotBlocked
		reached[1][13617] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13622, 13621) */
		reached[1][13622] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5968: // STATE 13619 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][13619] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 5969: // STATE 13626 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][13626] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 5970: // STATE 13627 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13627] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5971: // STATE 13628 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13628] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5972: // STATE 13629 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (13649:0:1 - 1)
		IfNotBlocked
		reached[1][13629] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13649, 13630, 13649) */
		reached[1][13630] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13649, 13631, 13649) */
		reached[1][13631] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5973: // STATE 13647 - mutant_243.pml:306 - [.(goto)] (0:13649:0 - 6)
		IfNotBlocked
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5974: // STATE 13632 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (13649:0:1 - 1)
		IfNotBlocked
		reached[1][13632] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13649, 13633, 13649) */
		reached[1][13633] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13649, 13634, 13649) */
		reached[1][13634] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5975: // STATE 13635 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13649:0:1 - 1)
		IfNotBlocked
		reached[1][13635] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13649, 13636, 13649) */
		reached[1][13636] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13649, 13637, 13649) */
		reached[1][13637] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5976: // STATE 13638 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13649:0:1 - 1)
		IfNotBlocked
		reached[1][13638] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13649, 13639, 13649) */
		reached[1][13639] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13649, 13640, 13649) */
		reached[1][13640] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5977: // STATE 13641 - mutant_243.pml:300 - [((START==ABORT))] (13649:0:1 - 1)
		IfNotBlocked
		reached[1][13641] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13649, 13642, 13649) */
		reached[1][13642] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13649, 13643, 13649) */
		reached[1][13643] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5978: // STATE 13645 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13649:0 - 1)
		IfNotBlocked
		reached[1][13645] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13649, 13647, 13649) */
		reached[1][13647] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5979: // STATE 13649 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13649] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5980: // STATE 13651 - mutant_243.pml:227 - [((_pid==0))] (13659:0:0 - 1)
		IfNotBlocked
		reached[1][13651] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13652, 13659) */
		reached[1][13652] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13658, 13659) */
		reached[1][13658] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5981: // STATE 13653 - mutant_243.pml:229 - [((_pid==1))] (13659:0:0 - 1)
		IfNotBlocked
		reached[1][13653] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13654, 13659) */
		reached[1][13654] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13658, 13659) */
		reached[1][13658] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5982: // STATE 13655 - mutant_243.pml:231 - [((_pid>1))] (13659:0:0 - 1)
		IfNotBlocked
		reached[1][13655] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13656, 13659) */
		reached[1][13656] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13658, 13659) */
		reached[1][13658] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5983: // STATE 13659 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13659] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5984: // STATE 13660 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13788:1 - 1)
		IfNotBlocked
		reached[1][13660] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13788, 13665, 13788) */
		reached[1][13665] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5985: // STATE 13663 - mutant_243.pml:312 - [(1)] (13788:0:1 - 1)
		IfNotBlocked
		reached[1][13663] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13788, 13665, 13788) */
		reached[1][13665] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5986: // STATE 13667 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13667] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5987: // STATE 13668 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (13702:0:1 - 1)
		IfNotBlocked
		reached[1][13668] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13702, 13669, 13702) */
		reached[1][13669] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13702, 13670, 13702) */
		reached[1][13670] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5988: // STATE 13686 - mutant_243.pml:336 - [.(goto)] (0:13702:0 - 6)
		IfNotBlocked
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 5989: // STATE 13671 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (13702:0:1 - 1)
		IfNotBlocked
		reached[1][13671] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13702, 13672, 13702) */
		reached[1][13672] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13702, 13673, 13702) */
		reached[1][13673] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5990: // STATE 13674 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13702:0:1 - 1)
		IfNotBlocked
		reached[1][13674] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13702, 13675, 13702) */
		reached[1][13675] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13702, 13676, 13702) */
		reached[1][13676] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5991: // STATE 13677 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13702:0:1 - 1)
		IfNotBlocked
		reached[1][13677] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13702, 13678, 13702) */
		reached[1][13678] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13702, 13679, 13702) */
		reached[1][13679] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5992: // STATE 13680 - mutant_243.pml:330 - [((PAUSE==ABORT))] (13702:0:1 - 1)
		IfNotBlocked
		reached[1][13680] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13702, 13681, 13702) */
		reached[1][13681] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13702, 13682, 13702) */
		reached[1][13682] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 5993: // STATE 13684 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13702:0 - 1)
		IfNotBlocked
		reached[1][13684] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13702, 13686, 13702) */
		reached[1][13686] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 5994: // STATE 13689 - mutant_243.pml:239 - [((_pid==0))] (13697:0:0 - 1)
		IfNotBlocked
		reached[1][13689] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13690, 13697) */
		reached[1][13690] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13696, 13697) */
		reached[1][13696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5995: // STATE 13691 - mutant_243.pml:241 - [((_pid==1))] (13697:0:0 - 1)
		IfNotBlocked
		reached[1][13691] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13692, 13697) */
		reached[1][13692] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13696, 13697) */
		reached[1][13696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5996: // STATE 13693 - mutant_243.pml:243 - [((_pid>1))] (13697:0:0 - 1)
		IfNotBlocked
		reached[1][13693] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13694, 13697) */
		reached[1][13694] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13696, 13697) */
		reached[1][13696] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 5997: // STATE 13697 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13697] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5998: // STATE 13698 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13788:1 - 1)
		IfNotBlocked
		reached[1][13698] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13788, 13703, 13788) */
		reached[1][13703] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 5999: // STATE 13701 - mutant_243.pml:341 - [(1)] (13788:0:1 - 1)
		IfNotBlocked
		reached[1][13701] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13788, 13703, 13788) */
		reached[1][13703] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6000: // STATE 13705 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13705] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6001: // STATE 13706 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13740:0:1 - 1)
		IfNotBlocked
		reached[1][13706] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13740, 13707, 13740) */
		reached[1][13707] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13740, 13708, 13740) */
		reached[1][13708] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6002: // STATE 13724 - mutant_243.pml:365 - [.(goto)] (0:13740:0 - 6)
		IfNotBlocked
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6003: // STATE 13709 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13740:0:1 - 1)
		IfNotBlocked
		reached[1][13709] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13740, 13710, 13740) */
		reached[1][13710] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13740, 13711, 13740) */
		reached[1][13711] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6004: // STATE 13712 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13740:0:1 - 1)
		IfNotBlocked
		reached[1][13712] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13740, 13713, 13740) */
		reached[1][13713] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13740, 13714, 13740) */
		reached[1][13714] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6005: // STATE 13715 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13740:0:1 - 1)
		IfNotBlocked
		reached[1][13715] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13740, 13716, 13740) */
		reached[1][13716] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13740, 13717, 13740) */
		reached[1][13717] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6006: // STATE 13718 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13740:0:1 - 1)
		IfNotBlocked
		reached[1][13718] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13740, 13719, 13740) */
		reached[1][13719] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13740, 13720, 13740) */
		reached[1][13720] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6007: // STATE 13722 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13740:0 - 1)
		IfNotBlocked
		reached[1][13722] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13740, 13724, 13740) */
		reached[1][13724] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6008: // STATE 13727 - mutant_243.pml:251 - [((_pid==0))] (13735:0:0 - 1)
		IfNotBlocked
		reached[1][13727] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13728, 13735) */
		reached[1][13728] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13734, 13735) */
		reached[1][13734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6009: // STATE 13729 - mutant_243.pml:253 - [((_pid==1))] (13735:0:0 - 1)
		IfNotBlocked
		reached[1][13729] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13730, 13735) */
		reached[1][13730] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13734, 13735) */
		reached[1][13734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6010: // STATE 13731 - mutant_243.pml:255 - [((_pid>1))] (13735:0:0 - 1)
		IfNotBlocked
		reached[1][13731] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13732, 13735) */
		reached[1][13732] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13734, 13735) */
		reached[1][13734] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6011: // STATE 13735 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13735] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6012: // STATE 13736 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13788:1 - 1)
		IfNotBlocked
		reached[1][13736] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13788, 13741, 13788) */
		reached[1][13741] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6013: // STATE 13739 - mutant_243.pml:370 - [(1)] (13788:0:1 - 1)
		IfNotBlocked
		reached[1][13739] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13788, 13741, 13788) */
		reached[1][13741] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6014: // STATE 13743 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13743] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6015: // STATE 13744 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13778:0:1 - 1)
		IfNotBlocked
		reached[1][13744] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13778, 13745, 13778) */
		reached[1][13745] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13778, 13746, 13778) */
		reached[1][13746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6016: // STATE 13762 - mutant_243.pml:394 - [.(goto)] (0:13778:0 - 6)
		IfNotBlocked
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6017: // STATE 13747 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13778:0:1 - 1)
		IfNotBlocked
		reached[1][13747] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13778, 13748, 13778) */
		reached[1][13748] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13778, 13749, 13778) */
		reached[1][13749] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6018: // STATE 13750 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13778:0:1 - 1)
		IfNotBlocked
		reached[1][13750] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13778, 13751, 13778) */
		reached[1][13751] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13778, 13752, 13778) */
		reached[1][13752] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6019: // STATE 13753 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13778:0:1 - 1)
		IfNotBlocked
		reached[1][13753] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13778, 13754, 13778) */
		reached[1][13754] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13778, 13755, 13778) */
		reached[1][13755] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6020: // STATE 13756 - mutant_243.pml:388 - [((STOP==ABORT))] (13778:0:1 - 1)
		IfNotBlocked
		reached[1][13756] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13778, 13757, 13778) */
		reached[1][13757] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13778, 13758, 13778) */
		reached[1][13758] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6021: // STATE 13760 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13778:0 - 1)
		IfNotBlocked
		reached[1][13760] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13778, 13762, 13778) */
		reached[1][13762] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6022: // STATE 13765 - mutant_243.pml:263 - [((_pid==0))] (13773:0:0 - 1)
		IfNotBlocked
		reached[1][13765] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13766, 13773) */
		reached[1][13766] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13772, 13773) */
		reached[1][13772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6023: // STATE 13767 - mutant_243.pml:265 - [((_pid==1))] (13773:0:0 - 1)
		IfNotBlocked
		reached[1][13767] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13768, 13773) */
		reached[1][13768] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13772, 13773) */
		reached[1][13772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6024: // STATE 13769 - mutant_243.pml:267 - [((_pid>1))] (13773:0:0 - 1)
		IfNotBlocked
		reached[1][13769] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13770, 13773) */
		reached[1][13770] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13772, 13773) */
		reached[1][13772] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6025: // STATE 13773 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13773] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6026: // STATE 13774 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13788:1 - 1)
		IfNotBlocked
		reached[1][13774] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13788, 13779, 13788) */
		reached[1][13779] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6027: // STATE 13777 - mutant_243.pml:399 - [(1)] (13788:0:1 - 1)
		IfNotBlocked
		reached[1][13777] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13788, 13779, 13788) */
		reached[1][13779] = 1;
		;
		/* merge: .(goto)(13788, 13782, 13788) */
		reached[1][13782] = 1;
		;
		/* merge: j = (j-1)(13788, 13784, 13788) */
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6028: // STATE 13784 - mutant_243.pml:446 - [j = (j-1)] (0:13788:1 - 13)
		IfNotBlocked
		reached[1][13784] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13789, 13788) */
		reached[1][13789] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6029: // STATE 13786 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][13786] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 6030: // STATE 13796 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',8)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13796] = 1;
		Printf("Supervisor propagating command %e...\n", 8);
		_m = 3; goto P999; /* 0 */
	case 6031: // STATE 13797 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13797] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6032: // STATE 13798 - mutant_243.pml:421 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13798] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6033: // STATE 13799 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (13819:0:1 - 1)
		IfNotBlocked
		reached[1][13799] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13819, 13800, 13819) */
		reached[1][13800] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13819, 13801, 13819) */
		reached[1][13801] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6034: // STATE 13817 - mutant_243.pml:306 - [.(goto)] (0:13819:0 - 6)
		IfNotBlocked
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6035: // STATE 13802 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (13819:0:1 - 1)
		IfNotBlocked
		reached[1][13802] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13819, 13803, 13819) */
		reached[1][13803] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13819, 13804, 13819) */
		reached[1][13804] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6036: // STATE 13805 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13819:0:1 - 1)
		IfNotBlocked
		reached[1][13805] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13819, 13806, 13819) */
		reached[1][13806] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13819, 13807, 13819) */
		reached[1][13807] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6037: // STATE 13808 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13819:0:1 - 1)
		IfNotBlocked
		reached[1][13808] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13819, 13809, 13819) */
		reached[1][13809] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13819, 13810, 13819) */
		reached[1][13810] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6038: // STATE 13811 - mutant_243.pml:300 - [((START==ABORT))] (13819:0:1 - 1)
		IfNotBlocked
		reached[1][13811] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13819, 13812, 13819) */
		reached[1][13812] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13819, 13813, 13819) */
		reached[1][13813] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6039: // STATE 13815 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13819:0 - 1)
		IfNotBlocked
		reached[1][13815] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13819, 13817, 13819) */
		reached[1][13817] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6040: // STATE 13819 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13819] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6041: // STATE 13821 - mutant_243.pml:227 - [((_pid==0))] (13829:0:0 - 1)
		IfNotBlocked
		reached[1][13821] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13822, 13829) */
		reached[1][13822] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13828, 13829) */
		reached[1][13828] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6042: // STATE 13823 - mutant_243.pml:229 - [((_pid==1))] (13829:0:0 - 1)
		IfNotBlocked
		reached[1][13823] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13824, 13829) */
		reached[1][13824] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13828, 13829) */
		reached[1][13828] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6043: // STATE 13825 - mutant_243.pml:231 - [((_pid>1))] (13829:0:0 - 1)
		IfNotBlocked
		reached[1][13825] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13826, 13829) */
		reached[1][13826] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13828, 13829) */
		reached[1][13828] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6044: // STATE 13829 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13829] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6045: // STATE 13830 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:13958:1 - 1)
		IfNotBlocked
		reached[1][13830] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13958, 13835, 13958) */
		reached[1][13835] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6046: // STATE 13833 - mutant_243.pml:312 - [(1)] (13958:0:1 - 1)
		IfNotBlocked
		reached[1][13833] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13958, 13835, 13958) */
		reached[1][13835] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6047: // STATE 13837 - mutant_243.pml:423 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13837] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6048: // STATE 13838 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (13872:0:1 - 1)
		IfNotBlocked
		reached[1][13838] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13872, 13839, 13872) */
		reached[1][13839] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13872, 13840, 13872) */
		reached[1][13840] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6049: // STATE 13856 - mutant_243.pml:336 - [.(goto)] (0:13872:0 - 6)
		IfNotBlocked
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6050: // STATE 13841 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (13872:0:1 - 1)
		IfNotBlocked
		reached[1][13841] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13872, 13842, 13872) */
		reached[1][13842] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13872, 13843, 13872) */
		reached[1][13843] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6051: // STATE 13844 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13872:0:1 - 1)
		IfNotBlocked
		reached[1][13844] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13872, 13845, 13872) */
		reached[1][13845] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13872, 13846, 13872) */
		reached[1][13846] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6052: // STATE 13847 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13872:0:1 - 1)
		IfNotBlocked
		reached[1][13847] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13872, 13848, 13872) */
		reached[1][13848] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13872, 13849, 13872) */
		reached[1][13849] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6053: // STATE 13850 - mutant_243.pml:330 - [((PAUSE==ABORT))] (13872:0:1 - 1)
		IfNotBlocked
		reached[1][13850] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13872, 13851, 13872) */
		reached[1][13851] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13872, 13852, 13872) */
		reached[1][13852] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6054: // STATE 13854 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13872:0 - 1)
		IfNotBlocked
		reached[1][13854] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13872, 13856, 13872) */
		reached[1][13856] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6055: // STATE 13859 - mutant_243.pml:239 - [((_pid==0))] (13867:0:0 - 1)
		IfNotBlocked
		reached[1][13859] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13860, 13867) */
		reached[1][13860] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13866, 13867) */
		reached[1][13866] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6056: // STATE 13861 - mutant_243.pml:241 - [((_pid==1))] (13867:0:0 - 1)
		IfNotBlocked
		reached[1][13861] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13862, 13867) */
		reached[1][13862] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13866, 13867) */
		reached[1][13866] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6057: // STATE 13863 - mutant_243.pml:243 - [((_pid>1))] (13867:0:0 - 1)
		IfNotBlocked
		reached[1][13863] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13864, 13867) */
		reached[1][13864] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13866, 13867) */
		reached[1][13866] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6058: // STATE 13867 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13867] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6059: // STATE 13868 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:13958:1 - 1)
		IfNotBlocked
		reached[1][13868] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13958, 13873, 13958) */
		reached[1][13873] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6060: // STATE 13871 - mutant_243.pml:341 - [(1)] (13958:0:1 - 1)
		IfNotBlocked
		reached[1][13871] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13958, 13873, 13958) */
		reached[1][13873] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6061: // STATE 13875 - mutant_243.pml:425 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13875] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6062: // STATE 13876 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (13910:0:1 - 1)
		IfNotBlocked
		reached[1][13876] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13910, 13877, 13910) */
		reached[1][13877] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13910, 13878, 13910) */
		reached[1][13878] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6063: // STATE 13894 - mutant_243.pml:365 - [.(goto)] (0:13910:0 - 6)
		IfNotBlocked
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6064: // STATE 13879 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (13910:0:1 - 1)
		IfNotBlocked
		reached[1][13879] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13910, 13880, 13910) */
		reached[1][13880] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13910, 13881, 13910) */
		reached[1][13881] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6065: // STATE 13882 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13910:0:1 - 1)
		IfNotBlocked
		reached[1][13882] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13910, 13883, 13910) */
		reached[1][13883] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13910, 13884, 13910) */
		reached[1][13884] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6066: // STATE 13885 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13910:0:1 - 1)
		IfNotBlocked
		reached[1][13885] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13910, 13886, 13910) */
		reached[1][13886] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13910, 13887, 13910) */
		reached[1][13887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6067: // STATE 13888 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (13910:0:1 - 1)
		IfNotBlocked
		reached[1][13888] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13910, 13889, 13910) */
		reached[1][13889] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13910, 13890, 13910) */
		reached[1][13890] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6068: // STATE 13892 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13910:0 - 1)
		IfNotBlocked
		reached[1][13892] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13910, 13894, 13910) */
		reached[1][13894] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6069: // STATE 13897 - mutant_243.pml:251 - [((_pid==0))] (13905:0:0 - 1)
		IfNotBlocked
		reached[1][13897] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13898, 13905) */
		reached[1][13898] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13904, 13905) */
		reached[1][13904] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6070: // STATE 13899 - mutant_243.pml:253 - [((_pid==1))] (13905:0:0 - 1)
		IfNotBlocked
		reached[1][13899] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13900, 13905) */
		reached[1][13900] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13904, 13905) */
		reached[1][13904] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6071: // STATE 13901 - mutant_243.pml:255 - [((_pid>1))] (13905:0:0 - 1)
		IfNotBlocked
		reached[1][13901] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13902, 13905) */
		reached[1][13902] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13904, 13905) */
		reached[1][13904] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6072: // STATE 13905 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13905] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6073: // STATE 13906 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:13958:1 - 1)
		IfNotBlocked
		reached[1][13906] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13958, 13911, 13958) */
		reached[1][13911] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6074: // STATE 13909 - mutant_243.pml:370 - [(1)] (13958:0:1 - 1)
		IfNotBlocked
		reached[1][13909] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13958, 13911, 13958) */
		reached[1][13911] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6075: // STATE 13913 - mutant_243.pml:427 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13913] = 1;
		if (!(((8==12)||(8==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6076: // STATE 13914 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (13948:0:1 - 1)
		IfNotBlocked
		reached[1][13914] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(13948, 13915, 13948) */
		reached[1][13915] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(13948, 13916, 13948) */
		reached[1][13916] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6077: // STATE 13932 - mutant_243.pml:394 - [.(goto)] (0:13948:0 - 6)
		IfNotBlocked
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6078: // STATE 13917 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (13948:0:1 - 1)
		IfNotBlocked
		reached[1][13917] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(13948, 13918, 13948) */
		reached[1][13918] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(13948, 13919, 13948) */
		reached[1][13919] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6079: // STATE 13920 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (13948:0:1 - 1)
		IfNotBlocked
		reached[1][13920] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(13948, 13921, 13948) */
		reached[1][13921] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(13948, 13922, 13948) */
		reached[1][13922] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6080: // STATE 13923 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (13948:0:1 - 1)
		IfNotBlocked
		reached[1][13923] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(13948, 13924, 13948) */
		reached[1][13924] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(13948, 13925, 13948) */
		reached[1][13925] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6081: // STATE 13926 - mutant_243.pml:388 - [((STOP==ABORT))] (13948:0:1 - 1)
		IfNotBlocked
		reached[1][13926] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(13948, 13927, 13948) */
		reached[1][13927] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(13948, 13928, 13948) */
		reached[1][13928] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6082: // STATE 13930 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:13948:0 - 1)
		IfNotBlocked
		reached[1][13930] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(13948, 13932, 13948) */
		reached[1][13932] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6083: // STATE 13935 - mutant_243.pml:263 - [((_pid==0))] (13943:0:0 - 1)
		IfNotBlocked
		reached[1][13935] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 13936, 13943) */
		reached[1][13936] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13942, 13943) */
		reached[1][13942] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6084: // STATE 13937 - mutant_243.pml:265 - [((_pid==1))] (13943:0:0 - 1)
		IfNotBlocked
		reached[1][13937] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 13938, 13943) */
		reached[1][13938] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13942, 13943) */
		reached[1][13942] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6085: // STATE 13939 - mutant_243.pml:267 - [((_pid>1))] (13943:0:0 - 1)
		IfNotBlocked
		reached[1][13939] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 13940, 13943) */
		reached[1][13940] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13942, 13943) */
		reached[1][13942] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6086: // STATE 13943 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13943] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6087: // STATE 13944 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:13958:1 - 1)
		IfNotBlocked
		reached[1][13944] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(13958, 13949, 13958) */
		reached[1][13949] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6088: // STATE 13947 - mutant_243.pml:399 - [(1)] (13958:0:1 - 1)
		IfNotBlocked
		reached[1][13947] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(13958, 13949, 13958) */
		reached[1][13949] = 1;
		;
		/* merge: .(goto)(13958, 13952, 13958) */
		reached[1][13952] = 1;
		;
		/* merge: j = (j+1)(13958, 13954, 13958) */
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6089: // STATE 13954 - mutant_243.pml:435 - [j = (j+1)] (0:13958:1 - 13)
		IfNotBlocked
		reached[1][13954] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 13959, 13958) */
		reached[1][13959] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6090: // STATE 13956 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][13956] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6091: // STATE 13962 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13962] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6092: // STATE 13963 - mutant_243.pml:466 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13963] = 1;
		if (!((8==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6093: // STATE 13964 - mutant_243.pml:227 - [((_pid==0))] (13972:0:0 - 1)
		IfNotBlocked
		reached[1][13964] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 13965, 13972) */
		reached[1][13965] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13971, 13972) */
		reached[1][13971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6094: // STATE 13966 - mutant_243.pml:229 - [((_pid==1))] (13972:0:0 - 1)
		IfNotBlocked
		reached[1][13966] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 13967, 13972) */
		reached[1][13967] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13971, 13972) */
		reached[1][13971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6095: // STATE 13968 - mutant_243.pml:231 - [((_pid>1))] (13972:0:0 - 1)
		IfNotBlocked
		reached[1][13968] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 13969, 13972) */
		reached[1][13969] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13971, 13972) */
		reached[1][13971] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6096: // STATE 13972 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13972] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6097: // STATE 13973 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:14017:1 - 1)
		IfNotBlocked
		reached[1][13973] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14017, 14012, 14017) */
		reached[1][14012] = 1;
		;
		/* merge: j = (j+1)(14017, 14013, 14017) */
		reached[1][14013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14018, 14017) */
		reached[1][14018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6098: // STATE 13975 - mutant_243.pml:468 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13975] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6099: // STATE 13976 - mutant_243.pml:251 - [((_pid==0))] (13984:0:0 - 1)
		IfNotBlocked
		reached[1][13976] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13977, 13984) */
		reached[1][13977] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13983, 13984) */
		reached[1][13983] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6100: // STATE 13978 - mutant_243.pml:253 - [((_pid==1))] (13984:0:0 - 1)
		IfNotBlocked
		reached[1][13978] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 13979, 13984) */
		reached[1][13979] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13983, 13984) */
		reached[1][13983] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6101: // STATE 13980 - mutant_243.pml:255 - [((_pid>1))] (13984:0:0 - 1)
		IfNotBlocked
		reached[1][13980] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 13981, 13984) */
		reached[1][13981] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13983, 13984) */
		reached[1][13983] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6102: // STATE 13984 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13984] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6103: // STATE 13985 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:14017:1 - 1)
		IfNotBlocked
		reached[1][13985] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14017, 14012, 14017) */
		reached[1][14012] = 1;
		;
		/* merge: j = (j+1)(14017, 14013, 14017) */
		reached[1][14013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14018, 14017) */
		reached[1][14018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6104: // STATE 13987 - mutant_243.pml:470 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13987] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6105: // STATE 13988 - mutant_243.pml:239 - [((_pid==0))] (13996:0:0 - 1)
		IfNotBlocked
		reached[1][13988] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13989, 13996) */
		reached[1][13989] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13995, 13996) */
		reached[1][13995] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6106: // STATE 13990 - mutant_243.pml:241 - [((_pid==1))] (13996:0:0 - 1)
		IfNotBlocked
		reached[1][13990] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 13991, 13996) */
		reached[1][13991] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13995, 13996) */
		reached[1][13995] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6107: // STATE 13992 - mutant_243.pml:243 - [((_pid>1))] (13996:0:0 - 1)
		IfNotBlocked
		reached[1][13992] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 13993, 13996) */
		reached[1][13993] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 13995, 13996) */
		reached[1][13995] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6108: // STATE 13996 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][13996] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6109: // STATE 13997 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:14017:1 - 1)
		IfNotBlocked
		reached[1][13997] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14017, 14012, 14017) */
		reached[1][14012] = 1;
		;
		/* merge: j = (j+1)(14017, 14013, 14017) */
		reached[1][14013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14018, 14017) */
		reached[1][14018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6110: // STATE 13999 - mutant_243.pml:472 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][13999] = 1;
		if (!((8==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6111: // STATE 14000 - mutant_243.pml:263 - [((_pid==0))] (14008:0:0 - 1)
		IfNotBlocked
		reached[1][14000] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 14001, 14008) */
		reached[1][14001] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14007, 14008) */
		reached[1][14007] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6112: // STATE 14002 - mutant_243.pml:265 - [((_pid==1))] (14008:0:0 - 1)
		IfNotBlocked
		reached[1][14002] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 14003, 14008) */
		reached[1][14003] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14007, 14008) */
		reached[1][14007] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6113: // STATE 14004 - mutant_243.pml:267 - [((_pid>1))] (14008:0:0 - 1)
		IfNotBlocked
		reached[1][14004] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 14005, 14008) */
		reached[1][14005] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14007, 14008) */
		reached[1][14007] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6114: // STATE 14008 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14008] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6115: // STATE 14009 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:14017:1 - 1)
		IfNotBlocked
		reached[1][14009] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14017, 14012, 14017) */
		reached[1][14012] = 1;
		;
		/* merge: j = (j+1)(14017, 14013, 14017) */
		reached[1][14013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14018, 14017) */
		reached[1][14018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6116: // STATE 14013 - mutant_243.pml:475 - [j = (j+1)] (0:14017:1 - 5)
		IfNotBlocked
		reached[1][14013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14018, 14017) */
		reached[1][14018] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6117: // STATE 14015 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][14015] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 6118: // STATE 14026 - mutant_243.pml:556 - [(((11==ABORTING)||(11==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14026] = 1;
		if (!(((11==10)||(11==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6119: // STATE 14027 - mutant_243.pml:483 - [(((12==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14027] = 1;
		if (!(((12==6)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6120: // STATE 14028 - mutant_243.pml:484 - [printf('Supervisor doesn't propagate the first CONTINUE command.\\n')] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14028] = 1;
		Printf("Supervisor doesn't propagate the first CONTINUE command.\n");
		_m = 3; goto P999; /* 0 */
	case 6121: // STATE 14029 - mutant_243.pml:485 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][14029] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6122: // STATE 14031 - mutant_243.pml:488 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14031] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6123: // STATE 14032 - mutant_243.pml:454 - [(((12==START)||(12==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14032] = 1;
		if (!(((12==5)||(12==4))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6124: // STATE 14033 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14033] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6125: // STATE 14034 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14034] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6126: // STATE 14035 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (14055:0:1 - 1)
		IfNotBlocked
		reached[1][14035] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14055, 14036, 14055) */
		reached[1][14036] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14055, 14037, 14055) */
		reached[1][14037] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6127: // STATE 14053 - mutant_243.pml:306 - [.(goto)] (0:14055:0 - 6)
		IfNotBlocked
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6128: // STATE 14038 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (14055:0:1 - 1)
		IfNotBlocked
		reached[1][14038] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14055, 14039, 14055) */
		reached[1][14039] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14055, 14040, 14055) */
		reached[1][14040] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6129: // STATE 14041 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14055:0:1 - 1)
		IfNotBlocked
		reached[1][14041] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14055, 14042, 14055) */
		reached[1][14042] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14055, 14043, 14055) */
		reached[1][14043] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6130: // STATE 14044 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14055:0:1 - 1)
		IfNotBlocked
		reached[1][14044] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14055, 14045, 14055) */
		reached[1][14045] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14055, 14046, 14055) */
		reached[1][14046] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6131: // STATE 14047 - mutant_243.pml:300 - [((START==ABORT))] (14055:0:1 - 1)
		IfNotBlocked
		reached[1][14047] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14055, 14048, 14055) */
		reached[1][14048] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14055, 14049, 14055) */
		reached[1][14049] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6132: // STATE 14051 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14055:0 - 1)
		IfNotBlocked
		reached[1][14051] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14055, 14053, 14055) */
		reached[1][14053] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6133: // STATE 14055 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14055] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6134: // STATE 14057 - mutant_243.pml:227 - [((_pid==0))] (14065:0:0 - 1)
		IfNotBlocked
		reached[1][14057] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 14058, 14065) */
		reached[1][14058] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14064, 14065) */
		reached[1][14064] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6135: // STATE 14059 - mutant_243.pml:229 - [((_pid==1))] (14065:0:0 - 1)
		IfNotBlocked
		reached[1][14059] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 14060, 14065) */
		reached[1][14060] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14064, 14065) */
		reached[1][14064] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6136: // STATE 14061 - mutant_243.pml:231 - [((_pid>1))] (14065:0:0 - 1)
		IfNotBlocked
		reached[1][14061] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 14062, 14065) */
		reached[1][14062] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14064, 14065) */
		reached[1][14064] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6137: // STATE 14065 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14065] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6138: // STATE 14066 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:14194:1 - 1)
		IfNotBlocked
		reached[1][14066] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14194, 14071, 14194) */
		reached[1][14071] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6139: // STATE 14069 - mutant_243.pml:312 - [(1)] (14194:0:1 - 1)
		IfNotBlocked
		reached[1][14069] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14194, 14071, 14194) */
		reached[1][14071] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6140: // STATE 14073 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14073] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6141: // STATE 14074 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (14108:0:1 - 1)
		IfNotBlocked
		reached[1][14074] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14108, 14075, 14108) */
		reached[1][14075] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14108, 14076, 14108) */
		reached[1][14076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6142: // STATE 14092 - mutant_243.pml:336 - [.(goto)] (0:14108:0 - 6)
		IfNotBlocked
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6143: // STATE 14077 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (14108:0:1 - 1)
		IfNotBlocked
		reached[1][14077] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14108, 14078, 14108) */
		reached[1][14078] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14108, 14079, 14108) */
		reached[1][14079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6144: // STATE 14080 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14108:0:1 - 1)
		IfNotBlocked
		reached[1][14080] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14108, 14081, 14108) */
		reached[1][14081] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14108, 14082, 14108) */
		reached[1][14082] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6145: // STATE 14083 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14108:0:1 - 1)
		IfNotBlocked
		reached[1][14083] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14108, 14084, 14108) */
		reached[1][14084] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14108, 14085, 14108) */
		reached[1][14085] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6146: // STATE 14086 - mutant_243.pml:330 - [((PAUSE==ABORT))] (14108:0:1 - 1)
		IfNotBlocked
		reached[1][14086] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14108, 14087, 14108) */
		reached[1][14087] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14108, 14088, 14108) */
		reached[1][14088] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6147: // STATE 14090 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14108:0 - 1)
		IfNotBlocked
		reached[1][14090] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14108, 14092, 14108) */
		reached[1][14092] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6148: // STATE 14095 - mutant_243.pml:239 - [((_pid==0))] (14103:0:0 - 1)
		IfNotBlocked
		reached[1][14095] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14096, 14103) */
		reached[1][14096] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14102, 14103) */
		reached[1][14102] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6149: // STATE 14097 - mutant_243.pml:241 - [((_pid==1))] (14103:0:0 - 1)
		IfNotBlocked
		reached[1][14097] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14098, 14103) */
		reached[1][14098] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14102, 14103) */
		reached[1][14102] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6150: // STATE 14099 - mutant_243.pml:243 - [((_pid>1))] (14103:0:0 - 1)
		IfNotBlocked
		reached[1][14099] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 14100, 14103) */
		reached[1][14100] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14102, 14103) */
		reached[1][14102] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6151: // STATE 14103 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14103] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6152: // STATE 14104 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:14194:1 - 1)
		IfNotBlocked
		reached[1][14104] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14194, 14109, 14194) */
		reached[1][14109] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6153: // STATE 14107 - mutant_243.pml:341 - [(1)] (14194:0:1 - 1)
		IfNotBlocked
		reached[1][14107] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14194, 14109, 14194) */
		reached[1][14109] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6154: // STATE 14111 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14111] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6155: // STATE 14112 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (14146:0:1 - 1)
		IfNotBlocked
		reached[1][14112] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14146, 14113, 14146) */
		reached[1][14113] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14146, 14114, 14146) */
		reached[1][14114] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6156: // STATE 14130 - mutant_243.pml:365 - [.(goto)] (0:14146:0 - 6)
		IfNotBlocked
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6157: // STATE 14115 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (14146:0:1 - 1)
		IfNotBlocked
		reached[1][14115] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14146, 14116, 14146) */
		reached[1][14116] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14146, 14117, 14146) */
		reached[1][14117] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6158: // STATE 14118 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14146:0:1 - 1)
		IfNotBlocked
		reached[1][14118] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14146, 14119, 14146) */
		reached[1][14119] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14146, 14120, 14146) */
		reached[1][14120] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6159: // STATE 14121 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14146:0:1 - 1)
		IfNotBlocked
		reached[1][14121] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14146, 14122, 14146) */
		reached[1][14122] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14146, 14123, 14146) */
		reached[1][14123] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6160: // STATE 14124 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (14146:0:1 - 1)
		IfNotBlocked
		reached[1][14124] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14146, 14125, 14146) */
		reached[1][14125] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14146, 14126, 14146) */
		reached[1][14126] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6161: // STATE 14128 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14146:0 - 1)
		IfNotBlocked
		reached[1][14128] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14146, 14130, 14146) */
		reached[1][14130] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6162: // STATE 14133 - mutant_243.pml:251 - [((_pid==0))] (14141:0:0 - 1)
		IfNotBlocked
		reached[1][14133] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14134, 14141) */
		reached[1][14134] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14140, 14141) */
		reached[1][14140] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6163: // STATE 14135 - mutant_243.pml:253 - [((_pid==1))] (14141:0:0 - 1)
		IfNotBlocked
		reached[1][14135] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14136, 14141) */
		reached[1][14136] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14140, 14141) */
		reached[1][14140] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6164: // STATE 14137 - mutant_243.pml:255 - [((_pid>1))] (14141:0:0 - 1)
		IfNotBlocked
		reached[1][14137] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 14138, 14141) */
		reached[1][14138] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14140, 14141) */
		reached[1][14140] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6165: // STATE 14141 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14141] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6166: // STATE 14142 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:14194:1 - 1)
		IfNotBlocked
		reached[1][14142] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14194, 14147, 14194) */
		reached[1][14147] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6167: // STATE 14145 - mutant_243.pml:370 - [(1)] (14194:0:1 - 1)
		IfNotBlocked
		reached[1][14145] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14194, 14147, 14194) */
		reached[1][14147] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6168: // STATE 14149 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14149] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6169: // STATE 14150 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (14184:0:1 - 1)
		IfNotBlocked
		reached[1][14150] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14184, 14151, 14184) */
		reached[1][14151] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14184, 14152, 14184) */
		reached[1][14152] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6170: // STATE 14168 - mutant_243.pml:394 - [.(goto)] (0:14184:0 - 6)
		IfNotBlocked
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6171: // STATE 14153 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (14184:0:1 - 1)
		IfNotBlocked
		reached[1][14153] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14184, 14154, 14184) */
		reached[1][14154] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14184, 14155, 14184) */
		reached[1][14155] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6172: // STATE 14156 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14184:0:1 - 1)
		IfNotBlocked
		reached[1][14156] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14184, 14157, 14184) */
		reached[1][14157] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14184, 14158, 14184) */
		reached[1][14158] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6173: // STATE 14159 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14184:0:1 - 1)
		IfNotBlocked
		reached[1][14159] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14184, 14160, 14184) */
		reached[1][14160] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14184, 14161, 14184) */
		reached[1][14161] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6174: // STATE 14162 - mutant_243.pml:388 - [((STOP==ABORT))] (14184:0:1 - 1)
		IfNotBlocked
		reached[1][14162] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14184, 14163, 14184) */
		reached[1][14163] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14184, 14164, 14184) */
		reached[1][14164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6175: // STATE 14166 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14184:0 - 1)
		IfNotBlocked
		reached[1][14166] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14184, 14168, 14184) */
		reached[1][14168] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6176: // STATE 14171 - mutant_243.pml:263 - [((_pid==0))] (14179:0:0 - 1)
		IfNotBlocked
		reached[1][14171] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 14172, 14179) */
		reached[1][14172] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14178, 14179) */
		reached[1][14178] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6177: // STATE 14173 - mutant_243.pml:265 - [((_pid==1))] (14179:0:0 - 1)
		IfNotBlocked
		reached[1][14173] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 14174, 14179) */
		reached[1][14174] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14178, 14179) */
		reached[1][14178] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6178: // STATE 14175 - mutant_243.pml:267 - [((_pid>1))] (14179:0:0 - 1)
		IfNotBlocked
		reached[1][14175] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 14176, 14179) */
		reached[1][14176] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14178, 14179) */
		reached[1][14178] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6179: // STATE 14179 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14179] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6180: // STATE 14180 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:14194:1 - 1)
		IfNotBlocked
		reached[1][14180] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14194, 14185, 14194) */
		reached[1][14185] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6181: // STATE 14183 - mutant_243.pml:399 - [(1)] (14194:0:1 - 1)
		IfNotBlocked
		reached[1][14183] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14194, 14185, 14194) */
		reached[1][14185] = 1;
		;
		/* merge: .(goto)(14194, 14188, 14194) */
		reached[1][14188] = 1;
		;
		/* merge: j = (j+1)(14194, 14190, 14194) */
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6182: // STATE 14190 - mutant_243.pml:435 - [j = (j+1)] (0:14194:1 - 13)
		IfNotBlocked
		reached[1][14190] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14195, 14194) */
		reached[1][14195] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6183: // STATE 14192 - mutant_243.pml:437 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][14192] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 6184: // STATE 14199 - mutant_243.pml:442 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][14199] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6185: // STATE 14200 - mutant_243.pml:444 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14200] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6186: // STATE 14201 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14201] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6187: // STATE 14202 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (14222:0:1 - 1)
		IfNotBlocked
		reached[1][14202] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14222, 14203, 14222) */
		reached[1][14203] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14222, 14204, 14222) */
		reached[1][14204] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6188: // STATE 14220 - mutant_243.pml:306 - [.(goto)] (0:14222:0 - 6)
		IfNotBlocked
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6189: // STATE 14205 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (14222:0:1 - 1)
		IfNotBlocked
		reached[1][14205] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14222, 14206, 14222) */
		reached[1][14206] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14222, 14207, 14222) */
		reached[1][14207] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6190: // STATE 14208 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14222:0:1 - 1)
		IfNotBlocked
		reached[1][14208] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14222, 14209, 14222) */
		reached[1][14209] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14222, 14210, 14222) */
		reached[1][14210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6191: // STATE 14211 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14222:0:1 - 1)
		IfNotBlocked
		reached[1][14211] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14222, 14212, 14222) */
		reached[1][14212] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14222, 14213, 14222) */
		reached[1][14213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6192: // STATE 14214 - mutant_243.pml:300 - [((START==ABORT))] (14222:0:1 - 1)
		IfNotBlocked
		reached[1][14214] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14222, 14215, 14222) */
		reached[1][14215] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14222, 14216, 14222) */
		reached[1][14216] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6193: // STATE 14218 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14222:0 - 1)
		IfNotBlocked
		reached[1][14218] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14222, 14220, 14222) */
		reached[1][14220] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6194: // STATE 14222 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14222] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6195: // STATE 14224 - mutant_243.pml:227 - [((_pid==0))] (14232:0:0 - 1)
		IfNotBlocked
		reached[1][14224] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 14225, 14232) */
		reached[1][14225] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14231, 14232) */
		reached[1][14231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6196: // STATE 14226 - mutant_243.pml:229 - [((_pid==1))] (14232:0:0 - 1)
		IfNotBlocked
		reached[1][14226] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 14227, 14232) */
		reached[1][14227] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14231, 14232) */
		reached[1][14231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6197: // STATE 14228 - mutant_243.pml:231 - [((_pid>1))] (14232:0:0 - 1)
		IfNotBlocked
		reached[1][14228] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 14229, 14232) */
		reached[1][14229] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14231, 14232) */
		reached[1][14231] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6198: // STATE 14232 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14232] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6199: // STATE 14233 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:14361:1 - 1)
		IfNotBlocked
		reached[1][14233] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14361, 14238, 14361) */
		reached[1][14238] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6200: // STATE 14236 - mutant_243.pml:312 - [(1)] (14361:0:1 - 1)
		IfNotBlocked
		reached[1][14236] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14361, 14238, 14361) */
		reached[1][14238] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6201: // STATE 14240 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14240] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6202: // STATE 14241 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (14275:0:1 - 1)
		IfNotBlocked
		reached[1][14241] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14275, 14242, 14275) */
		reached[1][14242] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14275, 14243, 14275) */
		reached[1][14243] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6203: // STATE 14259 - mutant_243.pml:336 - [.(goto)] (0:14275:0 - 6)
		IfNotBlocked
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6204: // STATE 14244 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (14275:0:1 - 1)
		IfNotBlocked
		reached[1][14244] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14275, 14245, 14275) */
		reached[1][14245] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14275, 14246, 14275) */
		reached[1][14246] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6205: // STATE 14247 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14275:0:1 - 1)
		IfNotBlocked
		reached[1][14247] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14275, 14248, 14275) */
		reached[1][14248] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14275, 14249, 14275) */
		reached[1][14249] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6206: // STATE 14250 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14275:0:1 - 1)
		IfNotBlocked
		reached[1][14250] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14275, 14251, 14275) */
		reached[1][14251] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14275, 14252, 14275) */
		reached[1][14252] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6207: // STATE 14253 - mutant_243.pml:330 - [((PAUSE==ABORT))] (14275:0:1 - 1)
		IfNotBlocked
		reached[1][14253] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14275, 14254, 14275) */
		reached[1][14254] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14275, 14255, 14275) */
		reached[1][14255] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6208: // STATE 14257 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14275:0 - 1)
		IfNotBlocked
		reached[1][14257] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14275, 14259, 14275) */
		reached[1][14259] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6209: // STATE 14262 - mutant_243.pml:239 - [((_pid==0))] (14270:0:0 - 1)
		IfNotBlocked
		reached[1][14262] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14263, 14270) */
		reached[1][14263] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14269, 14270) */
		reached[1][14269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6210: // STATE 14264 - mutant_243.pml:241 - [((_pid==1))] (14270:0:0 - 1)
		IfNotBlocked
		reached[1][14264] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14265, 14270) */
		reached[1][14265] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14269, 14270) */
		reached[1][14269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6211: // STATE 14266 - mutant_243.pml:243 - [((_pid>1))] (14270:0:0 - 1)
		IfNotBlocked
		reached[1][14266] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 14267, 14270) */
		reached[1][14267] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14269, 14270) */
		reached[1][14269] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6212: // STATE 14270 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14270] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6213: // STATE 14271 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:14361:1 - 1)
		IfNotBlocked
		reached[1][14271] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14361, 14276, 14361) */
		reached[1][14276] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6214: // STATE 14274 - mutant_243.pml:341 - [(1)] (14361:0:1 - 1)
		IfNotBlocked
		reached[1][14274] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14361, 14276, 14361) */
		reached[1][14276] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6215: // STATE 14278 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14278] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6216: // STATE 14279 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (14313:0:1 - 1)
		IfNotBlocked
		reached[1][14279] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14313, 14280, 14313) */
		reached[1][14280] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14313, 14281, 14313) */
		reached[1][14281] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6217: // STATE 14297 - mutant_243.pml:365 - [.(goto)] (0:14313:0 - 6)
		IfNotBlocked
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6218: // STATE 14282 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (14313:0:1 - 1)
		IfNotBlocked
		reached[1][14282] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14313, 14283, 14313) */
		reached[1][14283] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14313, 14284, 14313) */
		reached[1][14284] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6219: // STATE 14285 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14313:0:1 - 1)
		IfNotBlocked
		reached[1][14285] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14313, 14286, 14313) */
		reached[1][14286] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14313, 14287, 14313) */
		reached[1][14287] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6220: // STATE 14288 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14313:0:1 - 1)
		IfNotBlocked
		reached[1][14288] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14313, 14289, 14313) */
		reached[1][14289] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14313, 14290, 14313) */
		reached[1][14290] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6221: // STATE 14291 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (14313:0:1 - 1)
		IfNotBlocked
		reached[1][14291] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14313, 14292, 14313) */
		reached[1][14292] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14313, 14293, 14313) */
		reached[1][14293] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6222: // STATE 14295 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14313:0 - 1)
		IfNotBlocked
		reached[1][14295] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14313, 14297, 14313) */
		reached[1][14297] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6223: // STATE 14300 - mutant_243.pml:251 - [((_pid==0))] (14308:0:0 - 1)
		IfNotBlocked
		reached[1][14300] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14301, 14308) */
		reached[1][14301] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14307, 14308) */
		reached[1][14307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6224: // STATE 14302 - mutant_243.pml:253 - [((_pid==1))] (14308:0:0 - 1)
		IfNotBlocked
		reached[1][14302] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14303, 14308) */
		reached[1][14303] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14307, 14308) */
		reached[1][14307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6225: // STATE 14304 - mutant_243.pml:255 - [((_pid>1))] (14308:0:0 - 1)
		IfNotBlocked
		reached[1][14304] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 14305, 14308) */
		reached[1][14305] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14307, 14308) */
		reached[1][14307] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6226: // STATE 14308 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14308] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6227: // STATE 14309 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:14361:1 - 1)
		IfNotBlocked
		reached[1][14309] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14361, 14314, 14361) */
		reached[1][14314] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6228: // STATE 14312 - mutant_243.pml:370 - [(1)] (14361:0:1 - 1)
		IfNotBlocked
		reached[1][14312] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14361, 14314, 14361) */
		reached[1][14314] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6229: // STATE 14316 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14316] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6230: // STATE 14317 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (14351:0:1 - 1)
		IfNotBlocked
		reached[1][14317] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14351, 14318, 14351) */
		reached[1][14318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14351, 14319, 14351) */
		reached[1][14319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6231: // STATE 14335 - mutant_243.pml:394 - [.(goto)] (0:14351:0 - 6)
		IfNotBlocked
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6232: // STATE 14320 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (14351:0:1 - 1)
		IfNotBlocked
		reached[1][14320] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14351, 14321, 14351) */
		reached[1][14321] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14351, 14322, 14351) */
		reached[1][14322] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6233: // STATE 14323 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14351:0:1 - 1)
		IfNotBlocked
		reached[1][14323] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14351, 14324, 14351) */
		reached[1][14324] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14351, 14325, 14351) */
		reached[1][14325] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6234: // STATE 14326 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14351:0:1 - 1)
		IfNotBlocked
		reached[1][14326] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14351, 14327, 14351) */
		reached[1][14327] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14351, 14328, 14351) */
		reached[1][14328] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6235: // STATE 14329 - mutant_243.pml:388 - [((STOP==ABORT))] (14351:0:1 - 1)
		IfNotBlocked
		reached[1][14329] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14351, 14330, 14351) */
		reached[1][14330] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14351, 14331, 14351) */
		reached[1][14331] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6236: // STATE 14333 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14351:0 - 1)
		IfNotBlocked
		reached[1][14333] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14351, 14335, 14351) */
		reached[1][14335] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6237: // STATE 14338 - mutant_243.pml:263 - [((_pid==0))] (14346:0:0 - 1)
		IfNotBlocked
		reached[1][14338] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 14339, 14346) */
		reached[1][14339] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14345, 14346) */
		reached[1][14345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6238: // STATE 14340 - mutant_243.pml:265 - [((_pid==1))] (14346:0:0 - 1)
		IfNotBlocked
		reached[1][14340] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 14341, 14346) */
		reached[1][14341] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14345, 14346) */
		reached[1][14345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6239: // STATE 14342 - mutant_243.pml:267 - [((_pid>1))] (14346:0:0 - 1)
		IfNotBlocked
		reached[1][14342] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 14343, 14346) */
		reached[1][14343] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14345, 14346) */
		reached[1][14345] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6240: // STATE 14346 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14346] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6241: // STATE 14347 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:14361:1 - 1)
		IfNotBlocked
		reached[1][14347] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14361, 14352, 14361) */
		reached[1][14352] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6242: // STATE 14350 - mutant_243.pml:399 - [(1)] (14361:0:1 - 1)
		IfNotBlocked
		reached[1][14350] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14361, 14352, 14361) */
		reached[1][14352] = 1;
		;
		/* merge: .(goto)(14361, 14355, 14361) */
		reached[1][14355] = 1;
		;
		/* merge: j = (j-1)(14361, 14357, 14361) */
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6243: // STATE 14357 - mutant_243.pml:446 - [j = (j-1)] (0:14361:1 - 13)
		IfNotBlocked
		reached[1][14357] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14362, 14361) */
		reached[1][14362] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6244: // STATE 14359 - mutant_243.pml:448 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][14359] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 6245: // STATE 14369 - mutant_243.pml:461 - [printf('Supervisor propagating command %e...\\n',12)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14369] = 1;
		Printf("Supervisor propagating command %e...\n", 12);
		_m = 3; goto P999; /* 0 */
	case 6246: // STATE 14370 - mutant_243.pml:433 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14370] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6247: // STATE 14371 - mutant_243.pml:421 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14371] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6248: // STATE 14372 - mutant_243.pml:288 - [(((START==START)&&(commands[j]==CONTINUE)))] (14392:0:1 - 1)
		IfNotBlocked
		reached[1][14372] = 1;
		if (!(((5==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14392, 14373, 14392) */
		reached[1][14373] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14392, 14374, 14392) */
		reached[1][14374] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6249: // STATE 14390 - mutant_243.pml:306 - [.(goto)] (0:14392:0 - 6)
		IfNotBlocked
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6250: // STATE 14375 - mutant_243.pml:291 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (14392:0:1 - 1)
		IfNotBlocked
		reached[1][14375] = 1;
		if (!(((5==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14392, 14376, 14392) */
		reached[1][14376] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14392, 14377, 14392) */
		reached[1][14377] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6251: // STATE 14378 - mutant_243.pml:294 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14392:0:1 - 1)
		IfNotBlocked
		reached[1][14378] = 1;
		if (!(((5==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14392, 14379, 14392) */
		reached[1][14379] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14392, 14380, 14392) */
		reached[1][14380] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6252: // STATE 14381 - mutant_243.pml:297 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14392:0:1 - 1)
		IfNotBlocked
		reached[1][14381] = 1;
		if (!(((5==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14392, 14382, 14392) */
		reached[1][14382] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14392, 14383, 14392) */
		reached[1][14383] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6253: // STATE 14384 - mutant_243.pml:300 - [((START==ABORT))] (14392:0:1 - 1)
		IfNotBlocked
		reached[1][14384] = 1;
		if (!((5==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14392, 14385, 14392) */
		reached[1][14385] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14392, 14386, 14392) */
		reached[1][14386] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6254: // STATE 14388 - mutant_243.pml:304 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14392:0 - 1)
		IfNotBlocked
		reached[1][14388] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14392, 14390, 14392) */
		reached[1][14390] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6255: // STATE 14392 - mutant_243.pml:307 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14392] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6256: // STATE 14394 - mutant_243.pml:227 - [((_pid==0))] (14402:0:0 - 1)
		IfNotBlocked
		reached[1][14394] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 14395, 14402) */
		reached[1][14395] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14401, 14402) */
		reached[1][14401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6257: // STATE 14396 - mutant_243.pml:229 - [((_pid==1))] (14402:0:0 - 1)
		IfNotBlocked
		reached[1][14396] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 14397, 14402) */
		reached[1][14397] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14401, 14402) */
		reached[1][14401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6258: // STATE 14398 - mutant_243.pml:231 - [((_pid>1))] (14402:0:0 - 1)
		IfNotBlocked
		reached[1][14398] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 14399, 14402) */
		reached[1][14399] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14401, 14402) */
		reached[1][14401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6259: // STATE 14402 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14402] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6260: // STATE 14403 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:14531:1 - 1)
		IfNotBlocked
		reached[1][14403] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14531, 14408, 14531) */
		reached[1][14408] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6261: // STATE 14406 - mutant_243.pml:312 - [(1)] (14531:0:1 - 1)
		IfNotBlocked
		reached[1][14406] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14531, 14408, 14531) */
		reached[1][14408] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6262: // STATE 14410 - mutant_243.pml:423 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14410] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6263: // STATE 14411 - mutant_243.pml:318 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (14445:0:1 - 1)
		IfNotBlocked
		reached[1][14411] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14445, 14412, 14445) */
		reached[1][14412] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14445, 14413, 14445) */
		reached[1][14413] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6264: // STATE 14429 - mutant_243.pml:336 - [.(goto)] (0:14445:0 - 6)
		IfNotBlocked
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6265: // STATE 14414 - mutant_243.pml:321 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (14445:0:1 - 1)
		IfNotBlocked
		reached[1][14414] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14445, 14415, 14445) */
		reached[1][14415] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14445, 14416, 14445) */
		reached[1][14416] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6266: // STATE 14417 - mutant_243.pml:324 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14445:0:1 - 1)
		IfNotBlocked
		reached[1][14417] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14445, 14418, 14445) */
		reached[1][14418] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14445, 14419, 14445) */
		reached[1][14419] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6267: // STATE 14420 - mutant_243.pml:327 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14445:0:1 - 1)
		IfNotBlocked
		reached[1][14420] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14445, 14421, 14445) */
		reached[1][14421] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14445, 14422, 14445) */
		reached[1][14422] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6268: // STATE 14423 - mutant_243.pml:330 - [((PAUSE==ABORT))] (14445:0:1 - 1)
		IfNotBlocked
		reached[1][14423] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14445, 14424, 14445) */
		reached[1][14424] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14445, 14425, 14445) */
		reached[1][14425] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6269: // STATE 14427 - mutant_243.pml:334 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14445:0 - 1)
		IfNotBlocked
		reached[1][14427] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14445, 14429, 14445) */
		reached[1][14429] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6270: // STATE 14432 - mutant_243.pml:239 - [((_pid==0))] (14440:0:0 - 1)
		IfNotBlocked
		reached[1][14432] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14433, 14440) */
		reached[1][14433] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14439, 14440) */
		reached[1][14439] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6271: // STATE 14434 - mutant_243.pml:241 - [((_pid==1))] (14440:0:0 - 1)
		IfNotBlocked
		reached[1][14434] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14435, 14440) */
		reached[1][14435] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14439, 14440) */
		reached[1][14439] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6272: // STATE 14436 - mutant_243.pml:243 - [((_pid>1))] (14440:0:0 - 1)
		IfNotBlocked
		reached[1][14436] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 14437, 14440) */
		reached[1][14437] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14439, 14440) */
		reached[1][14439] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6273: // STATE 14440 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14440] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6274: // STATE 14441 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:14531:1 - 1)
		IfNotBlocked
		reached[1][14441] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14531, 14446, 14531) */
		reached[1][14446] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6275: // STATE 14444 - mutant_243.pml:341 - [(1)] (14531:0:1 - 1)
		IfNotBlocked
		reached[1][14444] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14531, 14446, 14531) */
		reached[1][14446] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6276: // STATE 14448 - mutant_243.pml:425 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14448] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6277: // STATE 14449 - mutant_243.pml:347 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (14483:0:1 - 1)
		IfNotBlocked
		reached[1][14449] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14483, 14450, 14483) */
		reached[1][14450] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14483, 14451, 14483) */
		reached[1][14451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6278: // STATE 14467 - mutant_243.pml:365 - [.(goto)] (0:14483:0 - 6)
		IfNotBlocked
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6279: // STATE 14452 - mutant_243.pml:350 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (14483:0:1 - 1)
		IfNotBlocked
		reached[1][14452] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14483, 14453, 14483) */
		reached[1][14453] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14483, 14454, 14483) */
		reached[1][14454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6280: // STATE 14455 - mutant_243.pml:353 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14483:0:1 - 1)
		IfNotBlocked
		reached[1][14455] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14483, 14456, 14483) */
		reached[1][14456] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14483, 14457, 14483) */
		reached[1][14457] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6281: // STATE 14458 - mutant_243.pml:356 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14483:0:1 - 1)
		IfNotBlocked
		reached[1][14458] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14483, 14459, 14483) */
		reached[1][14459] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14483, 14460, 14483) */
		reached[1][14460] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6282: // STATE 14461 - mutant_243.pml:359 - [((CONTINUE==ABORT))] (14483:0:1 - 1)
		IfNotBlocked
		reached[1][14461] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14483, 14462, 14483) */
		reached[1][14462] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14483, 14463, 14483) */
		reached[1][14463] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6283: // STATE 14465 - mutant_243.pml:363 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14483:0 - 1)
		IfNotBlocked
		reached[1][14465] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14483, 14467, 14483) */
		reached[1][14467] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6284: // STATE 14470 - mutant_243.pml:251 - [((_pid==0))] (14478:0:0 - 1)
		IfNotBlocked
		reached[1][14470] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14471, 14478) */
		reached[1][14471] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14477, 14478) */
		reached[1][14477] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6285: // STATE 14472 - mutant_243.pml:253 - [((_pid==1))] (14478:0:0 - 1)
		IfNotBlocked
		reached[1][14472] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14473, 14478) */
		reached[1][14473] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14477, 14478) */
		reached[1][14477] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6286: // STATE 14474 - mutant_243.pml:255 - [((_pid>1))] (14478:0:0 - 1)
		IfNotBlocked
		reached[1][14474] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 14475, 14478) */
		reached[1][14475] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14477, 14478) */
		reached[1][14477] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6287: // STATE 14478 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14478] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6288: // STATE 14479 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:14531:1 - 1)
		IfNotBlocked
		reached[1][14479] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14531, 14484, 14531) */
		reached[1][14484] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6289: // STATE 14482 - mutant_243.pml:370 - [(1)] (14531:0:1 - 1)
		IfNotBlocked
		reached[1][14482] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14531, 14484, 14531) */
		reached[1][14484] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6290: // STATE 14486 - mutant_243.pml:427 - [(((12==STOP)||(12==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14486] = 1;
		if (!(((12==12)||(12==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6291: // STATE 14487 - mutant_243.pml:376 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (14521:0:1 - 1)
		IfNotBlocked
		reached[1][14487] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert((states[j]==READY))(14521, 14488, 14521) */
		reached[1][14488] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==1), "(states[j]==1)", II, tt, t);
		/* merge: commands[j] = START(14521, 14489, 14521) */
		reached[1][14489] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6292: // STATE 14505 - mutant_243.pml:394 - [.(goto)] (0:14521:0 - 6)
		IfNotBlocked
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6293: // STATE 14490 - mutant_243.pml:379 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (14521:0:1 - 1)
		IfNotBlocked
		reached[1][14490] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(14521, 14491, 14521) */
		reached[1][14491] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)), "((states[j]==2)||(states[j]==3))", II, tt, t);
		/* merge: commands[j] = PAUSE(14521, 14492, 14521) */
		reached[1][14492] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6294: // STATE 14493 - mutant_243.pml:382 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (14521:0:1 - 1)
		IfNotBlocked
		reached[1][14493] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(14521, 14494, 14521) */
		reached[1][14494] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "((states[j]==2)||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = CONTINUE(14521, 14495, 14521) */
		reached[1][14495] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6295: // STATE 14496 - mutant_243.pml:385 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (14521:0:1 - 1)
		IfNotBlocked
		reached[1][14496] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(14521, 14497, 14521) */
		reached[1][14497] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==2)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)), "(((states[j]==2)||(states[j]==3))||(states[j]==4))", II, tt, t);
		/* merge: commands[j] = STOP(14521, 14498, 14521) */
		reached[1][14498] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6296: // STATE 14499 - mutant_243.pml:388 - [((STOP==ABORT))] (14521:0:1 - 1)
		IfNotBlocked
		reached[1][14499] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[j]!=READY))(14521, 14500, 14521) */
		reached[1][14500] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=1), "(states[j]!=1)", II, tt, t);
		/* merge: commands[j] = ABORT(14521, 14501, 14521) */
		reached[1][14501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6297: // STATE 14503 - mutant_243.pml:392 - [printf('Thread %d ignores command %e.\\n',j,commands[j])] (0:14521:0 - 1)
		IfNotBlocked
		reached[1][14503] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P1 *)_this)->j), now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
		/* merge: .(goto)(14521, 14505, 14521) */
		reached[1][14505] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6298: // STATE 14508 - mutant_243.pml:263 - [((_pid==0))] (14516:0:0 - 1)
		IfNotBlocked
		reached[1][14508] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 14509, 14516) */
		reached[1][14509] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14515, 14516) */
		reached[1][14515] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6299: // STATE 14510 - mutant_243.pml:265 - [((_pid==1))] (14516:0:0 - 1)
		IfNotBlocked
		reached[1][14510] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 14511, 14516) */
		reached[1][14511] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14515, 14516) */
		reached[1][14515] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6300: // STATE 14512 - mutant_243.pml:267 - [((_pid>1))] (14516:0:0 - 1)
		IfNotBlocked
		reached[1][14512] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 14513, 14516) */
		reached[1][14513] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14515, 14516) */
		reached[1][14515] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6301: // STATE 14516 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14516] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6302: // STATE 14517 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:14531:1 - 1)
		IfNotBlocked
		reached[1][14517] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14531, 14522, 14531) */
		reached[1][14522] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6303: // STATE 14520 - mutant_243.pml:399 - [(1)] (14531:0:1 - 1)
		IfNotBlocked
		reached[1][14520] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(14531, 14522, 14531) */
		reached[1][14522] = 1;
		;
		/* merge: .(goto)(14531, 14525, 14531) */
		reached[1][14525] = 1;
		;
		/* merge: j = (j+1)(14531, 14527, 14531) */
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6304: // STATE 14527 - mutant_243.pml:435 - [j = (j+1)] (0:14531:1 - 13)
		IfNotBlocked
		reached[1][14527] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14532, 14531) */
		reached[1][14532] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6305: // STATE 14529 - mutant_243.pml:437 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][14529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6306: // STATE 14535 - mutant_243.pml:464 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14535] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6307: // STATE 14536 - mutant_243.pml:466 - [((12==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14536] = 1;
		if (!((12==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6308: // STATE 14537 - mutant_243.pml:227 - [((_pid==0))] (14545:0:0 - 1)
		IfNotBlocked
		reached[1][14537] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for START mask on Thread %d...\\n',j)(0, 14538, 14545) */
		reached[1][14538] = 1;
		Printf("Init is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14544, 14545) */
		reached[1][14544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6309: // STATE 14539 - mutant_243.pml:229 - [((_pid==1))] (14545:0:0 - 1)
		IfNotBlocked
		reached[1][14539] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)(0, 14540, 14545) */
		reached[1][14540] = 1;
		Printf("Supervisor is waiiting for START mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14544, 14545) */
		reached[1][14544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6310: // STATE 14541 - mutant_243.pml:231 - [((_pid>1))] (14545:0:0 - 1)
		IfNotBlocked
		reached[1][14541] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)(0, 14542, 14545) */
		reached[1][14542] = 1;
		Printf("Worker %d is waiiting for START mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14544, 14545) */
		reached[1][14544] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6311: // STATE 14545 - mutant_243.pml:234 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14545] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6312: // STATE 14546 - mutant_243.pml:235 - [printf('waiiting ended.\\n')] (0:14590:1 - 1)
		IfNotBlocked
		reached[1][14546] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14590, 14585, 14590) */
		reached[1][14585] = 1;
		;
		/* merge: j = (j+1)(14590, 14586, 14590) */
		reached[1][14586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14591, 14590) */
		reached[1][14591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6313: // STATE 14548 - mutant_243.pml:468 - [((12==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14548] = 1;
		if (!((12==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6314: // STATE 14549 - mutant_243.pml:251 - [((_pid==0))] (14557:0:0 - 1)
		IfNotBlocked
		reached[1][14549] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14550, 14557) */
		reached[1][14550] = 1;
		Printf("Init is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14556, 14557) */
		reached[1][14556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6315: // STATE 14551 - mutant_243.pml:253 - [((_pid==1))] (14557:0:0 - 1)
		IfNotBlocked
		reached[1][14551] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)(0, 14552, 14557) */
		reached[1][14552] = 1;
		Printf("Supervisor is waiiting for RESUME mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14556, 14557) */
		reached[1][14556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6316: // STATE 14553 - mutant_243.pml:255 - [((_pid>1))] (14557:0:0 - 1)
		IfNotBlocked
		reached[1][14553] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)(0, 14554, 14557) */
		reached[1][14554] = 1;
		Printf("Worker %d is waiiting for RESUME mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14556, 14557) */
		reached[1][14556] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6317: // STATE 14557 - mutant_243.pml:258 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14557] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6318: // STATE 14558 - mutant_243.pml:259 - [printf('waiiting ended.\\n')] (0:14590:1 - 1)
		IfNotBlocked
		reached[1][14558] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14590, 14585, 14590) */
		reached[1][14585] = 1;
		;
		/* merge: j = (j+1)(14590, 14586, 14590) */
		reached[1][14586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14591, 14590) */
		reached[1][14591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6319: // STATE 14560 - mutant_243.pml:470 - [((12==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14560] = 1;
		if (!((12==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6320: // STATE 14561 - mutant_243.pml:239 - [((_pid==0))] (14569:0:0 - 1)
		IfNotBlocked
		reached[1][14561] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14562, 14569) */
		reached[1][14562] = 1;
		Printf("Init is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14568, 14569) */
		reached[1][14568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6321: // STATE 14563 - mutant_243.pml:241 - [((_pid==1))] (14569:0:0 - 1)
		IfNotBlocked
		reached[1][14563] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)(0, 14564, 14569) */
		reached[1][14564] = 1;
		Printf("Supervisor is waiiting for PAUSED mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14568, 14569) */
		reached[1][14568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6322: // STATE 14565 - mutant_243.pml:243 - [((_pid>1))] (14569:0:0 - 1)
		IfNotBlocked
		reached[1][14565] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)(0, 14566, 14569) */
		reached[1][14566] = 1;
		Printf("Worker %d is waiiting for PAUSED mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14568, 14569) */
		reached[1][14568] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6323: // STATE 14569 - mutant_243.pml:246 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14569] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6324: // STATE 14570 - mutant_243.pml:247 - [printf('waiiting ended.\\n')] (0:14590:1 - 1)
		IfNotBlocked
		reached[1][14570] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14590, 14585, 14590) */
		reached[1][14585] = 1;
		;
		/* merge: j = (j+1)(14590, 14586, 14590) */
		reached[1][14586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14591, 14590) */
		reached[1][14591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6325: // STATE 14572 - mutant_243.pml:472 - [((12==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14572] = 1;
		if (!((12==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6326: // STATE 14573 - mutant_243.pml:263 - [((_pid==0))] (14581:0:0 - 1)
		IfNotBlocked
		reached[1][14573] = 1;
		if (!((((int)((P1 *)_this)->_pid)==0)))
			continue;
		/* merge: printf('Init is waiiting for HALT mask on Thread %d...\\n',j)(0, 14574, 14581) */
		reached[1][14574] = 1;
		Printf("Init is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14580, 14581) */
		reached[1][14580] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6327: // STATE 14575 - mutant_243.pml:265 - [((_pid==1))] (14581:0:0 - 1)
		IfNotBlocked
		reached[1][14575] = 1;
		if (!((((int)((P1 *)_this)->_pid)==1)))
			continue;
		/* merge: printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)(0, 14576, 14581) */
		reached[1][14576] = 1;
		Printf("Supervisor is waiiting for HALT mask on Thread %d...\n", ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14580, 14581) */
		reached[1][14580] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6328: // STATE 14577 - mutant_243.pml:267 - [((_pid>1))] (14581:0:0 - 1)
		IfNotBlocked
		reached[1][14577] = 1;
		if (!((((int)((P1 *)_this)->_pid)>1)))
			continue;
		/* merge: printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)(0, 14578, 14581) */
		reached[1][14578] = 1;
		Printf("Worker %d is waiiting for HALT mask on Thread %d...\n", (((int)((P1 *)_this)->_pid)-1), ((int)((P1 *)_this)->j));
		/* merge: .(goto)(0, 14580, 14581) */
		reached[1][14580] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6329: // STATE 14581 - mutant_243.pml:270 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14581] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6330: // STATE 14582 - mutant_243.pml:271 - [printf('waiiting ended.\\n')] (0:14590:1 - 1)
		IfNotBlocked
		reached[1][14582] = 1;
		Printf("waiiting ended.\n");
		/* merge: .(goto)(14590, 14585, 14590) */
		reached[1][14585] = 1;
		;
		/* merge: j = (j+1)(14590, 14586, 14590) */
		reached[1][14586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14591, 14590) */
		reached[1][14591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6331: // STATE 14586 - mutant_243.pml:475 - [j = (j+1)] (0:14590:1 - 5)
		IfNotBlocked
		reached[1][14586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 14591, 14590) */
		reached[1][14591] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6332: // STATE 14588 - mutant_243.pml:477 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][14588] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 6333: // STATE 14604 - mutant_243.pml:5 - [(((0==0)&&(13==0)))] (14615:0:0 - 1)
		IfNotBlocked
		reached[1][14604] = 1;
		if (!(((0==0)&&(13==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',10,11)(0, 14605, 14615) */
		reached[1][14605] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 10, 11);
		/* merge: .(goto)(0, 14613, 14615) */
		reached[1][14613] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6334: // STATE 14606 - mutant_243.pml:7 - [(((0==0)&&(13>0)))] (14615:0:0 - 1)
		IfNotBlocked
		reached[1][14606] = 1;
		if (!(((0==0)&&(13>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',10,13,11)(0, 14607, 14615) */
		reached[1][14607] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 10, 13, 11);
		/* merge: .(goto)(0, 14613, 14615) */
		reached[1][14613] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6335: // STATE 14608 - mutant_243.pml:9 - [(((0>0)&&(13==0)))] (14615:0:0 - 1)
		IfNotBlocked
		reached[1][14608] = 1;
		if (!(((0>0)&&(13==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',0,10,11)(0, 14609, 14615) */
		reached[1][14609] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", 0, 10, 11);
		/* merge: .(goto)(0, 14613, 14615) */
		reached[1][14613] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6336: // STATE 14610 - mutant_243.pml:11 - [(((0>0)&&(13>0)))] (14615:0:0 - 1)
		IfNotBlocked
		reached[1][14610] = 1;
		if (!(((0>0)&&(13>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',0,10,13,11)(0, 14611, 14615) */
		reached[1][14611] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", 0, 10, 13, 11);
		/* merge: .(goto)(0, 14613, 14615) */
		reached[1][14613] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6337: // STATE 14615 - mutant_243.pml:570 - [states[0] = 11] (0:0:1 - 5)
		IfNotBlocked
		reached[1][14615] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 11;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6338: // STATE 14618 - mutant_243.pml:667 - [assert(0)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][14618] = 1;
		spin_assert(0, "0", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6339: // STATE 14621 - mutant_243.pml:669 - [-end-] (0:0:0 - 4)
		IfNotBlocked
		reached[1][14621] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC Thread */
	case 6340: // STATE 1 - mutant_243.pml:159 - [((commands[k]==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][1] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6341: // STATE 2 - mutant_243.pml:5 - [(((k==0)&&(5==0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[0][2] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(5==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',1,2)(0, 3, 13) */
		reached[0][3] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 1, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[0][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6342: // STATE 4 - mutant_243.pml:7 - [(((k==0)&&(5>0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[0][4] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(5>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',1,5,2)(0, 5, 13) */
		reached[0][5] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 1, 5, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[0][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6343: // STATE 6 - mutant_243.pml:9 - [(((k>0)&&(5==0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[0][6] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(5==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,1,2)(0, 7, 13) */
		reached[0][7] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 1, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[0][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6344: // STATE 8 - mutant_243.pml:11 - [(((k>0)&&(5>0)))] (13:0:0 - 1)
		IfNotBlocked
		reached[0][8] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(5>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,1,5,2)(0, 9, 13) */
		reached[0][9] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 1, 5, 2);
		/* merge: .(goto)(0, 11, 13) */
		reached[0][11] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6345: // STATE 13 - mutant_243.pml:152 - [states[k] = 2] (0:0:1 - 5)
		IfNotBlocked
		reached[0][13] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6346: // STATE 15 - mutant_243.pml:163 - [(((CONTINUE==START)&&(commands[k]==CONTINUE)))] (104:0:1 - 1)
		IfNotBlocked
		reached[0][15] = 1;
		if (!(((6==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(104, 16, 104) */
		reached[0][16] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(104, 17, 104) */
		reached[0][17] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6347: // STATE 33 - mutant_243.pml:181 - [.(goto)] (0:104:0 - 6)
		IfNotBlocked
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 6348: // STATE 18 - mutant_243.pml:166 - [(((CONTINUE==PAUSE)&&(commands[k]==CONTINUE)))] (104:0:1 - 1)
		IfNotBlocked
		reached[0][18] = 1;
		if (!(((6==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(104, 19, 104) */
		reached[0][19] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(104, 20, 104) */
		reached[0][20] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6349: // STATE 21 - mutant_243.pml:169 - [(((CONTINUE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (104:0:1 - 1)
		IfNotBlocked
		reached[0][21] = 1;
		if (!(((6==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(104, 22, 104) */
		reached[0][22] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(104, 23, 104) */
		reached[0][23] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6350: // STATE 24 - mutant_243.pml:172 - [(((CONTINUE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (104:0:1 - 1)
		IfNotBlocked
		reached[0][24] = 1;
		if (!(((6==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(104, 25, 104) */
		reached[0][25] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(104, 26, 104) */
		reached[0][26] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6351: // STATE 27 - mutant_243.pml:175 - [((CONTINUE==ABORT))] (104:0:1 - 1)
		IfNotBlocked
		reached[0][27] = 1;
		if (!((6==13)))
			continue;
		/* merge: assert((states[k]!=READY))(104, 28, 104) */
		reached[0][28] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(104, 29, 104) */
		reached[0][29] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6352: // STATE 31 - mutant_243.pml:179 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:104:0 - 1)
		IfNotBlocked
		reached[0][31] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(104, 33, 104) */
		reached[0][33] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6353: // STATE 36 - mutant_243.pml:19 - [assert((_pid!=1))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][36] = 1;
		spin_assert((((int)((P0 *)_this)->_pid)!=1), "(_pid!=1)", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6354: // STATE 37 - mutant_243.pml:22 - [(((ABORT==START)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][37] = 1;
		if (!(((13==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(217, 38, 217) */
		reached[0][38] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(217, 39, 217) */
		reached[0][39] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6355: // STATE 55 - mutant_243.pml:40 - [.(goto)] (0:217:0 - 6)
		IfNotBlocked
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6356: // STATE 40 - mutant_243.pml:25 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][40] = 1;
		if (!(((13==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(217, 41, 217) */
		reached[0][41] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(217, 42, 217) */
		reached[0][42] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6357: // STATE 43 - mutant_243.pml:28 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][43] = 1;
		if (!(((13==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(217, 44, 217) */
		reached[0][44] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(217, 45, 217) */
		reached[0][45] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6358: // STATE 46 - mutant_243.pml:31 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][46] = 1;
		if (!(((13==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(217, 47, 217) */
		reached[0][47] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(217, 48, 217) */
		reached[0][48] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6359: // STATE 49 - mutant_243.pml:34 - [((ABORT==ABORT))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][49] = 1;
		if (!((13==13)))
			continue;
		/* merge: assert((states[k]!=READY))(217, 50, 217) */
		reached[0][50] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(217, 51, 217) */
		reached[0][51] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6360: // STATE 53 - mutant_243.pml:38 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:217:0 - 1)
		IfNotBlocked
		reached[0][53] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(217, 55, 217) */
		reached[0][55] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6361: // STATE 59 - mutant_243.pml:49 - [(((PAUSE==START)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][59] = 1;
		if (!(((8==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(217, 60, 217) */
		reached[0][60] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(217, 61, 217) */
		reached[0][61] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6362: // STATE 77 - mutant_243.pml:67 - [.(goto)] (0:217:0 - 6)
		IfNotBlocked
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6363: // STATE 62 - mutant_243.pml:52 - [(((PAUSE==PAUSE)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][62] = 1;
		if (!(((8==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(217, 63, 217) */
		reached[0][63] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(217, 64, 217) */
		reached[0][64] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6364: // STATE 65 - mutant_243.pml:55 - [(((PAUSE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][65] = 1;
		if (!(((8==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(217, 66, 217) */
		reached[0][66] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(217, 67, 217) */
		reached[0][67] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6365: // STATE 68 - mutant_243.pml:58 - [(((PAUSE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][68] = 1;
		if (!(((8==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(217, 69, 217) */
		reached[0][69] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(217, 70, 217) */
		reached[0][70] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6366: // STATE 71 - mutant_243.pml:61 - [((PAUSE==ABORT))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][71] = 1;
		if (!((8==13)))
			continue;
		/* merge: assert((states[k]!=READY))(217, 72, 217) */
		reached[0][72] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(217, 73, 217) */
		reached[0][73] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6367: // STATE 75 - mutant_243.pml:65 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:217:0 - 1)
		IfNotBlocked
		reached[0][75] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(217, 77, 217) */
		reached[0][77] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6368: // STATE 80 - mutant_243.pml:71 - [(((STOP==START)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][80] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(217, 81, 217) */
		reached[0][81] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(217, 82, 217) */
		reached[0][82] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6369: // STATE 98 - mutant_243.pml:89 - [.(goto)] (0:217:0 - 6)
		IfNotBlocked
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6370: // STATE 83 - mutant_243.pml:74 - [(((STOP==PAUSE)&&(commands[k]==CONTINUE)))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][83] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(217, 84, 217) */
		reached[0][84] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(217, 85, 217) */
		reached[0][85] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6371: // STATE 86 - mutant_243.pml:77 - [(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][86] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(217, 87, 217) */
		reached[0][87] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(217, 88, 217) */
		reached[0][88] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6372: // STATE 89 - mutant_243.pml:80 - [(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][89] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(217, 90, 217) */
		reached[0][90] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(217, 91, 217) */
		reached[0][91] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6373: // STATE 92 - mutant_243.pml:83 - [((STOP==ABORT))] (217:0:1 - 1)
		IfNotBlocked
		reached[0][92] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[k]!=READY))(217, 93, 217) */
		reached[0][93] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(217, 94, 217) */
		reached[0][94] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 6374: // STATE 96 - mutant_243.pml:87 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:217:0 - 1)
		IfNotBlocked
		reached[0][96] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(217, 98, 217) */
		reached[0][98] = 1;
		;
		/* merge: .(goto)(0, 103, 217) */
		reached[0][103] = 1;
		;
		/* merge: .(goto)(0, 218, 217) */
		reached[0][218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 6375: // STATE 105 - mutant_243.pml:184 - [((commands[k]==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][105] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6376: // STATE 106 - mutant_243.pml:185 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][106] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6377: // STATE 107 - mutant_243.pml:187 - [((states[k]==STARTING))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][107] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6378: // STATE 108 - mutant_243.pml:5 - [(((k==0)&&(6==0)))] (119:0:0 - 1)
		IfNotBlocked
		reached[0][108] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(6==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',2,3)(0, 109, 119) */
		reached[0][109] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 2, 3);
		/* merge: .(goto)(0, 117, 119) */
		reached[0][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6379: // STATE 110 - mutant_243.pml:7 - [(((k==0)&&(6>0)))] (119:0:0 - 1)
		IfNotBlocked
		reached[0][110] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(6>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',2,6,3)(0, 111, 119) */
		reached[0][111] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 2, 6, 3);
		/* merge: .(goto)(0, 117, 119) */
		reached[0][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6380: // STATE 112 - mutant_243.pml:9 - [(((k>0)&&(6==0)))] (119:0:0 - 1)
		IfNotBlocked
		reached[0][112] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(6==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,2,3)(0, 113, 119) */
		reached[0][113] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 2, 3);
		/* merge: .(goto)(0, 117, 119) */
		reached[0][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6381: // STATE 114 - mutant_243.pml:11 - [(((k>0)&&(6>0)))] (119:0:0 - 1)
		IfNotBlocked
		reached[0][114] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(6>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,2,6,3)(0, 115, 119) */
		reached[0][115] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 2, 6, 3);
		/* merge: .(goto)(0, 117, 119) */
		reached[0][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6382: // STATE 119 - mutant_243.pml:152 - [states[k] = 3] (0:0:1 - 5)
		IfNotBlocked
		reached[0][119] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 3;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6383: // STATE 121 - mutant_243.pml:189 - [((states[k]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][121] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6384: // STATE 122 - mutant_243.pml:5 - [(((k==0)&&(6==0)))] (133:0:0 - 1)
		IfNotBlocked
		reached[0][122] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(6==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',4,3)(0, 123, 133) */
		reached[0][123] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 4, 3);
		/* merge: .(goto)(0, 131, 133) */
		reached[0][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6385: // STATE 124 - mutant_243.pml:7 - [(((k==0)&&(6>0)))] (133:0:0 - 1)
		IfNotBlocked
		reached[0][124] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(6>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',4,6,3)(0, 125, 133) */
		reached[0][125] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 4, 6, 3);
		/* merge: .(goto)(0, 131, 133) */
		reached[0][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6386: // STATE 126 - mutant_243.pml:9 - [(((k>0)&&(6==0)))] (133:0:0 - 1)
		IfNotBlocked
		reached[0][126] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(6==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,4,3)(0, 127, 133) */
		reached[0][127] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 4, 3);
		/* merge: .(goto)(0, 131, 133) */
		reached[0][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6387: // STATE 128 - mutant_243.pml:11 - [(((k>0)&&(6>0)))] (133:0:0 - 1)
		IfNotBlocked
		reached[0][128] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(6>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,4,6,3)(0, 129, 133) */
		reached[0][129] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 4, 6, 3);
		/* merge: .(goto)(0, 131, 133) */
		reached[0][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6388: // STATE 133 - mutant_243.pml:152 - [states[k] = 3] (0:0:1 - 5)
		IfNotBlocked
		reached[0][133] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 3;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6389: // STATE 139 - mutant_243.pml:95 - [executing[k] = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[0][139] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]);
		now.executing[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("executing[Thread:k]", ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6390: // STATE 141 - mutant_243.pml:19 - [assert((_pid!=1))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][141] = 1;
		spin_assert((((int)((P0 *)_this)->_pid)!=1), "(_pid!=1)", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6391: // STATE 142 - mutant_243.pml:22 - [(((ABORT==START)&&(commands[k]==CONTINUE)))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][142] = 1;
		if (!(((13==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(188, 143, 188) */
		reached[0][143] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(188, 144, 188) */
		reached[0][144] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6392: // STATE 160 - mutant_243.pml:40 - [.(goto)] (0:188:0 - 6)
		IfNotBlocked
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6393: // STATE 145 - mutant_243.pml:25 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][145] = 1;
		if (!(((13==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(188, 146, 188) */
		reached[0][146] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(188, 147, 188) */
		reached[0][147] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6394: // STATE 148 - mutant_243.pml:28 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][148] = 1;
		if (!(((13==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(188, 149, 188) */
		reached[0][149] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(188, 150, 188) */
		reached[0][150] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6395: // STATE 151 - mutant_243.pml:31 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][151] = 1;
		if (!(((13==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(188, 152, 188) */
		reached[0][152] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(188, 153, 188) */
		reached[0][153] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6396: // STATE 154 - mutant_243.pml:34 - [((ABORT==ABORT))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][154] = 1;
		if (!((13==13)))
			continue;
		/* merge: assert((states[k]!=READY))(188, 155, 188) */
		reached[0][155] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(188, 156, 188) */
		reached[0][156] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6397: // STATE 158 - mutant_243.pml:38 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:188:0 - 1)
		IfNotBlocked
		reached[0][158] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(188, 160, 188) */
		reached[0][160] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6398: // STATE 164 - mutant_243.pml:102 - [(((STOP==START)&&(commands[k]==CONTINUE)))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][164] = 1;
		if (!(((12==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(188, 165, 188) */
		reached[0][165] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(188, 166, 188) */
		reached[0][166] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6399: // STATE 182 - mutant_243.pml:120 - [.(goto)] (0:188:0 - 6)
		IfNotBlocked
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6400: // STATE 167 - mutant_243.pml:105 - [(((STOP==PAUSE)&&(commands[k]==CONTINUE)))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][167] = 1;
		if (!(((12==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(188, 168, 188) */
		reached[0][168] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(188, 169, 188) */
		reached[0][169] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6401: // STATE 170 - mutant_243.pml:108 - [(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][170] = 1;
		if (!(((12==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(188, 171, 188) */
		reached[0][171] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(188, 172, 188) */
		reached[0][172] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6402: // STATE 173 - mutant_243.pml:111 - [(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][173] = 1;
		if (!(((12==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(188, 174, 188) */
		reached[0][174] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(188, 175, 188) */
		reached[0][175] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6403: // STATE 176 - mutant_243.pml:114 - [((STOP==ABORT))] (188:0:1 - 1)
		IfNotBlocked
		reached[0][176] = 1;
		if (!((12==13)))
			continue;
		/* merge: assert((states[k]!=READY))(188, 177, 188) */
		reached[0][177] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(188, 178, 188) */
		reached[0][178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6404: // STATE 180 - mutant_243.pml:118 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:188:0 - 1)
		IfNotBlocked
		reached[0][180] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(188, 182, 188) */
		reached[0][182] = 1;
		;
		/* merge: .(goto)(0, 187, 188) */
		reached[0][187] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6405: // STATE 188 - mutant_243.pml:124 - [executing[k] = 0] (0:0:1 - 4)
		IfNotBlocked
		reached[0][188] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]);
		now.executing[ Index(((P0 *)_this)->k, 3) ] = 0;
#ifdef VAR_RANGES
		logval("executing[Thread:k]", ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6406: // STATE 190 - mutant_243.pml:195 - [((commands[k]==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][190] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6407: // STATE 191 - mutant_243.pml:197 - [((states[k]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][191] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6408: // STATE 192 - mutant_243.pml:198 - [((commands[k]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][192] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==4)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6409: // STATE 194 - mutant_243.pml:200 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STARTING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][194] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)), "(((states[k]==2)||(states[k]==3))||(states[k]==2))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6410: // STATE 195 - mutant_243.pml:202 - [(((states[k]==STARTING)||(states[k]==RUNNING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][195] = 1;
		if (!(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6411: // STATE 196 - mutant_243.pml:5 - [(((k==0)&&(8==0)))] (207:0:0 - 1)
		IfNotBlocked
		reached[0][196] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(8==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',3,4)(0, 197, 207) */
		reached[0][197] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 3, 4);
		/* merge: .(goto)(0, 205, 207) */
		reached[0][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6412: // STATE 198 - mutant_243.pml:7 - [(((k==0)&&(8>0)))] (207:0:0 - 1)
		IfNotBlocked
		reached[0][198] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(8>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',3,8,4)(0, 199, 207) */
		reached[0][199] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 3, 8, 4);
		/* merge: .(goto)(0, 205, 207) */
		reached[0][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6413: // STATE 200 - mutant_243.pml:9 - [(((k>0)&&(8==0)))] (207:0:0 - 1)
		IfNotBlocked
		reached[0][200] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(8==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,3,4)(0, 201, 207) */
		reached[0][201] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 3, 4);
		/* merge: .(goto)(0, 205, 207) */
		reached[0][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6414: // STATE 202 - mutant_243.pml:11 - [(((k>0)&&(8>0)))] (207:0:0 - 1)
		IfNotBlocked
		reached[0][202] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(8>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,3,8,4)(0, 203, 207) */
		reached[0][203] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 3, 8, 4);
		/* merge: .(goto)(0, 205, 207) */
		reached[0][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6415: // STATE 207 - mutant_243.pml:156 - [states[k] = 4] (0:0:1 - 5)
		IfNotBlocked
		reached[0][207] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 4;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6416: // STATE 215 - mutant_243.pml:208 - [(((commands[k]==STOP)||(commands[k]==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][215] = 1;
		if (!(((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==13))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6417: // STATE 220 - mutant_243.pml:212 - [((commands[k]==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][220] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6418: // STATE 221 - mutant_243.pml:213 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][221] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6419: // STATE 222 - mutant_243.pml:5 - [(((k==0)&&(12==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][222] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(12==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6420: // STATE 223 - mutant_243.pml:6 - [printf('Supervisor: (%e, _) -> %e\\n',states[k],7)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][223] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", now.states[ Index(((int)((P0 *)_this)->k), 3) ], 7);
		_m = 3; goto P999; /* 0 */
	case 6421: // STATE 224 - mutant_243.pml:7 - [(((k==0)&&(12>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][224] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(12>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6422: // STATE 225 - mutant_243.pml:8 - [printf('Supervisor: (%e, %e) -> %e\\n',states[k],12,7)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][225] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", now.states[ Index(((int)((P0 *)_this)->k), 3) ], 12, 7);
		_m = 3; goto P999; /* 0 */
	case 6423: // STATE 226 - mutant_243.pml:9 - [(((k>0)&&(12==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][226] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(12==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6424: // STATE 227 - mutant_243.pml:10 - [printf('Worker %d: (%e, _) -> %e\\n',k,states[k],7)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][227] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), now.states[ Index(((int)((P0 *)_this)->k), 3) ], 7);
		_m = 3; goto P999; /* 0 */
	case 6425: // STATE 228 - mutant_243.pml:11 - [(((k>0)&&(12>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][228] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(12>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6426: // STATE 229 - mutant_243.pml:12 - [printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],12,7)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][229] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), now.states[ Index(((int)((P0 *)_this)->k), 3) ], 12, 7);
		_m = 3; goto P999; /* 0 */
	case 6427: // STATE 233 - mutant_243.pml:152 - [states[k] = 7] (0:0:1 - 5)
		IfNotBlocked
		reached[0][233] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 7;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6428: // STATE 236 - mutant_243.pml:19 - [assert((_pid!=1))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][236] = 1;
		spin_assert((((int)((P0 *)_this)->_pid)!=1), "(_pid!=1)", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6429: // STATE 237 - mutant_243.pml:22 - [(((ABORT==START)&&(commands[k]==CONTINUE)))] (275:0:1 - 1)
		IfNotBlocked
		reached[0][237] = 1;
		if (!(((13==5)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert((states[k]==READY))(275, 238, 275) */
		reached[0][238] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==1), "(states[k]==1)", II, tt, t);
		/* merge: commands[k] = START(275, 239, 275) */
		reached[0][239] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6430: // STATE 255 - mutant_243.pml:40 - [.(goto)] (0:275:0 - 6)
		IfNotBlocked
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 6431: // STATE 240 - mutant_243.pml:25 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (275:0:1 - 1)
		IfNotBlocked
		reached[0][240] = 1;
		if (!(((13==8)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(275, 241, 275) */
		reached[0][241] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3)), "((states[k]==2)||(states[k]==3))", II, tt, t);
		/* merge: commands[k] = PAUSE(275, 242, 275) */
		reached[0][242] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6432: // STATE 243 - mutant_243.pml:28 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (275:0:1 - 1)
		IfNotBlocked
		reached[0][243] = 1;
		if (!(((13==6)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==5)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(275, 244, 275) */
		reached[0][244] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "((states[k]==2)||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = CONTINUE(275, 245, 275) */
		reached[0][245] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6433: // STATE 246 - mutant_243.pml:31 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (275:0:1 - 1)
		IfNotBlocked
		reached[0][246] = 1;
		if (!(((13==12)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(275, 247, 275) */
		reached[0][247] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==4)), "(((states[k]==2)||(states[k]==3))||(states[k]==4))", II, tt, t);
		/* merge: commands[k] = STOP(275, 248, 275) */
		reached[0][248] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6434: // STATE 249 - mutant_243.pml:34 - [((ABORT==ABORT))] (275:0:1 - 1)
		IfNotBlocked
		reached[0][249] = 1;
		if (!((13==13)))
			continue;
		/* merge: assert((states[k]!=READY))(275, 250, 275) */
		reached[0][250] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=1), "(states[k]!=1)", II, tt, t);
		/* merge: commands[k] = ABORT(275, 251, 275) */
		reached[0][251] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 13;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 6435: // STATE 253 - mutant_243.pml:38 - [printf('Thread %d ignores command %e.\\n',k,commands[k])] (0:275:0 - 1)
		IfNotBlocked
		reached[0][253] = 1;
		Printf("Thread %d ignores command %e.\n", ((int)((P0 *)_this)->k), now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
		/* merge: .(goto)(275, 255, 275) */
		reached[0][255] = 1;
		;
		/* merge: .(goto)(0, 261, 275) */
		reached[0][261] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6436: // STATE 263 - mutant_243.pml:5 - [(((k==0)&&(12==0)))] (274:0:0 - 1)
		IfNotBlocked
		reached[0][263] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(12==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',7,9)(0, 264, 274) */
		reached[0][264] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 7, 9);
		/* merge: .(goto)(0, 272, 274) */
		reached[0][272] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6437: // STATE 265 - mutant_243.pml:7 - [(((k==0)&&(12>0)))] (274:0:0 - 1)
		IfNotBlocked
		reached[0][265] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(12>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',7,12,9)(0, 266, 274) */
		reached[0][266] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 7, 12, 9);
		/* merge: .(goto)(0, 272, 274) */
		reached[0][272] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6438: // STATE 267 - mutant_243.pml:9 - [(((k>0)&&(12==0)))] (274:0:0 - 1)
		IfNotBlocked
		reached[0][267] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(12==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,7,9)(0, 268, 274) */
		reached[0][268] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 7, 9);
		/* merge: .(goto)(0, 272, 274) */
		reached[0][272] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6439: // STATE 269 - mutant_243.pml:11 - [(((k>0)&&(12>0)))] (274:0:0 - 1)
		IfNotBlocked
		reached[0][269] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(12>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,7,12,9)(0, 270, 274) */
		reached[0][270] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 7, 12, 9);
		/* merge: .(goto)(0, 272, 274) */
		reached[0][272] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6440: // STATE 274 - mutant_243.pml:156 - [states[k] = 9] (0:0:1 - 5)
		IfNotBlocked
		reached[0][274] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6441: // STATE 276 - mutant_243.pml:217 - [((commands[k]==ABORT))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][276] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==13)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6442: // STATE 277 - mutant_243.pml:218 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][277] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==3))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==7)), "(((states[k]==2)||(states[k]==3))||(states[k]==7))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6443: // STATE 278 - mutant_243.pml:5 - [(((k==0)&&(13==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][278] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(13==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6444: // STATE 279 - mutant_243.pml:6 - [printf('Supervisor: (%e, _) -> %e\\n',states[k],10)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][279] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", now.states[ Index(((int)((P0 *)_this)->k), 3) ], 10);
		_m = 3; goto P999; /* 0 */
	case 6445: // STATE 280 - mutant_243.pml:7 - [(((k==0)&&(13>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][280] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(13>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6446: // STATE 281 - mutant_243.pml:8 - [printf('Supervisor: (%e, %e) -> %e\\n',states[k],13,10)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][281] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", now.states[ Index(((int)((P0 *)_this)->k), 3) ], 13, 10);
		_m = 3; goto P999; /* 0 */
	case 6447: // STATE 282 - mutant_243.pml:9 - [(((k>0)&&(13==0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][282] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(13==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6448: // STATE 283 - mutant_243.pml:10 - [printf('Worker %d: (%e, _) -> %e\\n',k,states[k],10)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][283] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), now.states[ Index(((int)((P0 *)_this)->k), 3) ], 10);
		_m = 3; goto P999; /* 0 */
	case 6449: // STATE 284 - mutant_243.pml:11 - [(((k>0)&&(13>0)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][284] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(13>0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6450: // STATE 285 - mutant_243.pml:12 - [printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],13,10)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][285] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), now.states[ Index(((int)((P0 *)_this)->k), 3) ], 13, 10);
		_m = 3; goto P999; /* 0 */
	case 6451: // STATE 289 - mutant_243.pml:152 - [states[k] = 10] (0:0:1 - 5)
		IfNotBlocked
		reached[0][289] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 10;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6452: // STATE 291 - mutant_243.pml:5 - [(((k==0)&&(13==0)))] (302:0:0 - 1)
		IfNotBlocked
		reached[0][291] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(13==0))))
			continue;
		/* merge: printf('Supervisor: (%e, _) -> %e\\n',10,11)(0, 292, 302) */
		reached[0][292] = 1;
		Printf("Supervisor: (%e, _) -> %e\n", 10, 11);
		/* merge: .(goto)(0, 300, 302) */
		reached[0][300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6453: // STATE 293 - mutant_243.pml:7 - [(((k==0)&&(13>0)))] (302:0:0 - 1)
		IfNotBlocked
		reached[0][293] = 1;
		if (!(((((int)((P0 *)_this)->k)==0)&&(13>0))))
			continue;
		/* merge: printf('Supervisor: (%e, %e) -> %e\\n',10,13,11)(0, 294, 302) */
		reached[0][294] = 1;
		Printf("Supervisor: (%e, %e) -> %e\n", 10, 13, 11);
		/* merge: .(goto)(0, 300, 302) */
		reached[0][300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6454: // STATE 295 - mutant_243.pml:9 - [(((k>0)&&(13==0)))] (302:0:0 - 1)
		IfNotBlocked
		reached[0][295] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(13==0))))
			continue;
		/* merge: printf('Worker %d: (%e, _) -> %e\\n',k,10,11)(0, 296, 302) */
		reached[0][296] = 1;
		Printf("Worker %d: (%e, _) -> %e\n", ((int)((P0 *)_this)->k), 10, 11);
		/* merge: .(goto)(0, 300, 302) */
		reached[0][300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6455: // STATE 297 - mutant_243.pml:11 - [(((k>0)&&(13>0)))] (302:0:0 - 1)
		IfNotBlocked
		reached[0][297] = 1;
		if (!(((((int)((P0 *)_this)->k)>0)&&(13>0))))
			continue;
		/* merge: printf('Worker %d: (%e, %e) -> %e\\n',k,10,13,11)(0, 298, 302) */
		reached[0][298] = 1;
		Printf("Worker %d: (%e, %e) -> %e\n", ((int)((P0 *)_this)->k), 10, 13, 11);
		/* merge: .(goto)(0, 300, 302) */
		reached[0][300] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 6456: // STATE 302 - mutant_243.pml:156 - [states[k] = 11] (0:0:1 - 5)
		IfNotBlocked
		reached[0][302] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 11;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 6457: // STATE 305 - mutant_243.pml:222 - [assert(0)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][305] = 1;
		spin_assert(0, "0", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 6458: // STATE 308 - mutant_243.pml:224 - [-end-] (0:0:0 - 4)
		IfNotBlocked
		reached[0][308] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */
	case  _T5:	/* np_ */
		if (!((!(trpt->o_pm&4) && !(trpt->tau&128))))
			continue;
		/* else fall through */
	case  _T2:	/* true */
		_m = 3; goto P999;
#undef rand
	}


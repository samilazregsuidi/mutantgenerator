# 1 "Theory.prp"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "Theory.prp"
# 150 "Theory.prp"
ltl fsm_ready
{
    (states[0] == 0 U ((states[0] == READY) W (states[0] == STARTING))) && (states[1] == 0 U ((states[1] == READY) W (states[1] == STARTING))) && (states[2] == 0 U ((states[2] == READY) W (states[2] == STARTING)))
}




ltl fsm_starting
{
    []((states[0] == STARTING -> (states[0] == STARTING U (states[0] == RUNNING || states[0] == PAUSED || states[0] == STOPPING || states[0] == ABORTING))) && (states[1] == STARTING -> (states[1] == STARTING U (states[1] == RUNNING || states[1] == PAUSED || states[1] == STOPPING || states[1] == ABORTING))) && (states[2] == STARTING -> (states[2] == STARTING U (states[2] == RUNNING || states[2] == PAUSED || states[2] == STOPPING || states[2] == ABORTING))))
}




ltl fsm_running
{
    []((states[0] == RUNNING -> ((states[0] == RUNNING) W (states[0] == PAUSED || states[0] == STOPPING || states[0] == ABORTING))) && (states[1] == RUNNING -> ((states[1] == RUNNING) W (states[1] == PAUSED || states[1] == STOPPING || states[1] == ABORTING))) && (states[2] == RUNNING -> ((states[2] == RUNNING) W (states[2] == PAUSED || states[2] == STOPPING || states[2] == ABORTING))))
}




ltl fsm_paused
{
    []((states[0] == PAUSED -> ((states[0] == PAUSED) W (states[0] == RUNNING || states[0] == STOPPING))) && (states[1] == PAUSED -> ((states[1] == PAUSED) W (states[1] == RUNNING || states[1] == STOPPING))) && (states[2] == PAUSED -> ((states[2] == PAUSED) W (states[2] == RUNNING || states[2] == STOPPING))))
}




ltl fsm_stopping
{
    [](([](states[0] == STOPPING -> (states[0] == STOPPING U (states[0] == STOPPED || states[0] == ABORTING)))) && ([](states[1] == STOPPING -> (states[1] == STOPPING U (states[1] == STOPPED || states[1] == ABORTING)))) && ([](states[2] == STOPPING -> (states[2] == STOPPING U (states[2] == STOPPED || states[2] == ABORTING)))))
}





ltl fsm_stopped
{
    [](((states[0] == STOPPED) -> ((states[0] == STOPPED) W [](states[0] == 0))) && ((states[1] == STOPPED) -> ((states[1] == STOPPED) W [](states[1] == 0))) && ((states[2] == STOPPED) -> ((states[2] == STOPPED) W [](states[2] == 0))))
}




ltl fsm_aborting
{
    [](([](states[0] == ABORTING -> (states[0] == ABORTING U (states[0] == ABORTED)))) && ([](states[1] == ABORTING -> (states[1] == ABORTING U (states[1] == ABORTED)))) && ([](states[2] == ABORTING -> (states[2] == ABORTING U (states[2] == ABORTED)))))
}





ltl fsm_aborted
{
    [](((states[0] == ABORTED) -> ((states[0] == ABORTED) W [](states[0] == 0))) && ((states[1] == ABORTED) -> ((states[1] == ABORTED) W [](states[1] == 0))) && ((states[2] == ABORTED) -> ((states[2] == ABORTED) W [](states[2] == 0))))
}





ltl abort_is_undoable
{
    [](((commands[0] == ABORT) -> ((commands[0] == ABORT) W [](commands[0] == 0))) && ((commands[1] == ABORT) -> ((commands[1] == ABORT) W [](commands[1] == 0))) && ((commands[2] == ABORT) -> ((commands[2] == ABORT) W [](commands[2] == 0))))
}





ltl supervisor_is_the_first_thread
{
    []((states[0] == 0) -> (states[1] == 0 && states[2] == 0))
}







ltl supervisor_constructs_workers
{
    []((states[1] == READY || states[2] == READY) -> !(states[0] == 0))
}







ltl supervisor_stops_after_all_workers_stop
{
    []((states[1] == STOPPED && states[2] == STOPPED) ->
        ([]<>(states[0] == PAUSED) || <>(states[0] == STOPPED)))
}





ltl supervisor_stops_after_some_workers_abort
{
    []((states[1] == ABORTED || states[2] == ABORTED) ->
        ([]<>(states[0] == PAUSED) || <>(states[0] == STOPPED)))
}




ltl supervisor_never_aborts {!<>(states[0] == ABORTED || commands[0] == ABORT)}




ltl supervisor_halts_last
{
    []((states[0] == STOPPING || states[0] == ABORTING) -> <>((states[1] == STOPPED || states[1] == ABORTED || states[1] == 0) && (states[2] == STOPPED || states[2] == ABORTED || states[2] == 0)))
}

ltl liveness
{
    ([]<>((states[0] == RUNNING && commands[0] == CONTINUE) -> (executing[0])) && []<>((states[1] == RUNNING && commands[1] == CONTINUE) -> (executing[1])) && []<>((states[2] == RUNNING && commands[2] == CONTINUE) -> (executing[2]))) W (states[0] == STOPPING || states[0] == ABORTING)
}

ltl fairness
{
    (([]<>(states[0] == RUNNING && commands[0] == CONTINUE) -> []<>(executing[0])) && ([]<>(states[1] == RUNNING && commands[1] == CONTINUE) -> []<>(executing[1])) && ([]<>(states[2] == RUNNING && commands[2] == CONTINUE) -> []<>(executing[2])))
}
